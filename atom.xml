<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://stary2020.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://stary2020.gitee.io/"/>
  <updated>2021-08-26T14:04:48.977Z</updated>
  <id>http://stary2020.gitee.io/</id>
  
  <author>
    <name>stary</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EVE-NG仿真路由组网与交换机配置</title>
    <link href="http://stary2020.gitee.io/2021/08/26/EVENGOfNetwork/"/>
    <id>http://stary2020.gitee.io/2021/08/26/EVENGOfNetwork/</id>
    <published>2021-08-26T05:40:34.000Z</published>
    <updated>2021-08-26T14:04:48.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>本项目截止日期：2021年1月11日</p><p>本项目为之前的学习实践内容整理，记录学习过程，仅供参考、学习。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>windows 10</p><p>VMware 15.5</p><p>EVE-NG</p><p>VNC</p><p>Xshell</p><p>……</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>本次实验拓扑图由12台路由器和一台电脑、一个云网络接口构成。</p><p>主体分为四个部分：由两台路由器组成的公司网络，由两台路由器组成的子公司网络，由7台路由器和云组成的运营商网络，和由一台路由器和一台电脑组成的用户网络。公司和子公司之家通过运营商网络连接，用户通过运营商网络保证可以正常上网。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>1.用户网络可以上网</p><p>2.运营商网络，运营商设备运行OSPF，重要节点运行BGP</p><p>3.企业与子公司之间使用MPLS VPN连接内网</p><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215423618.png" alt="image-20210826215423618"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="基础拓扑搭建"><a href="#基础拓扑搭建" class="headerlink" title="基础拓扑搭建"></a>基础拓扑搭建</h2><p>略</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="1家庭网络上网"><a href="#1家庭网络上网" class="headerlink" title="1家庭网络上网"></a>1家庭网络上网</h3><p>基本ip配置与ospf</p><p>R5</p><p>​                   <img src="/2021/08/26/EVENGOfNetwork/image-20210826215433479.png" alt="image-20210826215433479"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215534464.png" alt="image-20210826215534464"></p><p>配置nat及下发默认路由</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215601197.png" alt="image-20210826215601197"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215613450.png" alt="image-20210826215613450"></p><p>R6</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215626515.png" alt="image-20210826215626515"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215633376.png" alt="image-20210826215633376"></p><p>R11</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215644389.png" alt="image-20210826215644389"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215650009.png" alt="image-20210826215650009"></p><p>用户网络配置</p><p>R12：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215703083.png" alt="image-20210826215703083"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215708897.png" alt="image-20210826215708897"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215712952.png" alt="image-20210826215712952"></p><h3 id="2运营商网络"><a href="#2运营商网络" class="headerlink" title="2运营商网络"></a>2运营商网络</h3><p>基本IP与ospf配置</p><p>R3：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215728508.png" alt="image-20210826215728508"></p><p>R4</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215736938.png" alt="image-20210826215736938"></p><p>R6</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215747870.png" alt="image-20210826215747870"></p><p>R7</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215757456.png" alt="image-20210826215757456"></p><p>R8</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215809777.png" alt="image-20210826215809777"></p><p>MPLS</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215821981.png" alt="image-20210826215821981"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215827576.png" alt="image-20210826215827576"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215833265.png" alt="image-20210826215833265"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215837972.png" alt="image-20210826215837972"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215842647.png" alt="image-20210826215842647"></p><p>建立bgp</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215853984.png" alt="image-20210826215853984"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215858598.png" alt="image-20210826215858598"></p><p>虚拟路由：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215908758.png" alt="image-20210826215908758"></p><h3 id="3企业网络"><a href="#3企业网络" class="headerlink" title="3企业网络"></a>3企业网络</h3><p>公司ip配置与ospf</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215918229.png" alt="image-20210826215918229"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215927032.png" alt="image-20210826215927032"></p><p>子公司IP配置与ospf</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215937138.png" alt="image-20210826215937138"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215942973.png" alt="image-20210826215942973"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215947092.png" alt="image-20210826215947092"></p><p>bgp抓取、转发数据</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826215957968.png" alt="image-20210826215957968"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220003268.png" alt="image-20210826220003268"></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="1家庭网络上网-1"><a href="#1家庭网络上网-1" class="headerlink" title="1家庭网络上网"></a>1家庭网络上网</h2><p>用户网络可以正常上网：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220021171.png" alt="image-20210826220021171"></p><h2 id="2运营商网络验证"><a href="#2运营商网络验证" class="headerlink" title="2运营商网络验证"></a>2运营商网络验证</h2><p>mpls检查：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220030818.png" alt="image-20210826220030818"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220036267.png" alt="image-20210826220036267"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220040454.png" alt="image-20210826220040454"></p><p>验证bgp</p><p>验证bgp邻居关系：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220050622.png" alt="image-20210826220050622"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220055219.png" alt="image-20210826220055219"></p><h2 id="3企业网络连通性验证"><a href="#3企业网络连通性验证" class="headerlink" title="3企业网络连通性验证"></a>3企业网络连通性验证</h2><p>公司与运营商联通测试：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220105585.png" alt="image-20210826220105585"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220109834.png" alt="image-20210826220109834"></p><p>公司和子公司网络连通性验证：</p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220118342.png" alt="image-20210826220118342"></p><p><img src="/2021/08/26/EVENGOfNetwork/image-20210826220124689.png" alt="image-20210826220124689"></p><h2 id="4总结"><a href="#4总结" class="headerlink" title="4总结"></a>4总结</h2><p>经过好几天的不断学习与尝试后，最终基本完成了本次实验，实验的过程并非一帆风顺，经常会遇到许多问题，许多东西，虽然老师上课讲过，但是自己实际操作时，仍会有许多疏漏与错误，一步一步做实验的过程，也是一个学习与思考的过程，付出与收获是一个正比例的关系，本次实验花了很多时间，同时也收获了许多东西。</p><p>不同与之前的几次作业，本次实验需要我们自己独立思考，独立构思网络结构，并实现该网络的各种配置，这对于习惯了跟着老师走的我们来说，无疑是一个不大不小的挑战，一方面，我们缺少这种独立搭建一个项目的经验，另一方面，我们未来工作需要的也正是这种经验，而这次实验则很好地填补了我们实验方面的短板。</p><p>在这次实验中，极大地加强了我的网络相关知识，但给我印象最深的还是关于组网、网络搭建这件事本身，互联网时代，人人都挂在网络上，但我们对网络的认知却依旧停留在一个十分浅显的表面。通过这次实验，我对网络有了一个十分深刻的认识与了解，在 进一步了解网络的组网与配置后，才能更进一步体会到互联网先辈的智慧与伟大，学习的道路仍旧漫长。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;本项目截止日期：2021年1月11日&lt;/p&gt;
&lt;p&gt;本项目为之前的学习实践内容整理，记录学习过程，仅供参考、学习。&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="实践" scheme="http://stary2020.gitee.io/tags/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="网络" scheme="http://stary2020.gitee.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>基于windows server搭建的故障群集转移</title>
    <link href="http://stary2020.gitee.io/2021/08/26/windowsServerHyperV/"/>
    <id>http://stary2020.gitee.io/2021/08/26/windowsServerHyperV/</id>
    <published>2021-08-26T05:31:28.000Z</published>
    <updated>2021-08-26T14:20:36.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>本项目截止日期：2021年6月24日</p><p>本项目为之前的学习实践内容整理，记录学习过程，仅供参考、学习。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>windows 10</p><p>VMware 15.5</p><p>windows server 2012</p><p>centos 7</p><p>MobaXterm</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Hyper-V 2012 R2 故障转移群集。故障转移群集是一组独立的计算机，这些计算机相互协作以提高群集角色（之前称为应用程序和服务）的可用性和可伸缩性。 多台群集服务器（称为节点）通过物理电缆和软件连接。 如果一个或多个群集节点出现故障，其他节点就会开始提供服务（该过程称为故障转移）。 此外，群集角色会得到主动监视以验证它们是否正常工作。 如果不工作，则会重新启动这些角色或将其移动到其他节点。</p><p>故障转移群集可以实现以下⼏个⽬标：</p><p>适应计划内的停机维护，通过故障转移群集，可以在设定的时间范围内对群集内的⼀部分服务器进⾏停机维护，同时可以保障业务的连贯性。使⽤故障转移群集，可以在⽩天进⾏⼀些维护⼯作，⽽⽆需等到夜深⼈静时加班去做这些操作。</p><p>减少计划外的停机时间，故障转移群集通过⾃有的算法机制，⾃动接管意外停机服务器上的服务，减少由于硬件或软件的故障造成的停机，对业务连贯性的影响，维护整套系统的⾼可⽤性。</p><p>在 Windows Server 2012 R2 中，故障转移群集⽀持最多 64 个节点，⽽在 Windows Server 2008 R2中，仅仅⽀持 16 个节点。在数据中⼼越来越庞⼤的今天，16 个节点的限制显然是捉襟⻅肘的，要满⾜⽤户的需求，升级系统势在必⾏。同时，在 Windows Server 2012 R2 中，每个群集中的最⼤虚拟机数量也从 Windows Server 2008 R2 中的 1000 个提升到了 8000 个。</p><p>故障转移群集可以为企业带来更⾼的可⽤性，相应的，为了搭建故障转移群集需要付出⼀部分代价⽅可实现。</p><p>相对较低的资源利⽤率，由于希望当故障发⽣时，可以有备⽤的服务器随时转移故障，接管服务，因此群集内的所有服务器不可能会满负荷运⾏，⾄少要预留⼀部分资源，以完成可能会发⽣的故障转移的操作。</p><p>增加响应时间，由于最终⽤户不是直接和⽬标服务器通信，⽽是由⼀套群集机制来负载和分流，因此对于维护故障转移群集本身，这需要消耗⼀部分系统资源去实现，相应的，会增加⼀些系统响应时间。</p><p>额外的成本，由于使⽤故障转移群集需要投⼊冗余的硬件成本和共享存储，因此在设备投资上会超越⾮⾼可⽤架构的设计规划。</p><p>相对较⾼的技术要求，由于使⽤了冗余的架构设计，因此需要 IT 管理⼈员的知识⾯要更加⼴泛。</p><p>故障转移群集要求⽹络存在冗余，⼀般实际部署中，单台物理服务器会使⽤两条⽹线，其中⼀条接⼊⽣产⽹络，另外⼀条作为⼼跳线（heart line），为群集之间互相验证存活的⼿段。需要注意的是，⼼跳线在Windows Server 2012/2012 R2 中并不是必要条件。故障转移群集建议的是⽹络链路的”最好”存在冗余，⾄于冗余的线路是承载⽣产⽹络还是单纯作为⼼跳使⽤，并没有严格要求。</p><p>如果希望业务能够很好的分层处理，在规划服务器虚拟化或微软私有云之初，就需要对故障转移群集的⽹络部分进⾏统筹设计。任何⽅案都类似，当架构成型后，再做架构⽅⾯的变动，就会牵扯到很多环节，继⽽有可能影响业务的持续可⽤。</p><h2 id="原理及技术"><a href="#原理及技术" class="headerlink" title="原理及技术"></a>原理及技术</h2><p>在本次实验中，主要通过在多台windows server 2012中构建一个故障转移群集，实现业务的连续不中断服务。</p><p>实验原理如下：选择多台windows server作为服务器，其中一台（storage）负责提供域名解析服务和ad域控制，并提供iSCI目标存储，即提供用作存储的虚拟磁盘。在另外两个服务器中开启故障转移群集并建立群集、搭建服务，实现服务的高可用。搭建过程中，节点服务器需要开启hyper-V虚拟功能用以安装centos系统提供服务。同时，群集的建立是在storage提供的虚拟磁盘的基础上的，这样可以保证某个节点掉线时，服务可以快速迁移。可以说，是利用storage作为存储和中介（判断服务在哪运行与提供AD服务），利用node1和node2的性能来实现服务的运行。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826220927238.png" alt="image-20210826220927238"></p><p>当节点发生故障时，由仲裁盘进行判定，决定服务在哪个节点上运行。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="1初始化环境"><a href="#1初始化环境" class="headerlink" title="1初始化环境"></a>1初始化环境</h2><p>在VMware中安装windows server 2012 R2。打开VMware，新建一个windows server2012的虚拟机，设置相关硬件属性，导入ISO镜像并初始化安装。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221011909.png" alt="image-20210826221011909"></p><p>在windows server中安装VMware tools工具，方便后续操作。</p><p>安装VMware tool时需下载相关补丁，并更新</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221023703.png" alt="image-20210826221023703"></p><p>使用VMware的克隆功能，获得多个windows server镜像，包括两个节点node1、node2和一个包含ad功能的存储服务器即storage。克隆时选择从链接获得克隆，节约存储空间，如果选择单独新建windows server 服务器的话，会极大地占用磁盘资源。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221038334.png" alt="image-20210826221038334"></p><p>重置三个镜像的sID并设置ip地址和主机名。开启虚拟机后，按下win+R键，输入sysprep，勾选通用，重置系统的sID，重置SID后，设置相关ip地址和主机名，方便组网时区分，否则，由于windows server 服务器是克隆得来的，在组网时无法区分。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221052297.png" alt="image-20210826221052297"></p><p>分别设置三个windows server的主机名和ip地址。其中node1节点ip为192.168.68.10，node2节点ip为192.168.68.20，storage节点ip为192.168.68.30，三者的dns解析服务器都是192.168.68.30（storage提供解析服务）</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221104177.png" alt="image-20210826221104177"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221109649.png" alt="image-20210826221109649"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221116415.png" alt="image-20210826221116415"></p><p>开启hyper-V虚拟化。为了实现在VMware中安装windows并使用windows的虚拟化技术hyper-V，需要开启处理器的虚拟化Intel VT-x/EPT，并修改vmx的配置文件（欺骗VMware）。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221128534.png" alt="image-20210826221128534"></p><p>修改配置文件：</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221139564.png" alt="image-20210826221139564"></p><h2 id="2创建域控制器，并加入域"><a href="#2创建域控制器，并加入域" class="headerlink" title="2创建域控制器，并加入域"></a>2创建域控制器，并加入域</h2><p>storage安装ad服务器和dns服务器。在storage服务器中，新建角色，在服务器角色勾选Active Directory 域服务，在功能处勾选DNS服务，确认后，安装。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221159749.png" alt="image-20210826221159749"></p><p>安装后，需要重启，重启storage后，点击“将此服务器提升为域控制器”。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221211226.png" alt="image-20210826221211226"></p><p>创建新的域林。在Active Directory域服务配置向导中，添加一个新的域林，输入域名“test.com”，一路点击下一步，安装，完成域林的配置。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221223940.png" alt="image-20210826221223940"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221229812.png" alt="image-20210826221229812"></p><p>关闭防火墙、配置节点加入、登录用户并测试各节点域名连通性。为了实现多个节点之间的网络连通，需要关闭防火墙。并在node1和node2上，更改计算机设置，选择加入域test.com，输入域账号密码，加入test.com域。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221241630.png" alt="image-20210826221241630"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221247418.png" alt="image-20210826221247418"></p><p>加入域后，需要重启服务器，重启后，注意登录时不能直接登录原有的本地账户，需要登录域账户。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221301333.png" alt="image-20210826221301333"></p><p>测试各个节点之间的连通性，由于已经加入了域，可以直接使用域名测试。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221313533.png" alt="image-20210826221313533"></p><h2 id="3搭建iSCI存储节点"><a href="#3搭建iSCI存储节点" class="headerlink" title="3搭建iSCI存储节点"></a>3搭建iSCI存储节点</h2><p>新建iSCI服务。在storage节点，新建服务器角色，勾选文件存储服务中的iSCI功能，并勾选故障转移群集。在storage上搭建iSCI服务，并提前准备故障转移群集。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221327191.png" alt="image-20210826221327191"></p><p>新建storage盘和仲裁盘。在iSCI中，新建一个虚拟磁盘，作为群集的主要工作盘，磁盘大小选择动态拓展。新建iSCI目标，在“添加发起程序 ID”中，选择查询程序计算机ID，将node1和node2都添加进来，创建虚拟磁盘。创建之后，同样的步骤，再创建一个容量较小的磁盘，用作仲裁盘。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221338369.png" alt="image-20210826221338369"></p><p>连接iSCI初始化磁盘并修改逻辑单元号。选择任意一个节点，打开iSCI发起程序，开启服务后，输入storage.test.com进行查找，连接到iSCI目标后，打开磁盘管理，将新增的磁盘联机后，初始化磁盘，初始化时，磁盘大小小于2T选择MBR，大于2T选择GPT的方式，初始化磁盘后，将两个磁盘新建为简单卷，然后断开连接。去往另一个节点，开启iSCI服务。由于存储盘先于仲裁盘创建，顾存储盘的单元号要小，因为云计算中，默认使用单元号较小的盘作为仲裁盘，所以需要将存储盘和仲裁盘的单元号换过来。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221351325.png" alt="image-20210826221351325"></p><p>打开iSCI目标，点击属性，查看连接的会话，node1和node2都连接正常。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221405208.png" alt="image-20210826221405208"></p><h2 id="4搭建群集"><a href="#4搭建群集" class="headerlink" title="4搭建群集"></a>4搭建群集</h2><p>开启群集功能。在node1和node2中，新建服务器角色，开启hyper-V虚拟化和故障转移群集，注意开启网卡和勾选“允许此服务器发送和接收虚拟机的实时迁移”，将两个服务器设置为群集服务器。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221416937.png" alt="image-20210826221416937"></p><p>安装好后重启，验证配置，注意验证配置前需要登录test\administrator账户，并开启iSCI程序。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221426881.png" alt="image-20210826221426881"></p><p>搭建群集。两个节点都验证成功后，新建群集，注意配置群集地址为192.168.68.40。创建群集后，将另一个节点也加入群集。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221439076.png" alt="image-20210826221439076"></p><p>另一个节点加入群集：</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221449844.png" alt="image-20210826221449844"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221455343.png" alt="image-20210826221455343"></p><p>添加群集共享卷。正常情况下，群集的磁盘中应该会有之前设置的两个虚拟磁盘，并且已经自动分配好了仲裁盘。如果未自动分配，可以右键群集，新建仲裁盘。如果没有磁盘，可以在磁盘中添加新的磁盘。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221506815.png" alt="image-20210826221506815"></p><p>新建centos7虚拟机。部署好磁盘后，此时此刻，node1和node2两个节点中的群集的文件夹会自动同步，将centos7安装在这个文件夹中，便可以实现故障迁移，点击新建虚拟机，任选一个节点（需要事先准备好centos7的安装镜像），新建一个虚拟机，虚拟机位置一定要选择群集的文件夹（创建的存储盘）。给虚拟机分配内存、磁盘，勾选网卡，选择操作系统镜像，安装。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221519013.png" alt="image-20210826221519013"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221524234.png" alt="image-20210826221524234"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221529657.png" alt="image-20210826221529657"></p><h2 id="5在centos7系统中部署web服务"><a href="#5在centos7系统中部署web服务" class="headerlink" title="5在centos7系统中部署web服务"></a>5在centos7系统中部署web服务</h2><p>查询ip地址。正确安装centos系统后，启动并正确连接，登录后，输入ip addr查询当前VMware分配的ip地址（192.168.68.136）。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221541861.png" alt="image-20210826221541861"></p><p>使用docker部署web服务。在主机中打开MobaXterm，连接centos7系统。安装docker引擎。并配置相关的docker服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221554350.png" alt="image-20210826221554350"></p><p>搭建games：上传并解压games文件夹</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221610065.png" alt="image-20210826221610065"></p><p>端口映射：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@promote web]# docker run -d -p 8080:80 -v /root/web/:/usr/share/nginx/html/     nginx</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221629569.png" alt="image-20210826221629569"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221634645.png" alt="image-20210826221634645"></p><p>浏览器输入地址：192.168.68.136:8080/games，即可访问web服务。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221646097.png" alt="image-20210826221646097"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221656142.png" alt="image-20210826221656142"></p><h2 id="6验证群集故障迁移"><a href="#6验证群集故障迁移" class="headerlink" title="6验证群集故障迁移"></a>6验证群集故障迁移</h2><p>由于web页面服务体现不出群集性能，下面采用ping的方式测试集群迁移时的网络情况，服务从node1实时迁移至node2：</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221709155.png" alt="image-20210826221709155"></p><p>快速迁移时的网络状态：</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221721238.png" alt="image-20210826221721238"></p><p>快速迁移时，centos角色先在原本的节点上保存，然后再在迁移节点中启动。而实时迁移则是直接迁移服务，实时迁移服务，两者对业务的影响都差不多。</p><p>node2节点关机：测试node2节点关机时，服务中断情况，从ip请求可以看出，node2节点主动重启时，对服务影响不大，重启成功后，node2节点自动加入群集，并且网页也能正常访问。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221738342.png" alt="image-20210826221738342"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221744983.png" alt="image-20210826221744983"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221750979.png" alt="image-20210826221750979"></p><p>当强行关掉node1。强行关掉node1后，发现服务中断，并且中断了很长的一段时间，且未恢复。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221801338.png" alt="image-20210826221801338"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221813590.png" alt="image-20210826221813590"></p><p>经过测试，发现是由于centos7系统ip地址变化，由于ip地址使用的是dhcp，导致centos在node1被关掉后重启的途中，ip发生了变化，原本的服务受到了影响，无法ping通。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221825487.png" alt="image-20210826221825487"></p><p>解决：可以通过修改centos的配置文件，将ip地址设置为静态的、固定的，避免ip变动。也可以通过设置域名来避免ip变动。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221838081.png" alt="image-20210826221838081"></p><p>继续测试。开启节点1后，再次测试强制关闭节点2</p><p>此时：centos在node2上正常运行。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221850764.png" alt="image-20210826221850764"></p><p>强行关掉node2后，centos服务自动转移到了node1，此时centos系统由于node2是被动关闭的，需要重启，重启过程中，centos服务受到了一定影响，但是影响不大，这段时间的丢包，主要是重启系统造成的。系统重启后，服务继续运行。</p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221902236.png" alt="image-20210826221902236"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221906813.png" alt="image-20210826221906813"></p><p><img src="/2021/08/26/windowsServerHyperV/image-20210826221912295.png" alt="image-20210826221912295"></p><h2 id="7问题及总结"><a href="#7问题及总结" class="headerlink" title="7问题及总结"></a>7问题及总结</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1.创建iSCI虚拟磁盘时，找不到计算机节点。原因：未开启域网络，几个节点之间未形成一个域，所以无法发现。</p><p>2.在开启hyper V功能时，无法进行下一步，提示错误。解决：原语是因为windows系统虚拟化技术与VMware之间的冲突，需要修改配置文件，才能实现强制开启。</p><p>3.强制关闭节点，导致群集磁盘错误。解决：主要原因是节点连接iSCI虚拟磁盘初始化之后，并未断开连接，以至于建立群集时，磁盘来源是通过单一节点获得的，当该节点关闭时，群集的磁盘就坏了（或另一个节点的iSCI服务未开启）。</p><p>4.群集创建错误，新建第二个群集错误。解决：由于之前的一些失误，导致群集未正常工作，当在storage的AD管理中删除群集后，仍旧不能新建群集，查阅得知，还需要清理旧的群集数据，在node上运行命令：Clear-ClusterNode。</p><p>5.iSCI连接不正常。实验发现，storage中的iSCI属性中的连接显示异常，未能及时更新节点状态，需要手动关闭再打开，才能看到最新的状态。因为这个更新不及时，导致连接磁盘反复做了好多次。</p><p>6.centos的ip地址变化，导致服务“不能用”，在实验过程中，centos的ip地址曾经由于dhcp而发生变化，导致服务一直中断连接不上，经过排查后，才发现是ip的问题，修改ip设置解决。</p><h3 id="2总结"><a href="#2总结" class="headerlink" title="2总结"></a>2总结</h3><p>在这次课程设计中，学到了很多东西，也发现了自己的很多不足，学习知识的过程必然伴随着痛苦，但是也伴随着掌握知识的喜悦。</p><p>首先是过于依赖教程。平时的各种实验，都过于依赖于老师给予的教程文档，而忽视了最本质的东西。像这次实验为例，一上手就按着教程做，做到一半，却发现怎么做也做不下去了，然后各种查资料，却无法解决，在老师讲解后，才恍然大悟，一开始的方向就是错误的，后面又怎么可能对，同时，这件事也告诉了我们，凡事得从大处着眼，在没理清楚整体结构的情况下就开工，必然事倍功半，没有目的的前行，不如停下来想一想该怎么走。</p><p>其次是对一些基础的把握不牢，实验中有一个事我印象挺深，在搭建centos的web服务的过程中，我采用的是docker，在配置docker的daemon.json文件时，将一个单词给敲错了，导致docker运行失败，反复卸载安装了好几次，都没解决，最后检查的时候，才发现是单词写错了。还有就是文档阅读能力，其实许多问题在开发手册或者相应论坛中都有介绍，只是没找到罢了。</p><p>最后就是要善于请教。事实上，我们现阶段学习过程中所遇到的问题，大部分情况下别人都遇到过，伙伴之间应该多交流沟通合作，这能很大程度上提高工作效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;本项目截止日期：2021年6月24日&lt;/p&gt;
&lt;p&gt;本项目为之前的学习实践内容整理，记录学习过程，仅供参考、学习。&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="群集" scheme="http://stary2020.gitee.io/tags/%E7%BE%A4%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>docker实现企业服务负载均衡架构</title>
    <link href="http://stary2020.gitee.io/2021/08/26/dockerOfDeploy/"/>
    <id>http://stary2020.gitee.io/2021/08/26/dockerOfDeploy/</id>
    <published>2021-08-26T05:31:04.000Z</published>
    <updated>2021-08-26T10:42:28.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>本项目截止日期：2021年5月31日</p><p>本项目为之前的学习实践内容整理，记录学习过程以及企业级生产环境的搭建，仅供参考、学习。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>现在企业服务的架构都会进⾏解耦设计，也就是会将各种能分离的服务，全部进⾏分离，⽽容器⼜是推崇⽆状态化的服务，也就是容器中不保存任何会变化的数据，凡是需要变化的，都会保存到数据卷中。</p><p>本次实验所有的业务都是运⾏在容器环境中。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>windows 10</p><p>VMware15.5</p><p>centos 7</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/2021/08/26/dockerOfDeploy/image-20210826184047455.png" alt="image-20210826184047455"></p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="1docker-ce安装"><a href="#1docker-ce安装" class="headerlink" title="1docker-ce安装"></a>1docker-ce安装</h2><p>删除旧的docker组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180540434.png" alt="image-20210826180540434"></p><p>安装相关工具:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180604175.png" alt="image-20210826180604175"></p><p>下载华为云docker-ce:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/docker-ce.repo https://repo.huaweicloud.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180721597.png" alt="image-20210826180721597"></p><p>修改文件配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &#x27;s+download.docker.com+repo.huaweicloud.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>生成缓存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180755705.png" alt="image-20210826180755705"></p><p>安装docker-ce：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y docker-ce</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180815615.png" alt="image-20210826180815615"></p><p>启动docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo docker version</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180838831.png" alt="image-20210826180838831"></p><h2 id="2-nginx实现负载均衡："><a href="#2-nginx实现负载均衡：" class="headerlink" title="2 nginx实现负载均衡："></a>2 nginx实现负载均衡：</h2><p>复制nginx容器的配置文件并检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /root/data/nginx:/data --rm nginx \ </span><br><span class="line">cp /etc/nginx/conf.d/default.conf /data</span><br></pre></td></tr></table></figure><p>检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /root/data/nginx/</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180921779.png" alt="image-20210826180921779"></p><p>安装vim并修改配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim &amp;&amp; vim /root/data/nginx/default.conf</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826180939086.png" alt="image-20210826180939086"></p><p>创建web1容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \ </span><br><span class="line">-v /root/data/html:/var/www/html \ </span><br><span class="line">--rm --name web1 php:5.6-apache</span><br></pre></td></tr></table></figure><p>创建web2容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \ </span><br><span class="line">-v /root/data/html:/var/www/html \ </span><br><span class="line">--rm --name web2 php:5.6-apache</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181013024.png" alt="image-20210826181013024"></p><p>在、root/data/html中创建php探针文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/data/html</span><br><span class="line">vim info.php</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181033716.png" alt="image-20210826181033716"></p><p>创建nginx容器，并读取配置文件在/root/data/nginx中，连接两个web容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name lb -p 80:80 -v /root/data/nginx:/etc/nginx/conf.d --link web1:web1 --link web2:web2 nginx</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181053339.png" alt="image-20210826181053339"></p><p>打开浏览器，多次访问探针页面，观察主机名，测试是不同的web容器在提供服务。</p><p>证实nginx实现了负载均衡</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181110283.png" alt="image-20210826181110283"></p><h2 id="3-web服务容器："><a href="#3-web服务容器：" class="headerlink" title="3 web服务容器："></a>3 web服务容器：</h2><p>删除所有容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &#x27;docker ps -qa&#x27;</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181136319.png" alt="image-20210826181136319"></p><p>编写Dockerfile:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181147949.png" alt="image-20210826181147949"></p><p>构建新php镜像myphp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myphp .</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181213578.png" alt="image-20210826181213578"></p><p>docker images</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181223482.png" alt="image-20210826181223482"></p><p>在web服务器中添加memcache</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v /root/data/phpini:/data myphp cp -r /usr/local/etc/php/. /data</span><br><span class="line">ls -lh /root/data/phpini</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181241897.png" alt="image-20210826181241897"></p><p>修改php.ini 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.save_handler=Memcached</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181254697.png" alt="image-20210826181254697"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.save_path=&quot;tcp://session:11211&quot;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181317569.png" alt="image-20210826181317569"></p><p>修改完毕，启动web容器，查看组件是否安装齐全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 81:80 \</span><br><span class="line"></span><br><span class="line"> -v /root/data/html:/var/www/html \</span><br><span class="line"></span><br><span class="line">-v /root/data/phpini:/usr/local/etc/php --rm --name web1 myphp</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181335935.png" alt="image-20210826181335935"></p><p>网页登录检查：</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181347535.png" alt="image-20210826181347535"></p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181352891.png" alt="image-20210826181352891"></p><h2 id="4-数据库容器："><a href="#4-数据库容器：" class="headerlink" title="4 数据库容器："></a>4 数据库容器：</h2><p>删除所有容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f `docker ps -qa`</span><br><span class="line"></span><br><span class="line">docker run --name db --rm \</span><br><span class="line"></span><br><span class="line"> -v /root/data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mariadb:5.5.64</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181425408.png" alt="image-20210826181425408"></p><p>加入探针测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /root/data/html/tz.php http://mirrors.eagleslab.com:8889/tz.php</span><br></pre></td></tr></table></figure><p>开启容器，访问探针，测试数据库连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link db:db -p 81:80 \</span><br><span class="line"></span><br><span class="line"> -v /root/data/html:/var/www/html \</span><br><span class="line"></span><br><span class="line"> -v /root/data/phpini:/usr/local/etc/php --restart=always --name web1 myphp</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181448602.png" alt="image-20210826181448602"></p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181454011.png" alt="image-20210826181454011"></p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181459836.png" alt="image-20210826181459836"></p><h2 id="5-搭建网站："><a href="#5-搭建网站：" class="headerlink" title="5 搭建网站："></a>5 搭建网站：</h2><p>删除所有容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f `docker ps -qa`</span><br><span class="line"></span><br><span class="line">session缓存容器</span><br><span class="line"></span><br><span class="line">docker run -d --restart=always --name session memcached</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181518766.png" alt="image-20210826181518766"></p><p>启动mariadb数据库容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name db --restart=always \</span><br><span class="line"></span><br><span class="line"> -v /root/data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mariadb:5.5.64</span><br></pre></td></tr></table></figure><p>启动web1服务容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link db:db --link session:session \</span><br><span class="line"></span><br><span class="line"> -v /root/data/html:/var/www/html \</span><br><span class="line"></span><br><span class="line"> -v /root/data/phpini:/usr/local/etc/php --restart=always --name web1 myphp</span><br></pre></td></tr></table></figure><p>启动web2服务容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link db:db --link session:session \</span><br><span class="line"></span><br><span class="line"> -v /root/data/html:/var/www/html \</span><br><span class="line"></span><br><span class="line"> -v /root/data/phpini:/usr/local/etc/php --restart=always --name web2 myphp</span><br></pre></td></tr></table></figure><p>启动nginx容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name lb -p 80:80 -v /root/data/nginx:/etc/nginx/conf.d --link web1:web1 --link web2:web2 nginx</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181557129.png" alt="image-20210826181557129"></p><h2 id="6-部署网站："><a href="#6-部署网站：" class="headerlink" title="6 部署网站："></a>6 部署网站：</h2><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it db mysql -uroot -p123456 -e &quot;create database typecho;show databases;&quot;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181616879.png" alt="image-20210826181616879"></p><p>下载原码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd data/html/</span><br><span class="line"></span><br><span class="line">curl -O http://mirrors.eagleslab.com:8889/typecho.zip</span><br><span class="line"></span><br><span class="line">yum -y install unzip &amp;&amp; unzip typecho.zip</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181631012.png" alt="image-20210826181631012"></p><p>访问网站：</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181640357.png" alt="image-20210826181640357"></p><p>手动创建config.inc.php文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /root/data/html/config.inc.php</span><br></pre></td></tr></table></figure><p>粘贴代码</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181656136.png" alt="image-20210826181656136"></p><p>刷新 安装成功</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181708619.png" alt="image-20210826181708619"></p><p>查看1的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f web1</span><br></pre></td></tr></table></figure><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181742896.png" alt="image-20210826181742896"></p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181752201.png" alt="image-20210826181752201"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.通过Dockerfile创建myphp镜像失败，原因：把zlib1g-dev中的1给输入成了l。</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181804689.png" alt="image-20210826181804689"></p><p>其次是报错：无法创建文件，文件已存在，解决：删除创建文件这条命令。</p><p><img src="/2021/08/26/dockerOfDeploy/image-20210826181814873.png" alt="image-20210826181814873"></p><p>2.数据库连接异常，解决：将数据库地址由localhost修改为db。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;本项目截止日期：2021年5月31日&lt;/p&gt;
&lt;p&gt;本项目为之前的学习实践内容整理，记录学习过程以及企业级生产环境的搭建，仅供参考、</summary>
      
    
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="实践" scheme="http://stary2020.gitee.io/tags/%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="docker" scheme="http://stary2020.gitee.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>感知与控制（快递柜）</title>
    <link href="http://stary2020.gitee.io/2021/08/26/PerceptionAndControl/"/>
    <id>http://stary2020.gitee.io/2021/08/26/PerceptionAndControl/</id>
    <published>2021-08-26T05:29:47.000Z</published>
    <updated>2021-08-26T14:40:33.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>本项目截止日期：2020年7月12日</p><p>本项目为之前的学习实践内容整理，记录学习过程，仅供参考、学习。</p><p>备注：本项目由三人小组共同完成。</p><p>项目仓库：</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>windows 10</p><p>eclipse</p><p>串口通信助手</p><p>快递柜仿真软件</p><p>虚拟串口助手</p><p>jdk1.8</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>(1)理解快递柜控制板仿真软件的通信协议，并设计实现，进而实现与快递柜控制板仿真软件的通信(对于控制命令要考虑可靠传输)。</p><p>(2)实现对快递柜控制板状态数据的采集与显示，包括当前温度、控制温度、控制状态、10个抽屉的开关状态。</p><p>(3)实现对开关指定抽屉、启停温度控制(压缩机制冷控制)、设置控制温度、以及设置系统参数等设置操作。</p><p>(4)依据控制温度和压缩机的启停控制，实现对快递柜控制板温度的控制，控制精度为1度。</p><p>(5)以曲线方式显示1小时内的当前温度和设定温度的变化趋势。</p><h2 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h2><h3 id="编程语言与平台"><a href="#编程语言与平台" class="headerlink" title="编程语言与平台"></a>编程语言与平台</h3><p>语言: Java语言，java是一 种面向对象的高级语言，自问世以来，因其简单性、</p><p>面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性</p><p>等特点广受编程人员喜爱，eclipse则是一款官方推出的IDE。因为java的简单性和丰富的类库，所以选择java作为编程语言。通过导入RXTEcomm.jar类库来重写串口，设置相关功能函数。使用Bottom、JTextField 、Jlabel等组件来构建界面。</p><h3 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h3><p>（1）技术: RS232通信协议。RS-232是串行数据接口标准之一, 数据帧结构包括:信息头、帧长、帧号、设备地址、功能号、数据、校验、结束标志。具备传输距离短、速度较慢的特点，适合小型单片机开发，适合本项目使用。</p><p>波特率:这是一个衡量通信速度的参数，它表示每秒钟传送的bit的个数。本项目采用的波特率为38400。数据位:这是衡量通信中实际数据位的参数。本项目的数据位为8位。停止位:用于表示单个包的最后一位。本项目的停止位为1。奇偶校验位:在串口通信中一种简单的检错方式。有四种检错方式:偶、奇、高和低。本项目采用无校验。</p><p>（2）实现原理</p><p>采用RS232协议来进行串口通信，将快递柜和控制板的相关参数设置(串口号、波特率、数据位、校验位)好，建立快递柜和控制板的通信连接。将相关指令封装，把16进制的指令进行封装，避免输入过长的16进制指令，精简使用流程。采用图形界面进行操作，构建便捷的界面，将封装好的指令与按钮相关联，通过按钮发送相关指令。实现对快递柜的控制。</p><p>将整个项目划分为3个部分:由图像界面组成的操作界面，通信部分来实现具体通信功能。通信部分又分为数据接受和数据发送，串口之间进行通信时，将数据存储在一一个缓存区域内，若是发送指令，则将指令编码写入缓存区域，将缓存区域的数据通过串口发送给快递柜。从快递柜收到的消息也存储在缓存区域，然后将数据解析，从中找到需要的字段，再进行转换，输出到界面，实现实时显示快递柜信息的功能。</p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>如果接收端，收到一帧数据，经过CRC校验，数据正确，这时得传一帧简易的应答帧，以告诉主机，这个帧接收成功。如果接收端，收到一帧数据，经过CRC校验，发现数据有错，这时得传一帧简易的重传帧，以请求重传。</p><h4 id="数据帧分析"><a href="#数据帧分析" class="headerlink" title="数据帧分析"></a>数据帧分析</h4><p>数据帧格式</p><p><img src="/2021/08/26/PerceptionAndControl/clip_image002-1629988011617.jpg" alt="img"></p><p>帧号：取值范围1-255。</p><p>帧长：为每个物理帧的实际长度，取值为10-256。</p><p>设备地址：1字节，控制板地址为1-120。</p><h4 id="数据帧定义"><a href="#数据帧定义" class="headerlink" title="数据帧定义"></a>数据帧定义</h4><p>（1）查询帧</p><p>查询帧帧长10字节，帧号n，设备地址是控制板的地址1-120，功能号01，数据0B为NULL，每间隔5秒定期对每块控制板发送一次查询帧。</p><p>（2）启停压缩机控制帧</p><p>启停压缩机控制帧对压缩机进行启停控制，帧长11字节，帧号为n，功能号02，设备地址1-120，数据部分01代表压缩机启动，00代表压缩机停止。</p><p>（3）开锁帧</p><p>开锁帧负责对快递柜指定抽屉的开关控制，帧长12字节，帧号n，设备地址是1-120，功能号为03，数据部分为2字节，其中0th-11th,表示对应的锁的状态，1代表开，0代表关。首先，我们将某- -所需数据转换成2进制， 利用字符串的加操作完成对每一位的判断，之后会获得两个字符串， 对它们进行进制转换，将其转换成两位16进制数，我们就可以通过指定格式完成帧的组成。</p><p>（4）设置温度帧</p><p>设置温度帧对温度进行设置，帧长11字节，帧号n，设备地址是1-120，功能号为04，数据部分为设定的温度值，7th:0代表非负数，1代表负数，1th-6th表示温度整数部分0-63，0th表示温度小数部分，存在0.5，0，1代表0.5，0代表0。在文本框中输入设定温度后，获得一字符串，依次检测其符号和字符串长度，注意最后剩余整数部分要通过十进制转2进制完成并在前位补0凑齐六位，加之首尾各-位完成8位2进制， 通过进制转换得到16进制数。</p><p>（5）设置参数帧</p><p>参数帧负责控制板参数，帧长28字节，帧号n，设备地址是OX75，功能号为05，参数部分18字节，参数具体见下图。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826222757994.png" alt="image-20210826222757994"></p><p>（1）设置温度控制偏差帧</p><p>设置温度温度偏差帧帧长11字节，帧号n，设备地址是1-120，功能号为06，数据部分1字节，设定温度控制偏差，数据按终端控制板参数表中的格式定义参数。</p><p>（2）设置设备地址帧</p><p>设置设备地址帧帧长16字节，帧号n，设备地址是OX7F，功能号为09，数据部分6字节，5字节设备编码和1字节新地址。</p><p>（3）上传状态帧</p><p>上传状态帧帧长16字节，帧号n，设备地址是OX7F，功能号为10，数据部分6字节，数据部分34字节，参数是终端控制板的当前参数，18字节参数和16字节状态，控制板参数见图，控制板状态参数具体见下图。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826222836005.png" alt="image-20210826222836005"></p><p>（9）ACK帧</p><p>ACK帧帧长14字节，帧号n，设备地址是0，功能号应答的功能号，数据部分6字节，数据部分4字节，1字节设备地址，1字节命令帧号，2字节数据，数据用于执行开锁命令后表示相应锁是否打开，对应位1表示打开，否则打开失败。可靠传输采用重传机制，若在一定时间段内收不到相应功能号的ACK，则重新传送。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="信息采集"><a href="#信息采集" class="headerlink" title="信息采集"></a>信息采集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTemperature_gather</span><span class="params">()</span> </span>&#123;<span class="comment">/*采集温度*/</span></span><br><span class="line">    </span><br><span class="line">       String str=FormatConverter.byteToHexStr(temperature_gather);</span><br><span class="line">       <span class="keyword">int</span> i1= Integer.parseInt(String.valueOf(str.charAt(<span class="number">0</span>)),<span class="number">16</span>);</span><br><span class="line">       <span class="keyword">int</span> i2=Integer.parseInt(String.valueOf(str.charAt(<span class="number">1</span>)),<span class="number">16</span>);</span><br><span class="line">       <span class="keyword">int</span> ii1[];</span><br><span class="line">        ii1=<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">8</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">4</span>;n++)</span><br><span class="line">       &#123;</span><br><span class="line">       ii1[n]=i1%<span class="number">2</span>;</span><br><span class="line">           i1=i1/<span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">4</span>;n&lt;<span class="number">8</span>;n++)</span><br><span class="line">       &#123;</span><br><span class="line">       ii1[n]=i2%<span class="number">2</span>;</span><br><span class="line">           i2=i2/<span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">double</span> x=ii1[<span class="number">5</span>]*<span class="number">1</span>+ii1[<span class="number">6</span>]*<span class="number">2</span>+ii1[<span class="number">7</span>]*<span class="number">4</span>+ii1[<span class="number">0</span>]*<span class="number">8</span>+ii1[<span class="number">1</span>]*<span class="number">16</span>+ii1[<span class="number">2</span>]*<span class="number">32</span>;</span><br><span class="line">       <span class="keyword">if</span>(ii1[<span class="number">4</span>]==<span class="number">1</span>)</span><br><span class="line">       x=x+<span class="number">0.5</span>;</span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">         <span class="keyword">if</span>(ii1[<span class="number">3</span>]==<span class="number">1</span>)</span><br><span class="line">        x=x*(-<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMachine_state</span><span class="params">()</span> </span>&#123;<span class="comment">/*机器状态*/</span></span><br><span class="line">    String str=FormatConverter.byteToHexStr(machine_state);</span><br><span class="line">     <span class="keyword">int</span> i=Integer.parseInt(str,<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="抽屉的控制"><a href="#抽屉的控制" class="headerlink" title="抽屉的控制"></a>抽屉的控制</h3><p>设置10个按钮分别控制10个抽屉，点击按钮改变对应的开关位，抽屉控制将需要控制的抽屉编号加入列表，传参到对应函数。函数经过提取，将列表中出现的抽屉对应位置1.以此类推转化为对应的二进制数字，再转化为十六进制，加入到对应命令帧的数据位，CRC填充完发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">button.setPreferredSize(<span class="keyword">new</span> Dimension(<span class="number">150</span>, <span class="number">40</span>));</span><br><span class="line">            add(button);</span><br><span class="line">            setVisible(<span class="keyword">true</span>);</span><br><span class="line">            button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                command=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(checkBox[i].isSelected()) &#123;</span><br><span class="line">                        checkBox1[i].setSelected(<span class="keyword">true</span>);</span><br><span class="line">                            command+=checkBox[i].getText();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String regEx=<span class="string">&quot;[^0-9]&quot;</span>;</span><br><span class="line">                    Pattern p = Pattern.compile(regEx);</span><br><span class="line">                    Matcher m = p.matcher(command);</span><br><span class="line">                    command=m.replaceAll(<span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">                    System.out.println(command);</span><br><span class="line">                    <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;command.length();i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> s=command.charAt(i);</span><br><span class="line">                        System.out.println(s);</span><br><span class="line">                        <span class="keyword">switch</span>(s)</span><br><span class="line">                        &#123;</span><br><span class="line">                           </span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:  <span class="keyword">if</span>((command.length()==<span class="number">1</span>)||command.charAt(i+<span class="number">1</span>)!=<span class="string">&#x27;0&#x27;</span>)sum+=<span class="number">256</span>;<span class="keyword">else</span> sum+=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:sum+=<span class="number">512</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:sum+=<span class="number">1024</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:sum+=<span class="number">2048</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:sum+=<span class="number">4096</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:sum+=<span class="number">8192</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:sum+=<span class="number">16384</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:sum+=<span class="number">32768</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:sum+=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启停温度控制"><a href="#启停温度控制" class="headerlink" title="启停温度控制"></a>启停温度控制</h3><p>启停压缩机根据之前的数据分析结果，利用数据位的00和01进行压缩机的控制。启动压缩机需要考虑和温度偏差范围的配合。高于则停止，低于则运行。只有启动了温度控制，才会对接收到的实时温度进行判断是否达标(设置温度+-偏差值)，进而发送控制帧控制压缩机的停止启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(button2.getText().equals(<span class="string">&quot;启动温度控制&quot;</span>))&#123;</span><br><span class="line">                        button2.setBackground(Color.CYAN);</span><br><span class="line">                        button2.setText(<span class="string">&quot;停止温度控制&quot;</span>);</span><br><span class="line">                        command=<span class="string">&quot;01&quot;</span>;</span><br><span class="line">                        createFrame(<span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        button2.setBackground(Color.RED);</span><br><span class="line">                        button2.setText(<span class="string">&quot;启动温度控制&quot;</span>);</span><br><span class="line">                        command=<span class="string">&quot;00&quot;</span>;</span><br><span class="line">                        createFrame(<span class="number">2</span>);<span class="comment">/*启停压缩机指令*/</span>&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置控制温度"><a href="#设置控制温度" class="headerlink" title="设置控制温度"></a>设置控制温度</h3><p>在Textbox组件输入温度，点击按钮，设定中当温度控制系统处于开启状态，若检测到温度低于设定，则停止压缩机，若检测到温度高于设定，则打开压缩机，但此时压缩机会有预启动状态，所以在其预启动与启动状态不发送打开压缩机命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                String Tem=textField.getText();</span><br><span class="line">                    dispose();</span><br><span class="line">                    <span class="keyword">float</span> tem=Float.parseFloat(Tem);</span><br><span class="line">                    <span class="keyword">int</span> t=(<span class="keyword">int</span>)tem;</span><br><span class="line">                    String s = Integer.toString(t);</span><br><span class="line">                    textField2.setText(s);</span><br><span class="line">                    <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">                    t=t*<span class="number">2</span>;</span><br><span class="line">                       <span class="keyword">if</span>(tem&lt;<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                    t=t*(-<span class="number">1</span>);</span><br><span class="line">                     t=t+<span class="number">128</span>;</span><br><span class="line">                     <span class="comment">//   t=t+1;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>((tem%<span class="number">1</span>)==<span class="number">0.5</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        </span><br><span class="line">                        t=t+<span class="number">1</span>;</span><br><span class="line">                        flag=<span class="keyword">true</span>;</span><br><span class="line">                        </span><br><span class="line">                    &#125;                       </span><br><span class="line">                    <span class="keyword">if</span>(t&lt;<span class="number">15</span>) &#123;</span><br><span class="line">                        command=<span class="string">&quot;0&quot;</span>+Integer.toHexString((<span class="keyword">int</span>)t);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        command=Integer.toHexString((<span class="keyword">int</span>)t);</span><br><span class="line">                    &#125;</span><br><span class="line">                    command=command.toUpperCase();</span><br><span class="line">                    System.out.println(tem);</span><br><span class="line">                    System.out.println(<span class="string">&quot;设置温度command= &quot;</span>+command); </span><br><span class="line">                    downQueue.add(<span class="keyword">new</span> SetTemperatureFrame(sequence++,deviceAddress,FormatConverter.hexStringToBytes(command)[<span class="number">0</span>]));<span class="comment">/*设置温度*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置系统参数"><a href="#设置系统参数" class="headerlink" title="设置系统参数"></a>设置系统参数</h3><p>参数控制包括温度，温度偏差，设备地址，压缩机预启动时间等处理方法类似。将输入的十进制数字转化为十六进制，加入到对应命令帧的数据位，CRC填充完发送。点击按钮弹出参数设置窗口， 允许不做任何输入或只设置部分参数，</p><p>不输入会默认发送上次设置的参数，如果是第一次则发送缺省值。对于组帧，要先得到文本框内字符串、先转2进制，再转16进制，组成相应帧即可。系统参数帧会有缺省情况，因此在文本框输入字符串中若为空，则使用相应缺省数据填充该位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">enter.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">                String[] str=<span class="keyword">new</span> String[<span class="number">6</span>];</span><br><span class="line">                command=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)<span class="comment">//设备编码</span></span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=textField[i].getText().length();j&lt;<span class="number">10</span>;j++)</span><br><span class="line"></span><br><span class="line">                command+=<span class="string">&quot;F&quot;</span>;</span><br><span class="line">                command+=textField[i].getText();</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">1</span>)<span class="comment">//设备地址</span></span><br><span class="line">                    command+=textField[i].getText();</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">2</span>)<span class="comment">//上传间隔</span></span><br><span class="line">                    &#123;</span><br><span class="line">                    command+=<span class="string">&quot;00&quot;</span>;<span class="comment">//备用空白帧</span></span><br><span class="line">                    command+=textField[i].getText();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">3</span>)<span class="comment">//启动时延</span></span><br><span class="line">                &#123;</span><br><span class="line">                    String tem=textField[i].getText();</span><br><span class="line">                    <span class="keyword">int</span> mn=Integer.parseInt(tem);</span><br><span class="line">                    String hexs=<span class="keyword">new</span> String();</span><br><span class="line">                    <span class="keyword">if</span>(mn&gt;<span class="number">15</span>)</span><br><span class="line">                    hexs =FormatConverter.intToHex(mn);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                     hexs=<span class="string">&quot;0&quot;</span>+FormatConverter.intToHex(mn);</span><br><span class="line">                    </span><br><span class="line">                command+=hexs;</span><br><span class="line">                command+=<span class="string">&quot;0000&quot;</span>;<span class="comment">//备用</span></span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">4</span>)<span class="comment">//设定温度</span></span><br><span class="line">                &#123;</span><br><span class="line">                    </span><br><span class="line">                    String Tem=textField[i].getText();</span><br><span class="line">                            dispose();</span><br><span class="line">                            String s=<span class="keyword">new</span> String();</span><br><span class="line">                            <span class="keyword">float</span> tem=Float.parseFloat(Tem);</span><br><span class="line">                            <span class="keyword">int</span> t=(<span class="keyword">int</span>)tem;</span><br><span class="line">                            <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">                            t=t*<span class="number">2</span>;</span><br><span class="line">                               <span class="keyword">if</span>(tem&lt;<span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                            t=t*(-<span class="number">1</span>);</span><br><span class="line">                             t=t+<span class="number">128</span>;</span><br><span class="line">                             <span class="comment">//   t=t+1;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            <span class="keyword">if</span>((tem%<span class="number">1</span>)==<span class="number">0.5</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                </span><br><span class="line">                                t=t+<span class="number">1</span>;</span><br><span class="line">                                flag=<span class="keyword">true</span>;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                                              </span><br><span class="line">                        </span><br><span class="line">                            <span class="keyword">if</span>(t&lt;<span class="number">15</span>) &#123;</span><br><span class="line">                                s=<span class="string">&quot;0&quot;</span>+Integer.toHexString((<span class="keyword">int</span>)t);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                s=Integer.toHexString((<span class="keyword">int</span>)t);</span><br><span class="line">                            &#125;</span><br><span class="line">                           s=s.toUpperCase();</span><br><span class="line">                    </span><br><span class="line">                command+=s;</span><br><span class="line">                </span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">5</span>)<span class="comment">//温度控制偏差</span></span><br><span class="line">                &#123;</span><br><span class="line">                command+=textField[i].getText();</span><br><span class="line">                command+=<span class="string">&quot;FFFFFFFF00&quot;</span>;</span><br><span class="line">                &#125;        </span><br><span class="line">                    </span><br><span class="line">                </span><br><span class="line">                <span class="comment">//command+=textField[i].getText();</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;设置参数command= &quot;</span>+command);   </span><br><span class="line">                 dispose();</span><br><span class="line">                 downQueue.add(<span class="keyword">new</span> SetParameterFrame(sequence++,deviceAddress,FormatConverter.hexStringToBytes(command)));<span class="comment">/*设置参数*/</span></span><br><span class="line">                   <span class="comment">//  createFrame(5);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="折线图的绘制"><a href="#折线图的绘制" class="headerlink" title="折线图的绘制"></a>折线图的绘制</h3><p>创建CategoryDataset对象（准备数据）。</p><p>根据Dataset 生成JFreeChart对象，以及做相应的设置。</p><p>根据CategoryDataset创建JFreeChart对象。</p><p>将仿真软件发送的数据放入内存，实现一个循环数组接受数据，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (values.size() &gt; MAX_COUNT_OF_VALUES) &#123;</span><br><span class="line">values.remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">g2d.drawLine(xDelta * (MAX_COUNT_OF_VALUES - length + i), normalizeValueForYAxis(values.get(i), h),</span><br><span class="line">xDelta * (MAX_COUNT_OF_VALUES - length + i + <span class="number">1</span>), normalizeValueForYAxis(values.get(i + <span class="number">1</span>), h));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><h3 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h3><p>1)、流布局：</p><p>　　FlowLayout 从左到右，自上而下方式在容器中排列，控件的大小不会随容器大小变化.</p><p>  容器.setLayout(new FlowLayout(FlowLayout.LEFT));</p><p>2)、网格布局：</p><p>　　GridLayout 按照指定行数与列数，将容器分成大小相等的单元格每个单元格放置一个控件. 不能将控件放在指定单元格</p><p>  容器.setLayout(new GridLayout(3,4,10,15));</p><p>3)、边界布局:</p><p>　　BorderLayout 将容器分成东、西、南、北、中五个部分</p><p>  容器.setLayout(new BorderLayout());</p><p>　　窗口的内容面板默认布局就是边界布局。</p><p>容器.add(控件,BorderLayout.NORTH);</p><h3 id="界面组件"><a href="#界面组件" class="headerlink" title="界面组件"></a>界面组件</h3><p>文本框：使用JComponent的子类JTextField创建文本框。文本框的允许用户输入单行文本。</p><p>文本区：使用JComponent的子类JButton类创建按钮，允许用户单击按钮。</p><p>标签：使用JComponent的子类JLabel类创建标签，标签为用户提供信息提示。</p><p>选择框：使用JComponent的子类JCheckBox类来创建选择框，为用户提供多项悬着。选择框提供两种状态，选中和未选中，用户通过单击该组件切换状态。</p><p>单选按钮:使用JComponent的子类的JRadioButton类创建单项选择框，为用户提供单项选择。</p><p>下拉列表:使用JComponent的子类的JComboBox类来创建下拉列表，为用户提供下拉列表。</p><h3 id="部分代码"><a href="#部分代码" class="headerlink" title="部分代码"></a>部分代码</h3><p>public class Win extends JFrame {}建立窗体类。</p><p>private JLabel[] label;声明标签组</p><p>public JCheckBox[] checkBox1;</p><p>建立三个 JTextField类型变量，textField1文本框显示当前温度，textField2文本框显示设置温度，textField3文本框显示压缩机状态。</p><p>Piblic Win{}来设置布局和边界布局new BorderLayout()，设置窗口的长宽高setBounds(100,50,800, 650)， 设置标题setTitle(“现场快递柜状态采集与控制系统”);</p><p>private class Top extends JPanel{}来设置顶部布局，建立三个标签，分别表示当前温度，设定温度，工作状态，再进行设置边界。</p><p> public class center extends JPanel {}来设置界面中的抽屉组，建立十个抽屉。规定他们的位置。</p><p>private class Bottom extends JPanel{}来设置界面底部的四个按钮以及功能的实现，就是课设要实现的四个功能，开关指定抽屉，启动温度控制，设置控制温度，设置系统参数。</p><p> button.addActionListener（new ActionListener()）来进行事件的监听，实现根据用户的操作来执行相应功能。</p><p>JFreeChart jfreechart = ChartFactory.createLineChart()来进行折线图标题，x轴，Y轴标签的显示。</p><p>使用CategoryPlot设置各种参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CategoryPlot plot = (CategoryPlot)jfreechart.getPlot();</span><br><span class="line">renderer.setBaseShapesVisible(true); // series 点（即数据点）可见  </span><br><span class="line">renderer.setBaseLinesVisible(true); // series 点（即数据点）间有连线可见  </span><br><span class="line">renderer.setUseSeriesOffset(true); // 设置偏移量  </span><br><span class="line">public void paintComponent(Graphics g) &#123;&#125;折线图的绘制。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>首先启动程序，可以看到虚拟串口软件中的com2已连接上，然后开启快递柜仿真程序，可以在虚拟串口软件中看到com1和com2都已连接，在eclipse控制台中也可以看到串口启动成功，接着在快递柜仿真软件数据包显示区和eclipse控制台也可以看到不断接受和发送数据帧，说明两者成功连接，可以通信，接着检验是否能正确通信和功能是否完全实现。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223310668.png" alt="image-20210826223310668"></p><p>首先测试打开关闭抽屉功能，在采集与控制程序中打开7号和8号抽屉，可以在快递柜程序中看见两个抽屉正确打开，再实验其他抽屉，所有抽屉都能准确打开和关闭，快递柜抽屉开关功能完全实现。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223321137.png" alt="image-20210826223321137"></p><p>信息采集与显示功能也正确实现，可以看到快递柜的当前温度和压缩机状态抽屉开关状态在采集与控制系统中都进行了正确显示，两者同步。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223333304.png" alt="image-20210826223333304"></p><p>接着来测试参数控制功能，我们可以观察到，启动程序后快递柜仿真程序系统参数部分已经显示了数据，这是在采集与控制系统中默认的数据，接下来我们进行修改，观察能否正确传给快递柜仿真程序，先在采集与控制系统中点击系统参数设置按钮，在弹出来的框中输入参数数据，包括设备ID，设备地址，采集时间间隔，压缩机启动延时，控制温度等，上传参数后可以观察到快递柜仿真软件参数部分发生了改变，与我们上传的参数相同，所以参数控制功能也正确实现。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223345387.png" alt="image-20210826223345387"></p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223350784.png" alt="image-20210826223350784"></p><p>然后进行温度控制功能测试，首先我们在采集与控制系统中设置控制温度为15度，然后上传，可以看到信息进行更新，控制温度由原先默认的20度变为了15度，然后可以观察到快递柜仿真软件当前温度为20.5度，压缩机进行启动，温度在下降，因为参数中温度偏差设置为3度，所以在温度下降到12度时，压缩机停止工作，温度上升，上升到18度时，压缩机开始工作，可以看到温度在控制温度周围上下拨动，温度控制功能实现。</p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223403439.png" alt="image-20210826223403439"></p><p><img src="/2021/08/26/PerceptionAndControl/image-20210826223409272.png" alt="image-20210826223409272"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次课程设计主题是感知与控制，要求掌握基于RS232的协议设计与通信方法，在此基础上实现对现场设备状态数据的采集、对设备的控制。老师给出的题目是针对快递柜系统设计实现一个对现场快递柜状态数据采集、显示、参数设置、抽屉打开、保鲜控制等功能软件系统。</p><p>我们小组有三位成员，首先对题目进行了讨论，制定了初步课设计划，对每个人的任务进行大致分工，主要是通信实现，界面设计，数据帧分析，可靠传输的保证，ppt答辩等方面。我们共同完成了数据帧分析，然后各自负责实现某些功能，例如抽屉开关、温度控制、参数控制等，最后由组长进行整合，完成整个代码的实现。我们小组使用的语言是Java语言，可以调用类库来进行编程，减少了我们的工作量，利用的平台是eclipse，我们基本实现了通过控制面板对快递柜操作的控制，将指令封装后，通过点击按钮实现指令的发送，包括了相应的抽屉的开关、温度控制、温度设置等功能。但是还有许多不足之处，由于时间紧任务重，我们小组成员的编程能力和学习能力有限，界面有待优化，在温度曲线的输出功能方面没有完全实现，在实时上传数据并绘制成图没有成功，只做出了一个模拟图来进行输出，程序还有待完善，在课设结束后，我们还会继续讨论学习，争取实现其功能，还存在一些小细节问题有待处理，存在一些bug，例如有时候数据帧丢失，无法发送成功，还需要进一步去改进程序。</p><p>  从本次课程设计中，我们小组学习了基于RS232的协议设计与通信方法，了解了现场网感知与控制的基本方法，锻炼了自己的思考能力和编程能力，之前也没接触过这些知识，我们都很陌生，在十天的学习里，我们一边百度自学以及向老师同学请教，一边积极讨论，各抒己见，很大方面提高了自己的学习能力和团队协助能力，为日后学习和工作积累了项目经验。从本次课设中，我们也深刻体会到了自己编程能力还是很弱，刚开始一头雾水，先采用c++来写程序，但是遇到了很多问题，首先就是我们没用过MFC，在学习过程中也感觉很难，甚至通信有的时候都不能成功，压力很大。经过我们后来的讨论研究后组长决定使用Java语言，因为他比较擅长Java，而且在大二学年我们刚学Java，并且使用Java语言做过项目，对Java界面设计，类库调用还是比较熟悉，确定方向后我们开始奋力苦干，小组成员每天汇报进程，以及讨论所遇到的问题，积极想办法去解决，功夫不负有心人，我们最后程序大致完成了，虽然还有很多改善的地方，但是还是做出了一个成果。经过这次课设，我们感受到了编程的有趣，利用所学的知识进行编程去实际解决问题，感觉很美妙，很快乐。</p><p> 虽然课程设计结束了，但是学习不能结束，我们从本次课设中学习到了很多，这次课设也给了我们三个人一个警醒，让我们清醒了一下，明白了自己的水平在哪里，知道了自己和专业佼佼者的差距，在观看答辩过程中也见到了很多大佬的程序，五花八门，大开眼界，别人不仅完成课设还进行创新实践，成果非常棒，对比之下，我们感到很大压力，毕竟我们已经大二结束了，不考研的话，马上要找工作实习了，编程能力还急需提高，课设结束后就是暑假，经过这次对我们来说磕磕绊绊困难重重的课设，相信我们在暑假里也不敢放纵自我，每天沉浸于王者峡谷，在之后的日子里我们定当沉下心来，踏踏实实学习，多思考，多研究，提升自己的水平，不浪费自己的宝贵时间，成为一个优秀的大学生。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;本项目截止日期：2020年7月12日&lt;/p&gt;
&lt;p&gt;本项目为之前的学习实践内容整理，记录学习过程，仅供参考、学习。&lt;/p&gt;
&lt;p&gt;备</summary>
      
    
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="项目" scheme="http://stary2020.gitee.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>远程数据采集控制（android）</title>
    <link href="http://stary2020.gitee.io/2021/08/26/androidAndIoT/"/>
    <id>http://stary2020.gitee.io/2021/08/26/androidAndIoT/</id>
    <published>2021-08-26T05:28:03.000Z</published>
    <updated>2021-08-26T09:57:33.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>本项目截止日期：2020年11月14日</p><p>项目仓库：<a href="https://github.com/stary1999/schoolStudy/tree/main/android">https://github.com/stary1999/schoolStudy/tree/main/android</a></p><p>本项目为之前的项目整理，技术实现比较老旧，仅供参考、学习。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本次案例实践的主题是进行移动物联网的应用开发，通过编写一个Android手机移动端app和微信小程序，实现对物联网设备的远程控制与感知。具体实现过程为开发移动端app，连接到阿里云的物联网平台，将这个平台作为一个中转的服务器，设备接入这个服务器，移动端应用和物联网设备通过这个平台进行连接，实现数据的远程收发，达到控制的效果。考虑到物联网设备的缺乏，本次实践主要采用虚拟平台进行设备模拟，达到实验效果。</p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>本此移动开发，其目的是实现一个远程控制物联网设备的“系统”，通常，这个“系统”也被称为智能家居，正如实践里做的那样，我们可以通过移动应用远程了解卧室的温湿度情况，也可以远程控制卧室台灯的开关，而这一切并不需要我们“在卧室”这一前提，突破了传统意义上的距离限制，或者说，网络就是他的距离限制。</p><p>在这个体系架构里，开发是围绕以住宅为平台，以远程控制为核心思想，在保持传统的居住功能的基础上，摆脱了被动模式。通过网络实现人与设备的远程互联与控制，智能家居不仅提供了全方位的信息交换功能，还优化了人们的生活方式和居住环境，帮助人们有效地安排时间、节约各种能源，实现了家电控制、照明控制、室内外遥控、窗帘智控、防盗报警、定时控制以及手机APP远程控制等功能。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>随着科学水平的不断发展与社会的进步，人们对未来的美好的生活已经不仅仅只满足于传统意义上的遮风避雨了，生活在信息如此发达的年代的人们，对此有着更高一层的诉求。随着互联网和手机的不断普及，极大地加快了人们对于这个世界的认知方式，而绵延了数千年的传统居家模式，却在时代的浪潮里显得是如此的无人问津，但在今天，我们却又不仅仅满足于此，随着知识的积累与科技的进步，我们渐渐希望“家”可以实现更多的功能，给我们带来更好的生活体验。如今，这份希望被变现，我们的家在逐步向着一个更加美好、更加符合我们习惯、诉求的方向发展，这便是智能家居，通过传感器等硬件设备，我们让“家”具备了“说话”的能力，家里的东西，可以通过传感器等设备表达出自身的状态，让我们更加地了解我们的家，同时，无处不在的互联网让我们即使远在他处，也能“倾听”家里的声音。</p><h3 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h3><p>现代的智能家居，一方面，这是我们对于“家”这一特殊事物的特殊感情，但另一方面，家居的智能化，也在方方面面影响着我们的生活，最显著的例子，就是他能让我们的生活更有效率，如果有什么东西是比一天劳累后的一个热水澡更加让人舒心的话，相比便是这热水澡不用花额外的电费——他会在你需要的时候启动热水器。智能家居能帮助我们有效地安排时间、节约各种能源，最为典型的例子，便是让一些电器在不该开的时候关掉，在需要开的时候即使人不在家也能打开。我们到家后，无需多余的等待时间，便可直接开始做我们需要做的事，这无疑是十分舒心的。同时，远程控制的一大意义还体现在监查家里的情况上面，相较于传统的室内监控，智能家居能让我们更方便快捷地实时掌握家里的情况，这对于防盗以及防止熊孩子方面有着巨大的作用。</p><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><p>用户注册功能：和传统app一样，为了确保信息的安全，必须对用户的身份进行确认，识别非法用户，并禁止非法用户进入控制界面，避免造成损失。</p><p>开关灯功能：基础功能，实现远程控制台灯的亮灭，属于感知与控制的控制一环。</p><p>温湿度读取功能：基础功能，实现将传感器采集到的温度显示给用户，作为感知与控制里的感知，这使得用户对家里的状态有一个实时的了解与认识，方面用户制定下一步计划和方案。</p><p>历史数据展示功能：通过对历史数据的展示，能让用户对于所采集的温湿度有有一个具体的认识，方面分析趋势与采取后续行为。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>物联网云平台是为物联网定制的云平台，在物联网解决方案中，<a href="http://www.inodes.cn/device-cloud.html">物联网云平台</a>有着举足轻重的作用。作为现代物联网系统的核心，物联网云平台向下连接海量设备，为设备提供安全可靠的连接通信能力，支撑设备数据采集上云；向上提供云端API，通过调用云端API将与应用端进行交互，实现远程控制。</p><h2 id="接入前准备："><a href="#接入前准备：" class="headerlink" title="接入前准备："></a>接入前准备：</h2><p>1、产品与设备：云上定义的产品相当于一类设备的集合，同一产品下的设备具有相同的功能，比如可以根据产品批量管理设备。云上定义的设备对应于一个个实际的物联网设备，只要将物联网云颁发的设备证书(Productkey、DeviceName和DeviceSecret)关联到实际设备上，可实现实际设备接入物联网云平台。</p><p><img src="/2021/08/26/androidAndIoT/image-20210826172453894.png" alt="image-20210826172453894"></p><p>2、设备功能：包括设备的属性，服务和事件。物联网平台通过定义TSL(Thing Specification Language)来描述物模型，这里TSL采用JSON格式。</p><p>（1）属性：设备的功能模型之一，一般用于描述设备运行时的状态，如环境监测设备所读取的当前环境温度等。属性支持GET和SET的请求方式，应用系统可发起对属性的读取和设置请求。</p><p>​                <img src="/2021/08/26/androidAndIoT/image-20210826173056610.png" alt="image-20210826173056610"><br>（2）产品标识符：阿里云采用产品标识符来指向具体功能(属性)，这里产品标识符其实就是云上的变量声明。</p><p>（3）Topic</p><ul><li>物联网云采用发布订阅的方式，与实际设备之间进行数据交互；</li><li>Topic是UTF-8字符串，是发布(Pub)或订阅(Sub)消息的传输中介，设备可以向指定Topic发布或者订阅消息。</li></ul><p><img src="/2021/08/26/androidAndIoT/image-20210826173204084.png" alt="image-20210826173204084"></p><p>（4）设备证书（三元组）：设备证书指ProductKey、DeviceName、DeviceSecret。</p><ul><li><p>ProductKey：是物联网平台为产品颁发的全局唯一标识。该参数很重要，在设备认证以及通信中都会用到；</p></li><li><p>DeviceName：在注册设备时，自定义的或自动生成的设备名称，具备产品维度内的唯一性；</p></li><li><p>DeviceSecret：物联网平台为设备颁发的设备密钥，和DeviceName成对出现。</p></li></ul><p><img src="/2021/08/26/androidAndIoT/image-20210826173253525.png" alt="image-20210826173253525"></p><p>接入阿里云IoT物联网平台：</p><p>基于MQTT自主接入IoT。阿里云IoT物联网平台支持MQTT协议自主接入。</p><p>MQTT(消息队列遥测传输)是ISO 标准(ISO/IEC PRF 20922)下基于发布/订阅范式的消息协议。它工作在 TCP/IP协议族上，是为硬件性能低下的远程设备以及网络状况糟糕的情况下而设计的发布/订阅型消息协议，为此，它需要一个消息中间件。MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用</p><p>在接入阿里云的过程中，首先需要根据自身的地理位置，设置合适的连接域名，域名根据产品是在区域regionId不同而不同。具体规则为：${productKey}.iot-as-mqtt.${regionId}.aliyuncs.com:1883。</p><p>其次是MQTT的Connect报文。设备端与阿里云IoT平台建立MQTT通道的CONNECT报文有三个关键参数：客户端标识符 (ClientId) ，用户名（User Name），密码（Password）。这三个参数由设备三元组(productKey,deviceName,deviceSecret)按照阿里云IoT签名规则生成。</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173413340.png" alt="image-20210826173413340"></p><p>部分核心代码如图：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173447890.png" alt="image-20210826173447890"><br> 计算MQTT连接参数clientId、username和password，并将username和password设置到MqttConnectOptions对象中。</p><p>接入物联网平台</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173509353.png" alt="image-20210826173509353"></p><p>发布消息：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173524325.png" alt="image-20210826173524325"></p><p>订阅指定Topic</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173532310.png" alt="image-20210826173532310"></p><h2 id="虚拟平台相关操作"><a href="#虚拟平台相关操作" class="headerlink" title="虚拟平台相关操作"></a>虚拟平台相关操作</h2><p>1、虚拟环境：创建虚拟房间的场景，创建Arduino节点，将传感器元件连接到Arduino板上，再将传感器元件与智能场景中的设备相互关联，(即数字继电器模块控制台灯，温湿度传感器读取场景温度)。<br>设置环境：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173635534.png" alt="image-20210826173635534"></p><p>添加传感器</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173649066.png" alt="image-20210826173649066"></p><p>绑定设备：将传感器拖动到场景</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173706238.png" alt="image-20210826173706238"></p><p>2、虚拟环境：为虚拟房间的WiFi设备配置相关联网参数。</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173720991.png" alt="image-20210826173720991"></p><p>3、实际环境：创建阿里云上产品与设备，获得设备的三元组信息。</p><p>三元组查看：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173735641.png" alt="image-20210826173735641"></p><p>4、虚拟环境：在线填空式编程并允许，将虚拟环境中温湿度感知数据传到阿里云上；接收阿里云下发指令，对虚拟场景中的台灯进行开关控制。</p><p>在线编程：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173802304.png" alt="image-20210826173802304"></p><p><img src="/2021/08/26/androidAndIoT/image-20210826173809659.png" alt="image-20210826173809659"></p><p>选择开发板，编译上传：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173823612.png" alt="image-20210826173823612"></p><p>绑定设备，运行仿真环境：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173843939.png" alt="image-20210826173843939"></p><h2 id="阿里云平台调试相关操作操作："><a href="#阿里云平台调试相关操作操作：" class="headerlink" title="阿里云平台调试相关操作操作："></a>阿里云平台调试相关操作操作：</h2><p>查看设备状态：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173918294.png" alt="image-20210826173918294"></p><p>创建规则引擎：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173936075.png" alt="image-20210826173936075"></p><p>查看日志，分析运行情况</p><p><img src="/2021/08/26/androidAndIoT/image-20210826173948061.png" alt="image-20210826173948061"></p><h1 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h1><h2 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h2><p>界面设计主体采用3个xml文件，即三个布局。分别作为登录界面，控制界面，数据展示界面。</p><p>登录界面、控制界面和历史数据展示界面。</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174213658.png" alt="image-20210826174213658"></p><p><img src="/2021/08/26/androidAndIoT/image-20210826174218426.png" alt="image-20210826174218426"></p><p>登录界面：登录界面主要包含两个可编辑文本框和两个按钮，外加一个文本框和图片作为提示和装饰作用。用户在此界面进行操作时，输入账号密码后，点击登录，然后再user.db这个字段里查找相应的数据，若为未注册用户或者账号密码错误，则提示异常，并提示不能登录，若用户存在且账号密码正确，则正常登录。若用户点击注册按钮，则将文本编辑框里的账号密码读取写入数据库，完成并提示注册功能。</p><p>控制界面：控制界面主要提供了一系列按钮和用以提示的文本框，通过按钮点击，实现相关功能，通过文本框，输出相关提示信息。按钮开灯和关灯分别实现远程控制台灯的功能，数据查询按钮则展示最近一段时间从云端收到的温度和湿度信息，设备上线、设备下线按钮分别实现设备的上下线（连接、断开mqtt）。退出按钮则返回登录界面。</p><p>数据展示界面：数据展示界面主要包含一个listview组件和一个返回按钮，listview组件显示历史数据信息，返回按钮回到控制界面。</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据库设计主要有三个类实现，第一个类是封装用户信息User类，里面封装了用户id，number，password三个属性以及设置、获取相关属性的函数。DatabaseHelper类则是数据库的定义类，继承自SQlite，生成一个名为user，包含两个属性列：number和password的数据表，用来存储用户账号密码信息，第三部分UService则是用来调用的类，里面封装了两个方法：登录和注册，调用相关方法，能够实现对相应数据的查询以及插入，完成登录、注册功能。</p><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="注册登录："><a href="#注册登录：" class="headerlink" title="注册登录："></a>注册登录：</h3><p>注册和登录通过两个按钮实现，当点击相应按钮时，触发相应事件。当点击注册时，从界面的文本框里面获取账号密码字段，将字段设置为一个新的user数据后，插入数据库表，完成注册。当点击登录时，从文本框获取账号密码字段，将字段与数据库里的表进行对比，判断是否为合法用户，合法用户跳转至控制界面，非法用户输出提示信息，不跳转。</p><h3 id="设备上线："><a href="#设备上线：" class="headerlink" title="设备上线："></a>设备上线：</h3><p>设备上线功能主要是建立mqtt连接，通过预设定的三元组信息，通过算法计算出连接所需要的账号密码以及id等等，然后生成mqttClient对象，与阿里物联网云平台建立连接后，即实现了设备上线功能。同时重写一部分回调函数与设置函数，将整个连接进行封装处理。</p><h3 id="读取数据："><a href="#读取数据：" class="headerlink" title="读取数据："></a>读取数据：</h3><p>读取数据功能实现在mqtt连接之后，当连接成功后，调用相关函数，订阅对应的Topic主题，当订阅成功时，会从云端返回一个数据包，这个数据包里面包含有我们需要的数据，通过解析这个包，即可获得我们需要的数据，将这些数据输出到文本框后，便可以直观地向用户展示。</p><p>开关灯：开关灯是通过发送相应指令来实现的，对属性lightswitch而言，0对于关灯，1对应开灯。在判断mqtt处于连接状态后，即可通过此函数，实现数据发送功能：即将选择的指令与一些基本的信息封装成数据包，然后通过mqttClient.pulish发送出去。</p><p>数据查询与xml文件生成解析：</p><p>为了实现历史数据保存，在本案例里面采用了xml实现。通过将每一次收到的数据保存入xml文件，在需要查询时从xml文件读取数据，较好地实现了本功能。</p><h1 id="实现与测试"><a href="#实现与测试" class="headerlink" title="实现与测试"></a>实现与测试</h1><h2 id="Android测试"><a href="#Android测试" class="headerlink" title="Android测试"></a>Android测试</h2><h3 id="用户信息数据库管理实现"><a href="#用户信息数据库管理实现" class="headerlink" title="用户信息数据库管理实现"></a>用户信息数据库管理实现</h3><p>定义一个数据库表user.db，用来存储用户账号密码等信息，在用户注册时，将注册信息插入数据库，在用户登录时，将用户的登录信息与数据库信息进行对比，完成合法用户的确认工作，实现用户信息管理。下为核心代码：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174331322.png" alt="image-20210826174331322"></p><p><img src="/2021/08/26/androidAndIoT/image-20210826174336458.png" alt="image-20210826174336458"></p><h3 id="温度湿度显示"><a href="#温度湿度显示" class="headerlink" title="温度湿度显示"></a>温度湿度显示</h3><p>在设备通过mqtt与阿里云平台连接后，通过调用订阅函数，订阅相关的Topic，订阅成功后，会从云端返回一个数据包，数据包里即包含了订阅的消息，将数据包解析后，即可得到温度湿度的数据。</p><p>部分核心代码如下：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174359804.png" alt="image-20210826174359804"></p><p><img src="/2021/08/26/androidAndIoT/image-20210826174405893.png" alt="image-20210826174405893"></p><p>测试结果：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174418281.png" alt="image-20210826174418281"></p><h3 id="远程控制开关灯"><a href="#远程控制开关灯" class="headerlink" title="远程控制开关灯"></a>远程控制开关灯</h3><p>通过按钮选择相应的开灯、关灯事件，通过按钮来进一步调用数据发送函数，上传Topic到云端，完成指令发送。上传Topic时，需要将指令打包为对应格式，核心代码如下：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174439627.png" alt="image-20210826174439627"></p><p>测试结果</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174451161.png" alt="image-20210826174451161"></p><h3 id="历史数据xml存储及展示"><a href="#历史数据xml存储及展示" class="headerlink" title="历史数据xml存储及展示"></a>历史数据xml存储及展示</h3><p>xml文件的使用主要有生成和解析两部分，生成部分主要内容主要内容用于将要存入xml文件的数据进行序列化，然后存入文件，解析部分则是根据标签的提示，读出数据。</p><p>序列化数据：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174515868.png" alt="image-20210826174515868"></p><p>解析数据：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174528241.png" alt="image-20210826174528241"></p><p>测试结果：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174544171.png" alt="image-20210826174544171"></p><h2 id="微信小程序测试"><a href="#微信小程序测试" class="headerlink" title="微信小程序测试"></a>微信小程序测试</h2><h3 id="开关灯实现"><a href="#开关灯实现" class="headerlink" title="开关灯实现"></a>开关灯实现</h3><p>开关灯是通过将指令封装进json里面，然后通过数据上报的方式，将指令发送至云平台，经规则引擎流转后，下发至设备，实现远程控制功能，主要代码如下</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174610234.png" alt="image-20210826174610234"></p><p><img src="/2021/08/26/androidAndIoT/image-20210826174625567.png" alt="image-20210826174625567"></p><h3 id="温湿度数据显示"><a href="#温湿度数据显示" class="headerlink" title="温湿度数据显示"></a>温湿度数据显示</h3><p>温湿度的获取，通过将订阅主题获得的数据进行解析，通过标识符获取相关value，然后保存到本地，最后输出到界面，</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174645302.png" alt="image-20210826174645302"></p><p>测试结果：</p><p><img src="/2021/08/26/androidAndIoT/image-20210826174657770.png" alt="image-20210826174657770"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="实践中遇到的问题"><a href="#实践中遇到的问题" class="headerlink" title="实践中遇到的问题"></a>实践中遇到的问题</h2><p>1.在微信小程序开发过程中，使用的是mqtt与阿里物联网云平台进行连接，但是在相关网站上面下载的mqtt的计算函数有误，前期一直无法连接到平台，但是找不到错误在哪里，后来经同学指点后，得到了新的mqtt依赖文件，成功连接阿里平台。</p><p>2.在android移动应用开发的过程中，应用权限的问题。在开发过程中，使用了xml文件技术来进行数据的保存，其需要对sd卡的读取和写入权限，之前使用android10的模拟器进行测试，当进行文件读写时程序闪退，查看日志显示权限没有获得，在网上查找资料后，发现android6以后需要动态申请权限，加上相关代码后，仍旧无法创建文件，反复尝试多次未果，修改模拟器为android5的版本。</p><p>\3. android移动应用开发的过程中，textView显示异常。在开发过程中，在android5的模拟器上，出现了组件textView调用setText（）函数异常，无法有效显示文本到主界面处，将模拟器修改至高版本android，显示正常，异常原理未知，后来通过一个刷新函数再次设置文本。</p><p>\4. android移动应用开发的过程中，图片显示异常问题。在界面设计里，出于美观需求，加了一张图片，在高版本android上运行正常，换低版本android后，程序无法运行，查找资料后，发现低版本的android查找资源文件是在drawable里面，但是在添加资源文件时，是加在了drawable-24文件夹里，高版本可以读取这个文件夹，但是低版本不可以。</p><p>4.解析mqtt数据包。为了实现对温度湿度数据的读取，我们需要订阅从云端发来的数据，这个数据是json格式的，但是平台对他进行了一定封装，由于对json的解析不是太清楚，所以这部分花了较多时间，数据转化时异常较多，最后通过提取字符串的方式，获得相应的温度湿度数据，通过这种方式，对特定结构的字段有效，例如从规则引擎处转发的数据，他们结构一致，方便解析，但是如果使用阿里平台的在线调试功能的话，所接受到的数据包的结构与规则平台的有异，需要修改相关设置。通过比对两种方式收到的数据包内容，发现两者虽然都传送了温度湿度信息，但是采用的结构不通，所以不管是截取字符串还是采用json或者别的，都无法兼容两种。</p><p>5.控制开关。控制台灯的开关是通过上报数据来实现的，在移动端通过发送一个包含指令的数据包给平台，经过规则引擎后，转发给虚拟设备。在封装数据时，开关灯是用1和0来表示的，开发时大意，将0和1的变量定义成了整型的，导致装入数据后异常，数据经过上报到平台后，显示的Lightswitch的值为相应的0或者1，但是转发至light设备时，通过sql筛选出来的指令却是空的，经过对比字段后，发现，如果将数据定义成整型后，数据包结构发生了变化，字段的顺序也变了，导致items里面没有数据，顾发生错误，将变量修改为String类型的便可以正常开关灯了，基于最简功能需求的原理，在封装发送数据时只封装了lightswitch，但是据此猜想，可以用同样的原理，远程设置温度湿度的值，只需要在封装时将对应的temp和hum加入就行，同时需要修改规则引擎和audino编程。</p><h2 id="实践收获、想法"><a href="#实践收获、想法" class="headerlink" title="实践收获、想法"></a>实践收获、想法</h2><p>本此移动开发，其目的是实现一个远程控制物联网设备的“系统”，开发本身在科研、商业上虽然不值一提，但这个过程本身就是一种尝试，一种我们将在课堂上所学的知识实际运用到现实生活中的尝试，基于此，我们或许可以思考更多。</p><p>区别于传统的作业，本次实践给我最大的体会，便是向我们展示了一个完整的物联网系统的整体结构，以及如何实现它，切实的，在现实生活中去实现它，我们只需要一些并不昂贵的硬件设备，就可以实现传说中的“智能家居”，“物联网”这一概念在此刻无比清晰，甚至会让人产生一种现在就动手做的地步，虽然简单，但，这却打开了一扇通往新世界的大门，与传统编程设计的教务系统、图书管理系统相比，它是可以直接用的，并且有切实的作用的。</p><p>本次实践，前前后后花了好几个周的时间，不得不说，实践的难度极大，虽然有之前课堂上学习android开发的基础，但这次面对的却比以往任何一次开发都要困难，它包含了一个相对完整的物联网系统涉及，从设备数据采集，硬件编程，到云平台设置、移动应用开发，虽然有老师和同学指导，但是面对各个阶段的层出不穷的bug，仍旧让人感到无力。</p><p>硬件编程是开发的第一步，但是在这一步上，我们就耽搁了太多的时间，初次接触这些东西，导致编程各种报错，现在回过头去看，发现当时的错误根本不值一提，但是在当时的环境下，那些错误却是一个又一个实实在在的拦路虎，拦住了继续前进的脚步。也许是开发版选错了（界面挡住了）、引脚设置错了、少了个分号、多了个空格······可笑，但真实，且存在。除此之外，由于是采用虚拟平台进行试验，加上试验人数有点多，所以平台几度崩溃，加上平台的维护等等，也给开发调试带来了一定的障碍，所幸，最后还是好了。</p><p>实践中的第二个难点，也是最重要的部分，应该就要算阿里云平台了吧，整个开发过程，都是围绕阿里平台来进行的，创建产品、设备并非难事，却难在使用mqtt接入阿里云，区别于传统开发，本次实践采用的是此前从未接触过的mqtt协议，所以，参考着网上的资料，几乎自学了一遍mqtt协议，在开发的初期，问题的重点就集中在“设备未激活”、“设备离线”等问题上，这很可笑，毕竟连设备都不能上线，还拿什么做开发，但却是那时的现状。</p><p>成功接入阿里云物联网云平台后，时间也所剩不多了，由于有平时上课、上机的基础，android开发终于不用再从头开始了，但开发也并非一番风顺。接入阿里平台的一大障碍就是android studio的同步，网上的例程无法运行，各种版本问题，设置问题，很多时候，一个很简单的问题，往往能耽搁好几天。</p><p>android开发是一个简单的过程，同时也是一个十分难的过程，在一切前置准备工作就绪后，添加组件、设计界面、编写逻辑函数，这一切看起来顺理成章，我也这么做了，但是做出来却发现效果大失所望，作为一个移动app，而且还是面向用户的app，它不仅仅需要实现基础功能，还需要一些拓展功能，以及一些优秀的界面设计，然而，浅薄的知识并不允许我考虑太多这些。一个程序的好坏，是由其功能决定的，最开始的我们，只想着实现它的功能，但事实上，界面同样重要，一位老师也说过 类似的话“可用、好用、放心用”，一个程序，当可用实现后，或许该进一步实现“好用”，至少让开发者之外的其他人也能够正常使用程序。同时，这也提醒了我，或许该学一些关于界面设计的知识，IT行业有前端和后端之分，界面设计也和逻辑代码一样重要。</p><p>最终，整个实践磕磕碰碰地完成了，虽然不甚满意，但也足以聊表这花掉的几个周，或许我没有达到整个实践的最终教学目的，但对我自己而言，在这个过程中，我也学到了许许多多此前从未掌握的知识。整个实践从大局上，让我认识到了我所学的专业的特性，在此以前，我一直想不清楚物联网和计算机的区别，他们学的，我们要学，他们不学的，我们也要学，书本上说的“万物互联”，但这对于我们而言，却是遥不可及的，都是写代码，有什么区别？可是这次实践却从另一个角度向我们展示了什么叫做“万物互联”，也为日后的工作指明了方向。其次，便是关于技术方面的积累了，无疑，在经历了数个周的高强度改bug后，对android开发显得更加得心应手了，一些编程的小技巧，一些函数的用法，一些设计思想，都在积累，他们显得那么微不足道，却足以堆积出一个高效、实用的开发习惯。</p><p>学习一个从不会到会的过程，没有什么东西是天生会的，我们磕磕碰碰的前进，每一次挫折都让我们更加强大，每一个bug都让我们更加地强大，成长并非坦途，你我皆有bug。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明：&quot;&gt;&lt;a href=&quot;#说明：&quot; class=&quot;headerlink&quot; title=&quot;说明：&quot;&gt;&lt;/a&gt;说明：&lt;/h2&gt;&lt;p&gt;本项目截止日期：2020年11月14日&lt;/p&gt;
&lt;p&gt;项目仓库：&lt;a href=&quot;https://github.com/stary1</summary>
      
    
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="http://stary2020.gitee.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="android" scheme="http://stary2020.gitee.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>web商城（javaWeb重构版）</title>
    <link href="http://stary2020.gitee.io/2021/08/26/javaWeb2/"/>
    <id>http://stary2020.gitee.io/2021/08/26/javaWeb2/</id>
    <published>2021-08-26T04:47:12.000Z</published>
    <updated>2021-08-26T08:51:08.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本项目是在上一版书城项目的基础上，进一步重构，上一个项目地址：<a href="https://github.com/stary1999/JavaWebBookCity">https://github.com/stary1999/JavaWebBookCity</a></p><p>本项目基于SpringBoot2和themleaf的Web开发，对旧的Web商城项目的重构和完善，独立开发和设计了基础页面。项目分为前台用户模块和后台管理模块，前台包括了商品展示，商品购买，用户注册、登录，等功能。后台管理模块包括商品管理、用户管理、订单管理、管理员管理四个模块，实现包括增删改查、以及权限管理等功能。</p><ul><li>项目仓库：<a href="https://github.com/stary1999/MyMall">https://github.com/stary1999/MyMall</a></li><li>文档：<a href="https://stary1999.github.io/2021/08/26/javaWeb2/">https://stary1999.github.io/2021/08/26/javaWeb2/</a></li></ul><p>重构：</p><ul><li><p>重构后台管理系统</p></li><li><p>重新设计界面</p></li><li><p>重新设计数据表</p></li><li><p>更新技术框架</p></li></ul><p>由于此次独立程度较高，目前功能缺失较大，等待进一步实现。</p><p>截止：2020年8月26日</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>idea2021</li><li>MySQL8.0</li><li>Maven3.8.1</li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>SpringBoot作为后端开发，负责处理业务逻辑和视图分发。</li><li>MyBatis Plus作为数据库框架，处理数据库相关操作，MySQL存储数据表信息。</li><li>themleaf作为前端模板引擎，使用Bootstrap进行页面开发。</li><li>……</li></ul><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p>后台管理部分</p><p><img src="/2021/08/26/javaWeb2/image-20210826165108480.png" alt="image-20210826165108480"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;本项目是在上一版书城项目的基础上，进一步重构，上一个项目地址：&lt;a href=&quot;https://github.com/stary1999/J</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="SpringBoot" scheme="http://stary2020.gitee.io/tags/SpringBoot/"/>
    
    <category term="项目" scheme="http://stary2020.gitee.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>力扣题目</title>
    <link href="http://stary2020.gitee.io/2021/08/20/leetcode/"/>
    <id>http://stary2020.gitee.io/2021/08/20/leetcode/</id>
    <published>2021-08-20T06:25:35.000Z</published>
    <updated>2021-08-26T05:32:14.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h1><h2 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h2><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出：[null,null,3,-1]</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[],[5],[2],[],[]]</span><br><span class="line">输出：[null,-1,null,null,5,2]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] queue;</span><br><span class="line">        <span class="keyword">int</span> head;</span><br><span class="line">        <span class="keyword">int</span> tail;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">this</span>.head=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.length=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.tail&gt;=<span class="keyword">this</span>.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] newQueue=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.length+<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                newQueue[i]=<span class="keyword">this</span>.queue[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.queue=newQueue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.tail++;</span><br><span class="line">        <span class="keyword">this</span>.queue[<span class="keyword">this</span>.tail-<span class="number">1</span>]=value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.tail&lt;=<span class="keyword">this</span>.head)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.tail--;</span><br><span class="line">            <span class="keyword">int</span> returnNumber=<span class="keyword">this</span>.queue[<span class="keyword">this</span>.head];</span><br><span class="line">            <span class="keyword">int</span>[] newQueue=<span class="keyword">this</span>.queue;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                newQueue[i]=<span class="keyword">this</span>.queue[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.queue=newQueue;</span><br><span class="line">            <span class="keyword">return</span> returnNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>官方;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack1;</span><br><span class="line">    Deque&lt;Integer&gt; stack2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack1 = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果第二个栈为空</span></span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> deleteItem = stack2.pop();</span><br><span class="line">            <span class="keyword">return</span> deleteItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="02"><a href="#02" class="headerlink" title="02"></a>02</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.min();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.min();   --&gt; 返回 -2</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; A, B;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        B = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        A.add(x);</span><br><span class="line">        <span class="keyword">if</span>(B.empty() || B.peek() &gt;= x)</span><br><span class="line">            B.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A.pop().equals(B.peek()))</span><br><span class="line">            B.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> B.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">作者：jyd</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/solution/mian-shi-ti-30-bao-han-minhan-shu-de-zhan-fu-zhu-z/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h2 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h2><h3 id="01-1"><a href="#01-1" class="headerlink" title="01"></a>01</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</span><br><span class="line"></span><br><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure><p>自己的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stary.top100;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@classname</span> test01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021/8/20-16:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Definition for singly-linked list.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        ListNode he=head;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (he!=<span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(he.val+<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            he=he.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        he=head;</span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = count-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            a[i]=he.val;</span><br><span class="line">            he=he.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode h1 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode h2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next = h1;</span><br><span class="line">        h1.next = h2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] ints = reversePrint(head);</span><br><span class="line">        System.out.println(ints);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>官方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = stack.size();</span><br><span class="line">        <span class="keyword">int</span>[] print = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            print[i] = stack.pop().val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> print;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-b/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>评论区<br>(思路一样)</p><p><img src="/2021/08/20/leetcode/image-20210822094808589.png" alt="image-20210822094808589"></p><h3 id="02-1"><a href="#02-1" class="headerlink" title="02"></a>02</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>评论区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode pre = <span class="keyword">null</span>, cur = head, next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="03"><a href="#03" class="headerlink" title="03"></a>03</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line"></span><br><span class="line">输入：head = [[1,1],[2,1]]</span><br><span class="line">输出：[[1,1],[2,1]]</span><br><span class="line"></span><br><span class="line">输入：head = [[3,null],[3,0],[3,null]]</span><br><span class="line">输出：[[3,null],[3,0],[3,null]]</span><br><span class="line"></span><br><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br><span class="line">解释：给定的链表为空（空指针），因此返回 null。</span><br></pre></td></tr></table></figure><h2 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h2><h3 id="01空格替换"><a href="#01空格替换" class="headerlink" title="01空格替换"></a>01空格替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请实现一个函数，把字符串 s 中的每个空格替换成&quot;%20&quot;。</span><br><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><p>评论区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length(); i++)&#123;</span><br><span class="line">           <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">           <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">           <span class="keyword">else</span> sb.append(c);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sb.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>my</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="02-2"><a href="#02-2" class="headerlink" title="02"></a>02</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串&quot;abcdefg&quot;和数字2，该函数将返回左旋转两位得到的结果&quot;cdefgab&quot;。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line">输入: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出: &quot;cdefgab&quot;</span><br><span class="line"></span><br><span class="line">输入: s = &quot;lrloseumgh&quot;, k = 6</span><br><span class="line">输出: &quot;umghlrlose&quot;</span><br></pre></td></tr></table></figure><p>my</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stary.leetcode.offer.day03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@classname</span> question02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021/8/22-16:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">question02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    输入: s = &quot;abcdefg&quot;, k = 2</span></span><br><span class="line"><span class="comment">//    输出: &quot;cdefgab&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    输入: s = &quot;lrloseumgh&quot;, k = 6</span></span><br><span class="line"><span class="comment">//    输出: &quot;umghlrlose&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseLeftWords</span><span class="params">(String s, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="comment">/*   String s1=s.substring(n,s.length());</span></span><br><span class="line"><span class="comment">        s1=s1+s.substring(0,n);</span></span><br><span class="line"><span class="comment">        return s1;*/</span></span><br><span class="line">        <span class="keyword">return</span> s.substring(n,s.length())+s.substring(<span class="number">0</span>,n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String s=<span class="string">&quot;ahzhaisbiai&quot;</span>;</span><br><span class="line">        String s1 = reverseLeftWords(s, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;s=&quot;</span>+s);</span><br><span class="line">        System.out.println(<span class="string">&quot;s1=&quot;</span>+s1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="top100"><a href="#top100" class="headerlink" title="top100"></a>top100</h1><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</span><br><span class="line"></span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</span><br><span class="line"></span><br><span class="line">你可以按任意顺序返回答案</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/two-sum</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br><span class="line"></span><br><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br><span class="line"></span><br><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p>官方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="剑指第二版"><a href="#剑指第二版" class="headerlink" title="剑指第二版"></a>剑指第二版</h1><h3 id="03数组中的重复数字"><a href="#03数组中的重复数字" class="headerlink" title="03数组中的重复数字"></a>03数组中的重复数字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3</span><br></pre></td></tr></table></figure><p>my</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stary.leetcode.offer2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@classname</span> question03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021/8/22-16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">question03</span> </span>&#123;</span><br><span class="line"><span class="comment">//    在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。</span></span><br><span class="line"><span class="comment">//    数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。</span></span><br><span class="line"><span class="comment">//    请找出数组中任意一个重复的数字。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    输入：</span></span><br><span class="line"><span class="comment">//            [2, 3, 1, 0, 2, 5, 3]</span></span><br><span class="line"><span class="comment">//    输出：2 或 3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num=nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(num[j]==nums[i])&#123;</span><br><span class="line">                   <span class="keyword">return</span> num[j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ints=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> repeatNumber = findRepeatNumber(ints);</span><br><span class="line">        System.out.println(repeatNumber);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>评论区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            arr[nums[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(arr[nums[i]] &gt; <span class="number">1</span>) <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="04-二维数组中的查找"><a href="#04-二维数组中的查找" class="headerlink" title="04 二维数组中的查找"></a>04 二维数组中的查找</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>my</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">            <span class="keyword">int</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(m-<span class="number">1</span>&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][m - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (matrix[i][j] == target) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>评论区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, col = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(row &lt; m &amp;&amp; col &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[row][col] &gt; target) &#123;</span><br><span class="line">                col--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(matrix[row][col] &lt; target) &#123;</span><br><span class="line">                row++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="05替换空格"><a href="#05替换空格" class="headerlink" title="05替换空格"></a>05替换空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请实现一个函数，把字符串 s 中的每个空格替换成&quot;%20&quot;。</span><br><span class="line">输入：s = &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><p>评论区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length(); i++)&#123;</span><br><span class="line">           <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">           <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">           <span class="keyword">else</span> sb.append(c);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sb.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>my</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="06从头到尾打印链表"><a href="#06从头到尾打印链表" class="headerlink" title="06从头到尾打印链表"></a>06从头到尾打印链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</span><br><span class="line"></span><br><span class="line">输入：head = [1,3,2]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure><p>自己的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Definition for singly-linked list.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        ListNode he=head;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (he!=<span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(he.val+<span class="string">&quot;   &quot;</span>);</span><br><span class="line">            he=he.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        he=head;</span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = count-<span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            a[i]=he.val;</span><br><span class="line">            he=he.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode h1 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode h2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next = h1;</span><br><span class="line">        h1.next = h2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] ints = reversePrint(head);</span><br><span class="line">        System.out.println(ints);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = stack.size();</span><br><span class="line">        <span class="keyword">int</span>[] print = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            print[i] = stack.pop().val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> print;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-b/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>评论区<br>(思路一样)</p><p><img src="/2021/08/20/leetcode/image-20210822094808589.png" alt="image-20210822094808589"></p><h3 id="07重建二叉树-中等"><a href="#07重建二叉树-中等" class="headerlink" title="07重建二叉树(中等)"></a>07重建二叉树(中等)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。</span><br><span class="line">假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</span><br><span class="line"></span><br><span class="line">Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">Input: preorder = [-1], inorder = [-1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure><p><img src="/2021/08/20/leetcode/tree.jpg" alt="img"></p><p>评论区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">知识点：</span><br><span class="line"></span><br><span class="line">前序遍历列表：第一个元素永远是 【根节点 (root)】</span><br><span class="line">中序遍历列表：根节点 (root)【左边】的所有元素都在根节点的【左分支】，【右边】的所有元素都在根节点的【右分支】</span><br><span class="line">算法思路：</span><br><span class="line"></span><br><span class="line">通过【前序遍历列表】确定【根节点 (root)】</span><br><span class="line">将【中序遍历列表】的节点分割成【左分支节点】和【右分支节点】</span><br><span class="line">递归寻找【左分支节点】中的【根节点 (left child)】和 【右分支节点】中的【根节点 (right child)】</span><br></pre></td></tr></table></figure><h3 id="09用两个栈实现队列"><a href="#09用两个栈实现队列" class="headerlink" title="09用两个栈实现队列"></a>09用两个栈实现队列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[3],[],[]]</span><br><span class="line">输出：[null,null,3,-1]</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">[&quot;CQueue&quot;,&quot;deleteHead&quot;,&quot;appendTail&quot;,&quot;appendTail&quot;,&quot;deleteHead&quot;,&quot;deleteHead&quot;]</span><br><span class="line">[[],[],[5],[2],[],[]]</span><br><span class="line">输出：[null,-1,null,null,5,2]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] queue;</span><br><span class="line">        <span class="keyword">int</span> head;</span><br><span class="line">        <span class="keyword">int</span> tail;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">this</span>.head=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.length=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.tail&gt;=<span class="keyword">this</span>.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] newQueue=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.length+<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                newQueue[i]=<span class="keyword">this</span>.queue[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.queue=newQueue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.tail++;</span><br><span class="line">        <span class="keyword">this</span>.queue[<span class="keyword">this</span>.tail-<span class="number">1</span>]=value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.tail&lt;=<span class="keyword">this</span>.head)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.tail--;</span><br><span class="line">            <span class="keyword">int</span> returnNumber=<span class="keyword">this</span>.queue[<span class="keyword">this</span>.head];</span><br><span class="line">            <span class="keyword">int</span>[] newQueue=<span class="keyword">this</span>.queue;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                newQueue[i]=<span class="keyword">this</span>.queue[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.queue=newQueue;</span><br><span class="line">            <span class="keyword">return</span> returnNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>官方;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CQueue</span> </span>&#123;</span><br><span class="line">    Deque&lt;Integer&gt; stack1;</span><br><span class="line">    Deque&lt;Integer&gt; stack2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack1 = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果第二个栈为空</span></span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> deleteItem = stack2.pop();</span><br><span class="line">            <span class="keyword">return</span> deleteItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="10-I，斐波那契数列"><a href="#10-I，斐波那契数列" class="headerlink" title="10 I，斐波那契数列"></a>10 I，斐波那契数列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下</span><br><span class="line"></span><br><span class="line">F(0) = 0,   F(1) = 1</span><br><span class="line">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br><span class="line"></span><br><span class="line">斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</span><br><span class="line"></span><br><span class="line">答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</span><br><span class="line"></span><br><span class="line">输入：n = 2</span><br><span class="line">输出：1</span><br><span class="line"></span><br><span class="line">输入：n = 5</span><br><span class="line">输出：5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>my</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> l=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> re= Math.toIntExact( fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>) % l);</span><br><span class="line">            <span class="keyword">return</span> re;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>, sum;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           sum = (a + b) % <span class="number">1000000007</span>;</span><br><span class="line">           a = b;</span><br><span class="line">           b = sum;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-II青蛙跳台阶问题"><a href="#10-II青蛙跳台阶问题" class="headerlink" title="10 II青蛙跳台阶问题"></a>10 II青蛙跳台阶问题</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;剑指offer&quot;&gt;&lt;a href=&quot;#剑指offer&quot; class=&quot;headerlink&quot; title=&quot;剑指offer&quot;&gt;&lt;/a&gt;剑指offer&lt;/h1&gt;&lt;h2 id=&quot;day01&quot;&gt;&lt;a href=&quot;#day01&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="default" scheme="http://stary2020.gitee.io/categories/default/"/>
    
    
    <category term="default" scheme="http://stary2020.gitee.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>故事/事故合集</title>
    <link href="http://stary2020.gitee.io/2021/08/13/something/"/>
    <id>http://stary2020.gitee.io/2021/08/13/something/</id>
    <published>2021-08-13T06:42:39.000Z</published>
    <updated>2021-08-26T05:32:52.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="post和put请求"><a href="#post和put请求" class="headerlink" title="post和put请求"></a>post和put请求</h2><p>转:<a href="https://www.cnblogs.com/wuqilang/p/14173220.html">https://www.cnblogs.com/wuqilang/p/14173220.html</a></p><p>在http中，put被定义为幂等的方法，post不是幂等的方法。</p><p>　　幂等：数学中的一个术语，对于单个输入或者无输入的运算方法，如果每次都是同样的结果，则是幂等的。也就是说，如果一个网络重复执行多次，产生的效果是一样的，那就是幂等。</p><p>　　<strong>post</strong></p><p>　　　　用于提交请求，可以更新或者创建资源，是非幂等的</p><p>　　　　在用户注册时，每次提交都是创建一个用户账号，此时用post</p><p>　　<strong>put</strong></p><p>　　　　用于向指定的url传送更新资源，是幂等的</p><p>　　　　还是用户模块，比如修改密码，虽然提交的还是账户名和密码，但是每次提交都只是更新该用户密码，每次请求都只是覆盖原型的值，此时用put</p><p>　　<strong>用post还是put</strong></p><p>　　　　如果该更新对应的url多次调用的结果一致，用put</p><p>　　　　如果每次提交相同的内容，最终结果不一致，用post</p><h1 id="springBoot"><a href="#springBoot" class="headerlink" title="springBoot"></a>springBoot</h1><p><img src="/2021/08/13/something/image-20210824180700286.png" alt="image-20210824180700286"></p><p><img src="/2021/08/13/something/image-20210824182707959.png" alt="image-20210824182707959"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;post和put请求&quot;&gt;&lt;a href=&quot;#post和put请求&quot; class=&quot;headerlink&quot; title=&quot;post和put请求&quot;&gt;&lt;/a&gt;post和put请求&lt;/h2&gt;&lt;p&gt;转:&lt;a href=&quot;https://www.cnblogs.com/wuq</summary>
      
    
    
    
    <category term="default" scheme="http://stary2020.gitee.io/categories/default/"/>
    
    
    <category term="default" scheme="http://stary2020.gitee.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>faceToFace</title>
    <link href="http://stary2020.gitee.io/2021/08/03/faceToFace/"/>
    <id>http://stary2020.gitee.io/2021/08/03/faceToFace/</id>
    <published>2021-08-03T09:22:11.000Z</published>
    <updated>2021-08-19T02:33:57.332Z</updated>
    
    <content type="html"><![CDATA[<p>优势、亮点、基本情况<br>言简意赅、语言精炼，控制时间<br>和应聘岗位相关的经历<br>为什么能够胜任<br>为什么要应聘该岗位~求职动机</p><p>注意：重点介绍满足岗位要求的三个优势和亮点<br>表现出对岗位的理解和自己清晰的职业规划<br>表示愿意长期从事这个岗位</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;优势、亮点、基本情况&lt;br&gt;言简意赅、语言精炼，控制时间&lt;br&gt;和应聘岗位相关的经历&lt;br&gt;为什么能够胜任&lt;br&gt;为什么要应聘该岗位~求职动机&lt;/p&gt;
&lt;p&gt;注意：重点介绍满足岗位要求的三个优势和亮点&lt;br&gt;表现出对岗位的理解和自己清晰的职业规划&lt;br&gt;表示愿意长期从事这个</summary>
      
    
    
    
    <category term="default" scheme="http://stary2020.gitee.io/categories/default/"/>
    
    
    <category term="default" scheme="http://stary2020.gitee.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>springcloudKuang</title>
    <link href="http://stary2020.gitee.io/2021/08/03/java-2021-08-03-springcloudKuang/"/>
    <id>http://stary2020.gitee.io/2021/08/03/java-2021-08-03-springcloudKuang/</id>
    <published>2021-08-03T09:21:30.000Z</published>
    <updated>2021-08-19T02:35:01.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SpringCloud五大组件:</p><ul><li>服务注册与发现:Netflix Eureka</li><li>负载均衡:<ul><li>客户端:Netflix Ribbon</li><li>服务端:Feign(依赖与ribbon，只是将调用方式RestTemplete更改成Service接口)</li><li>断路器:Netflix Hystrix</li><li>服务网关:Netflix Zuul</li><li>分布式配置:Spring Cloud Config</li></ul></li></ul><p>常见面试题:</p><ol><li>什么是微服务</li><li>微服务之间是如何独立通讯的</li><li>SpringCloud和Dubbo有哪些区别</li><li>SpringBoot和SpringCloud，请谈谈你对他们的理解</li><li>什么是服务熔断?什么是服务降级?</li><li>微服务的优缺点分别是什么?说下你在项目开发中遇到的坑</li><li>你所知道的微服务技术栈有哪些?列举一二</li><li>Eureka和Zookeeper都可以提供服务注册与发现的功能，请说说两者的区别</li><li>……</li></ol><h1 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务?"></a>什么是微服务?</h2><p>微服务(Microservice Architecture)是近几年流行的一种架构思想。</p><p>ThoughtWorks公司的首席科学家Martin Fowler对此的解释:</p><p>原文:<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p>汉化:<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p><ul><li>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li><li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它提倡将单一的应用程序划分为一组小的服务，</strong>但每个服务运行在其独立的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(<strong>HTTP</strong>)互相沟通，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言、工具，对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li></ul><p>从技术角度来看:</p><ul><li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己的独立数据库。</li></ul><hr><h2 id="微服务与服务架构"><a href="#微服务与服务架构" class="headerlink" title="微服务与服务架构"></a>微服务与服务架构</h2><p>微服务:</p><p>微服务强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><p>微服务架构:</p><p>一种新的架构形式，Martin Fowler 于2014年提出。</p><p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)<strong>互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具</strong>(如Maven)**对其进行构建。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点:</p><ul><li>单一职责原则</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事</li><li>微服务能够被小团队开发，这个团队只需2-5个开发人员组成</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的</li><li>微服务能使用不同的语言开发</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkis，hudson，bamboo</li><li>微服务易于被一个开发人员理解、修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值</li><li>微服务允许利用和融合最新技术</li><li><strong>微服务只是业务逻辑的代码，不会和HTML、CSS，或其他的界面混合</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库</strong></li></ul><p>缺点:</p><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大</li><li>系统部署依赖问题</li><li>服务间通信成本问题</li><li>数据一致性问题</li><li>系统集成测试问题</li><li>性能和监控问题</li></ul><h2 id="微服务技术栈"><a href="#微服务技术栈" class="headerlink" title="微服务技术栈"></a>微服务技术栈</h2><table><thead><tr><th>微服务技术条目</th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit</td></tr><tr><td>时间消息总线</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><h2 id="为什么选择SpringCloud作为微服务架构"><a href="#为什么选择SpringCloud作为微服务架构" class="headerlink" title="为什么选择SpringCloud作为微服务架构"></a>为什么选择SpringCloud作为微服务架构</h2><p>选型依据</p><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul><p>当前各大IT公司用的微服务架构有那些？</p><ul><li>阿里：dubbo+HFS</li><li>京东：JFS</li><li>新浪：Motan</li><li>当当网：DubboX</li></ul><p>各微服务框架对比</p><table><thead><tr><th align="center">功能点/服务框架</th><th>Netflix/SpringCloud</th><th>Motan</th><th>gRPC</th><th>Thri t</th><th>Dubbo/DubboX</th></tr></thead><tbody><tr><td align="center">功能定位</td><td>完整的微服务框架</td><td>RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册发现</td><td>RPC框架</td><td>RPC框架</td><td>服务框架</td></tr><tr><td align="center">支持Rest</td><td>是，Ribbon支持多种可拔插的序列号选择</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td align="center">支持RPC</td><td>否</td><td>是(Hession2)</td><td>是</td><td>是</td><td>是</td></tr><tr><td align="center">支持多语言</td><td>是(Rest形式)</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td align="center">负载均衡</td><td>是(服务端zuul+客户端Ribbon)，zuul-服务，动态路由，云端负载均衡Eureka（针对中间层服务器）</td><td>是(客户端)</td><td>否</td><td>否</td><td>是(客户端)</td></tr><tr><td align="center">配置服务</td><td>Netfix Archaius，Spring Cloud Config Server 集中配置</td><td>是(Zookeeper提供)</td><td>否</td><td>否</td><td>否</td></tr><tr><td align="center">服务调用链监控</td><td>是(zuul)，zuul提供边缘服务，API网关</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td align="center">高可用/容错</td><td>是(服务端Hystrix+客户端Ribbon)</td><td>是(客户端)</td><td>否</td><td>否</td><td>是(客户端)</td></tr><tr><td align="center">典型应用案例</td><td>Netflix</td><td>Sina</td><td>Google</td><td>Facebook</td><td></td></tr><tr><td align="center">社区活跃程度</td><td>高</td><td>一般</td><td>高</td><td>一般</td><td>2017年后重新开始维护，之前中断了5年</td></tr><tr><td align="center">学习难度</td><td>中等</td><td>低</td><td>高</td><td>高</td><td>低</td></tr><tr><td align="center">文档丰富程度</td><td>高</td><td>一般</td><td>一般</td><td>一般</td><td>高</td></tr><tr><td align="center">其他</td><td>Spring Cloud Bus为我们的应用程序带来了更多管理端点</td><td>支持降级</td><td>Netflix内部在开发集成gRPC</td><td>IDL定义</td><td>实践的公司比较多</td></tr></tbody></table><h1 id="SpringCloud入门概述"><a href="#SpringCloud入门概述" class="headerlink" title="SpringCloud入门概述"></a>SpringCloud入门概述</h1><h4 id="SpringCloud是什么？"><a href="#SpringCloud是什么？" class="headerlink" title="SpringCloud是什么？"></a>SpringCloud是什么？</h4><p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/aHR0cHM6Ly9zczEuYmRzdGF0aWMuY29tLzcwY0Z1WFNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTM1NzgwMTc3ODAsMTIxODQyMDAyOSZmbT0yNiZncD0wLmpwZw" alt="format_png"></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/aHR0cHM6Ly9zczIuYmRzdGF0aWMuY29tLzcwY0Z2blNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTE2Mzc3ODY4OTcsNzQ1MTM1MjUxJmZtPTI2JmdwPTAuanBn" alt="format_png 1"></p><h4 id="SpringCloud和SpringBoot的关系"><a href="#SpringCloud和SpringBoot的关系" class="headerlink" title="SpringCloud和SpringBoot的关系"></a>SpringCloud和SpringBoot的关系</h4><ul><li>SpringBoot专注于开苏方便的开发单个个体微服务；</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li><li>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li></ul><h4 id="Dubbo-和-SpringCloud技术选型"><a href="#Dubbo-和-SpringCloud技术选型" class="headerlink" title="Dubbo 和 SpringCloud技术选型"></a>Dubbo 和 SpringCloud技术选型</h4><h5 id="1-分布式-服务治理Dubbo"><a href="#1-分布式-服务治理Dubbo" class="headerlink" title="1. 分布式+服务治理Dubbo"></a>1. 分布式+服务治理Dubbo</h5><p>目前成熟的互联网架构，应用服务化拆分 + 消息中间件</p><h5 id="2-Dubbo-和-SpringCloud对比"><a href="#2-Dubbo-和-SpringCloud对比" class="headerlink" title="2. Dubbo 和 SpringCloud对比"></a>2. Dubbo 和 SpringCloud对比</h5><p>可以看一下社区活跃度：</p><p><a href="https://github.com/dubbo">https://github.com/dubbo</a></p><p><a href="https://github.com/spring-cloud">https://github.com/spring-cloud</a></p><p><strong>对比结果：</strong></p><table><thead><tr><th></th><th>Dubbo</th><th>SpringCloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>Spring Cloud Netfilx Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务监控</td><td>Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netfilx Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netfilx Zuul</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总栈</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p><strong>最大区别：Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</strong></p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p><p><strong>品牌机和组装机的区别</strong></p><p><strong>社区支持与更新力度的区别</strong></p><p><strong>总结：</strong>二者解决的问题域不一样：Dubbo的定位是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案。</p><h4 id="SpringCloud能干嘛？"><a href="#SpringCloud能干嘛？" class="headerlink" title="SpringCloud能干嘛？"></a>SpringCloud能干嘛？</h4><ul><li>Distributed/versioned configuration 分布式/版本控制配置</li><li>Service registration and discovery 服务注册与发现</li><li>Routing 路由</li><li>Service-to-service calls 服务到服务的调用</li><li>Load balancing 负载均衡配置</li><li>Circuit Breakers 断路器</li><li>Distributed messaging 分布式消息管理</li><li>…</li></ul><h4 id="SpringCloud下载"><a href="#SpringCloud下载" class="headerlink" title="SpringCloud下载"></a>SpringCloud下载</h4><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p><p>SpringCloud没有采用数字编号的方式命名版本号，而是采用了伦敦地铁站的名称，<strong>同时根据字母表的顺序来对应版本时间顺序</strong>，比如最早的Realse版本：Angel，第二个Realse版本：Brixton，然后是Camden、Dalston、Edgware，目前最新的是Hoxton SR4 CURRENT GA通用稳定版。</p><p><strong>自学参考书：</strong></p><ul><li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li><li>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li><li>SpringCloud中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li><li>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li></ul><h1 id="SpringCloud-Rest学习环境搭建：服务提供者"><a href="#SpringCloud-Rest学习环境搭建：服务提供者" class="headerlink" title="SpringCloud Rest学习环境搭建：服务提供者"></a>SpringCloud Rest学习环境搭建：服务提供者</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>我们会使用一个Dept部门模块做一个微服务通用案例<strong>Consumer</strong>消费者(<strong>Client</strong>)通过REST调用<strong>Provider</strong>提供者(<strong>Server</strong>)提供的服务。</li><li>回顾Spring，SpringMVC，Mybatis等以往学习的知识。</li><li>Maven的分包分模块架构复习。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一个简单的Maven模块结构是这样的：</span><br><span class="line">-- app-parent: 一个父项目(app-parent)聚合了很多子项目(app-util\app-dao\app-web...)</span><br><span class="line">  |-- pom.xml</span><br><span class="line">  |</span><br><span class="line">  |-- app-core</span><br><span class="line">  ||---- pom.xml</span><br><span class="line">  |</span><br><span class="line">  |-- app-web</span><br><span class="line">  ||---- pom.xml</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><p>一个父工程带着多个Moudule子模块</p><p>MicroServiceCloud父工程(Project)下初次带着3个子模块(Module)</p><ul><li>microservicecloud-api 【封装的整体entity/接口/公共配置等】</li><li>microservicecloud-consumer-dept-80 【服务提供者】</li><li>microservicecloud-provider-dept-8001 【服务消费者】</li></ul><h4 id="SpringCloud版本选择"><a href="#SpringCloud版本选择" class="headerlink" title="SpringCloud版本选择"></a>SpringCloud版本选择</h4><p><strong>大版本说明</strong></p><table><thead><tr><th>SpringBoot</th><th>SpringCloud</th><th>关系</th></tr></thead><tbody><tr><td>1.2.x</td><td>Angel版本(天使)</td><td>兼容SpringBoot1.2x</td></tr><tr><td>1.3.x</td><td>Brixton版本(布里克斯顿)</td><td>兼容SpringBoot1.3x，也兼容SpringBoot1.4x</td></tr><tr><td>1.4.x</td><td>Camden版本(卡姆登)</td><td>兼容SpringBoot1.4x，也兼容SpringBoot1.5x</td></tr><tr><td>1.5.x</td><td>Dalston版本(多尔斯顿)</td><td>兼容SpringBoot1.5x，不兼容SpringBoot2.0x</td></tr><tr><td>1.5.x</td><td>Edgware版本(埃奇韦尔)</td><td>兼容SpringBoot1.5x，不兼容SpringBoot2.0x</td></tr><tr><td>2.0.x</td><td>Finchley版本(芬奇利)</td><td>兼容SpringBoot2.0x，不兼容SpringBoot1.5x</td></tr><tr><td>2.1.x</td><td>Greenwich版本(格林威治)</td><td></td></tr></tbody></table><p><strong>实际开发版本关系</strong></p><table><thead><tr><th align="center">spring-boot-starter-parent</th><th align="right"></th><th align="center">spring-cloud-dependencles</th><th align="center"></th></tr></thead><tbody><tr><td align="center"><strong>版本号</strong></td><td align="right"><strong>发布日期</strong></td><td align="center"><strong>版本号</strong></td><td align="center"><strong>发布日期</strong></td></tr><tr><td align="center">1.5.2.RELEASE</td><td align="right">2017-03</td><td align="center">Dalston.RC1</td><td align="center">2017-x</td></tr><tr><td align="center">1.5.9.RELEASE</td><td align="right">2017-11</td><td align="center">Edgware.RELEASE</td><td align="center">2017-11</td></tr><tr><td align="center">1.5.16.RELEASE</td><td align="right">2018-04</td><td align="center">Edgware.SR5</td><td align="center">2018-10</td></tr><tr><td align="center">1.5.20.RELEASE</td><td align="right">2018-09</td><td align="center">Edgware.SR5</td><td align="center">2018-10</td></tr><tr><td align="center">2.0.2.RELEASE</td><td align="right">2018-05</td><td align="center">Fomchiey.BULD-SNAPSHOT</td><td align="center">2018-x</td></tr><tr><td align="center">2.0.6.RELEASE</td><td align="right">2018-10</td><td align="center">Fomchiey-SR2</td><td align="center">2018-10</td></tr><tr><td align="center">2.1.4.RELEASE</td><td align="right">2019-04</td><td align="center">Greenwich.SR1</td><td align="center">2019-03</td></tr></tbody></table><h4 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h4><ul><li>新建父工程项目springcloud，切记<strong>Packageing是pom模式</strong></li><li>主要是定义POM文件，将后续各个子模块公用的jar包等统一提取出来，类似一个抽象父类</li></ul><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-dept-80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-eureka-7003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-8003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-dept-feign<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-provider-dept-hystrix-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-consumer-hystrix-dashboard<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-zuul-9527<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-server-3344<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-client-3355<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-eureka-7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springcloud-config-dept-8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式  pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springCloud的依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot 启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志测试~--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父工程为springcloud，其下有多个子mudule</p><p>springcloud-consumer-dept-80访问springcloud-provider-dept-8001下的controller使用REST方式</p><p>如<strong>DeptConsumerController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 理解：消费者，不应该有service层~</span></span><br><span class="line"><span class="comment">     * RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中</span></span><br><span class="line"><span class="comment">     * (地址：url, 实体：Map ,Class&lt;T&gt; responseType)</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 提供多种便捷访问远程http服务的方法，简单的Restful服务模板~</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务提供方地址前缀</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line">    <span class="comment">//private static final String REST_URL_PREFIX = &quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方添加部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dept</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// postForObject(服务提供方地址(接口),参数实体,返回类型.class)</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/add&quot;</span>, dept, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方根据id查询部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getForObject(服务提供方地址(接口),返回类型.class)</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/get/&quot;</span> + id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方查询部门信息列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/list&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用RestTemplete先需要放入Spring容器中</p><p><strong>ConfigBean.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Configuration -- spring  applicationContext.xml</span></span><br><span class="line">    <span class="comment">//配置负载均衡实现RestTemplate</span></span><br><span class="line">    <span class="comment">// IRule</span></span><br><span class="line">    <span class="comment">// RoundRobinRule 轮询</span></span><br><span class="line">    <span class="comment">// RandomRule 随机</span></span><br><span class="line">    <span class="comment">// AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~</span></span><br><span class="line">    <span class="comment">// RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springcloud-provider-dept-8001的dao接口调用springcloud-api模块下的pojo，可使用在springcloud-provider-dept-8001的pom文件导入springcloud-api模块依赖的方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--我们需要拿到实体类，所以要配置api module--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springcloud-consumer-dept-80和springcloud-provider-dept-8001的pom.xml和父工程下的依赖基本一样，</p><h1 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h1><h4 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h4><ul><li>Netflix在涉及Eureka时，遵循的就是API原则.</li><li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li></ul><h4 id="原理理解"><a href="#原理理解" class="headerlink" title="原理理解"></a>原理理解</h4><ul><li><strong>Eureka基本的架构</strong><ul><li>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</li><li>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</li><li>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</li></ul></li></ul><ul><li>和Dubbo架构对比.<ul><li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li><li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li><li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li></ul></li></ul><ul><li><strong>三大角色</strong><ul><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li><li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li></ul></li></ul><h4 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h4><h5 id="1-eureka-server"><a href="#1-eureka-server" class="headerlink" title="1. eureka-server"></a>1. eureka-server</h5><ol><li><p>springcloud-eureka-7001 模块建立</p></li><li><p>pom.xml 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导包~--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># Eureka服务端的实例名字</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># fetch-registry如果为false,则表示自己为注册中心,客户端的化为 ture</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Eureka监控页面~</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;</span></span><br><span class="line">      <span class="string">eureka.instance.hostname&#125;:$&#123;</span></span><br><span class="line">      <span class="string">server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>源码中Eureka的默认端口以及访问路径:<br><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521130439891.png" alt="在这里插入图片描述"></p></li></ol><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/18/10:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 启动之后，访问 http://127.0.0.1:7001/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动成功后访问 <a href="http://localhost:7001/">http://localhost:7001/</a> </p><hr><h5 id="eureka-client"><a href="#eureka-client" class="headerlink" title="eureka-client"></a>eureka-client</h5><p><strong>调整之前创建的springlouc-provider-dept-8001</strong></p><ol><li><p>导入Eureca依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Eureka依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application中新增Eureca配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>为主启动类添加<a href="https://github.com/EnableEurekaClient">@EnableEurekaClient</a>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先启动7001服务端后启动8001客户端进行测试，然后访问监控页<a href="http://localhost:7001/">http://localhost:7001</a></p></li></ol><p>修改Eureka上的默认描述信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br></pre></td></tr></table></figure><p>如果此时停掉springcloud-provider-dept-8001 等<strong>30s</strong>后 监控会开启保护机制：</p><hr><p>配置关于服务加载的监控信息</p><p>pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--actuator完善监控信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml中添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># info配置</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="comment"># 项目的名称</span></span><br><span class="line"><span class="attr">app.name:</span> <span class="string">haust-springcloud</span></span><br><span class="line"><span class="comment"># 公司的名称</span></span><br><span class="line"><span class="attr">company.name:</span> <span class="string">河南科技大学西苑校区软件学院</span></span><br></pre></td></tr></table></figure><p> 此时刷新监控页，点击进入<br><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521130756988.png" alt="在这里插入图片描述"></p><p>跳转新页面显示如下内容：<br><img src="/2021/08/03/java-2021-08-03-springcloudKuang/2020112009562752.png" alt="在这里插入图片描述"></p><h5 id="EureKa自我保护机制：好死不如赖活着"><a href="#EureKa自我保护机制：好死不如赖活着" class="headerlink" title="EureKa自我保护机制：好死不如赖活着"></a>EureKa自我保护机制：好死不如赖活着</h5><p>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：<code>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.</code>从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li><li>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<code>eureka.server.enable-self-preservation=false</code>【不推荐关闭自我保护机制】</li></ul><p>详细内容可以参考下这篇博客内容：<a href="https://blog.csdn.net/wudiyong22/article/details/80827594">https://blog.csdn.net/wudiyong22/article/details/80827594</a></p><h5 id="4-注册进来的微服务，获取一些消息（团队开发会用到）"><a href="#4-注册进来的微服务，获取一些消息（团队开发会用到）" class="headerlink" title="4. 注册进来的微服务，获取一些消息（团队开发会用到）"></a>4. 注册进来的微服务，获取一些消息（团队开发会用到）</h5><p><strong>DeptController.java</strong>新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DiscoveryClient 可以用来获取一些配置的信息，得到具体的微服务！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一些注册进来的微服务的信息~，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/dept/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取微服务列表的清单</span></span><br><span class="line">    List&lt;String&gt; services = client.getServices();</span><br><span class="line">    System.out.println(<span class="string">&quot;discovery=&gt;services:&quot;</span> + services);</span><br><span class="line">    <span class="comment">// 得到一个具体的微服务信息,通过具体的微服务id，applicaioinName；</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                instance.getHost() + <span class="string">&quot;\t&quot;</span> + <span class="comment">// 主机名称</span></span><br><span class="line">                        instance.getPort() + <span class="string">&quot;\t&quot;</span> + <span class="comment">// 端口号</span></span><br><span class="line">                        instance.getUri() + <span class="string">&quot;\t&quot;</span> + <span class="comment">// uri</span></span><br><span class="line">                        instance.getServiceId() <span class="comment">// 服务id</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类中加入@EnableDiscoveryClient注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// @EnableEurekaClient 开启服务发现客户端的注解，可以用来获取一些配置的信息，得到具体的微服务</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图：<br><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201120101109857.png" alt="在这里插入图片描述"></p><h4 id="Eureka：集群环境配置"><a href="#Eureka：集群环境配置" class="headerlink" title="Eureka：集群环境配置"></a>Eureka：集群环境配置</h4><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201120102037473.png" alt="在这里插入图片描述"></p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>新建springcloud-eureka-7002、springcloud-eureka-7003 模块</p><p>1.为pom.xml添加依赖 (与springcloud-eureka-7001相同)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导包~--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入Eureka Server依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.application.yml配置(与springcloud-eureka-7001相同)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 监控页面~</span></span><br><span class="line">      <span class="comment"># 重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;</span></span><br><span class="line">    <span class="string">eureka.instance.hostname&#125;:$&#123;</span></span><br><span class="line">    <span class="string">server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>3.主启动类(与springcloud-eureka-7001相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/18/10:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 启动之后，访问 http://127.0.0.1:7003/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer_7003</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7003.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-集群成员相互关联"><a href="#2-集群成员相互关联" class="headerlink" title="2.集群成员相互关联"></a>2.集群成员相互关联</h5><p>模拟情况下，需要修改主机ip的对应地址为eureka700x.com</p><p>修改application.yml的配置，如图为springcloud-eureka-7001配置，springcloud-eureka-7002/springcloud-eureka-7003同样分别修改为其对应的名称即可<br><img src="/2021/08/03/java-2021-08-03-springcloudKuang/202005211312020.png" alt="在这里插入图片描述"></p><p>在集群中使springcloud-eureka-7001关联springcloud-eureka-7002、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7001下的application.yml如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment"># 集群（关联）：7001关联7002、7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><p>同时在集群中使springcloud-eureka-7002关联springcloud-eureka-7001、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7002下的application.yml如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#Eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#fetch-registry如果为false,则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面~</span></span><br><span class="line">      <span class="comment">#重写Eureka的默认端口以及访问路径 ---&gt;http://localhost:7001/eureka/</span></span><br><span class="line">      <span class="comment"># 单机： defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment"># 集群（关联）：7002关联7001、7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><p>springcloud-eureka-7003配置方式同理可得.</p><p>通过springcloud-provider-dept-8001下的yml配置文件，修改<strong>Eureka配置：配置服务注册中心地址</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册中心地址7001-7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br></pre></td></tr></table></figure><p>这样模拟集群就搭建好了，就可以把一个项目挂载到三个服务器上了</p><h4 id="对比和Zookeeper区别"><a href="#对比和Zookeeper区别" class="headerlink" title="对比和Zookeeper区别"></a>对比和Zookeeper区别</h4><h6 id="1-回顾CAP原则"><a href="#1-回顾CAP原则" class="headerlink" title="1. 回顾CAP原则"></a><strong>1. 回顾CAP原则</strong></h6><p>RDBMS (MySQL\Oracle\sqlServer) ===&gt; ACID</p><p>NoSQL (Redis\MongoDB) ===&gt; CAP</p><h6 id="2-ACID是什么？"><a href="#2-ACID是什么？" class="headerlink" title="2. ACID是什么？"></a><strong>2. ACID是什么？</strong></h6><ul><li>A (Atomicity) 原子性</li><li>C (Consistency) 一致性</li><li>I (Isolation) 隔离性</li><li>D (Durability) 持久性</li></ul><h6 id="3-CAP是什么"><a href="#3-CAP是什么" class="headerlink" title="3. CAP是什么?"></a><strong>3. CAP是什么?</strong></h6><ul><li>C (Consistency) 强一致性</li><li>A (Availability) 可用性</li><li>P (Partition tolerance) 分区容错性</li></ul><p>CAP的三进二：CA、AP、CP</p><h6 id="4-CAP理论的核心"><a href="#4-CAP理论的核心" class="headerlink" title="4. CAP理论的核心"></a><strong>4. CAP理论的核心</strong></h6><ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类<ul><li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li><li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul></li></ul><h6 id="5-作为分布式服务注册中心，Eureka比Zookeeper好在哪里？"><a href="#5-作为分布式服务注册中心，Eureka比Zookeeper好在哪里？" class="headerlink" title="5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？"></a><strong>5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？</strong></h6><p>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再A和C之间进行权衡。</p><ul><li>Zookeeper 保证的是 CP —&gt; 满足一致性，分区容错的系统，通常性能不是特别高</li><li>Eureka 保证的是 AP —&gt; 满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul><p><strong>Zookeeper保证的是CP</strong></p><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，<strong>服务注册功能对可用性的要求要高于一致性</strong>。但zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p><p><strong>Eureka保证的是AP</strong></p><p>Eureka看明白了这一点，因此在设计时就优先保证可用性。<strong>Eureka各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ul><li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ul><p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p><h1 id="Ribbon：负载均衡-基于客户端"><a href="#Ribbon：负载均衡-基于客户端" class="headerlink" title="Ribbon：负载均衡(基于客户端)"></a>Ribbon：负载均衡(基于客户端)</h1><p>Ribbon是什么？</p><ul><li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li><li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li></ul><p>Ribbon能干嘛？</p><ul><li>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</li><li>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</li><li>常见的负载均衡软件有 Nginx、Lvs 等等。</li><li>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</li><li>负载均衡简单分类：<ul><li>集中式LB<ul><li>即在服务的提供方和消费方之间使用独立的LB设施，如**Nginx(反向代理服务器)**，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li></ul></li><li>进程式 LB<ul><li>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li><li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li></ul></li></ul></li></ul><h4 id="6-2-集成Ribbon"><a href="#6-2-集成Ribbon" class="headerlink" title="6.2 集成Ribbon"></a>6.2 集成Ribbon</h4><p><strong>springcloud-consumer-dept-80</strong>向pom.xml中添加Ribbon和Eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml文件中配置Eureka</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向 Eureka注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 从三个注册中心中随机取一个去访问</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><p>主启动类加上<a href="https://github.com/EnableEurekaClient">@EnableEurekaClient</a>注解，开启Eureka</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义Spring配置类：ConfigBean.java 配置负载均衡实现RestTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Configuration -- spring  applicationContext.xml</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//配置负载均衡实现RestTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改conroller：DeptConsumerController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line"><span class="comment">//private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用Ribbon实现负载均衡"><a href="#使用Ribbon实现负载均衡" class="headerlink" title="使用Ribbon实现负载均衡"></a>使用Ribbon实现负载均衡</h4><p>流程图：</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521131315626.png" alt="在这里插入图片描述"></p><p>1.新建两个服务提供者Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-8002</p><p>2.参照springcloud-provider-dept-8001 依次为另外两个Moudle添加pom.xml依赖 、resourece下的mybatis和application.yml配置，Java代码</p><p>3.启动所有服务测试(根据自身电脑配置决定启动服务的个数)，访问<a href="http://eureka7001.com:7002/%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://eureka7001.com:7002/查看结果</a></p><p>测试访问<a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a> 这时候随机访问的是服务提供者8003</p><p>以上这种<strong>每次访问<a href="http://localhost/consumer/dept/list%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2">http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询</a></strong>，轮询算法在SpringCloud中可以自定义。</p><p><strong>如何切换或者自定义规则呢？</strong></p><p>在springcloud-provider-dept-80模块下的ConfigBean中进行配置，切换使用不同的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Configuration -- spring  applicationContext.xml</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IRule:</span></span><br><span class="line"><span class="comment">     * RoundRobinRule 轮询策略</span></span><br><span class="line"><span class="comment">     * RandomRule 随机策略</span></span><br><span class="line"><span class="comment">     * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~</span></span><br><span class="line"><span class="comment">     * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//使用随机策略</span></span><br><span class="line">        <span class="comment">//return new RoundRobinRule();//使用轮询策略</span></span><br><span class="line">        <span class="comment">//return new AvailabilityFilteringRule();//使用轮询策略</span></span><br><span class="line">        <span class="comment">//return new RetryRule();//使用轮询策略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以自定义规则，在myRule包下自定义一个配置类MyRule.java，注意：<strong>该包不要和主启动类所在的包同级，要跟启动类所在包同级</strong></p><p>MyRule.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/19/11:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRandomRule();<span class="comment">//默认是轮询RandomRule,现在自定义为自己的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类开启负载均衡并指定自定义的MyRule配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,configuration = MyRule.class)</span><span class="comment">//开启负载均衡,并指定自定义的规则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的规则(这里我们参考Ribbon中默认的规则代码自己稍微改动)：MyRandomRule.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRandomRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个服务访问5次则换下一个服务(总共3个服务)</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * total=0,默认=0,如果=5,指向下一个服务节点</span></span><br><span class="line"><span class="comment">     * index=0,默认=0,如果total=5,index+1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> total = <span class="number">0</span>;<span class="comment">//被调用的次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentIndex = <span class="number">0</span>;<span class="comment">//当前是谁在提供服务</span></span><br><span class="line">    <span class="comment">//@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers();<span class="comment">//获得当前活着的服务</span></span><br><span class="line">            List&lt;Server&gt; allList = lb.getAllServers();<span class="comment">//获取所有的服务</span></span><br><span class="line">            <span class="keyword">int</span> serverCount = allList.size();</span><br><span class="line">            <span class="keyword">if</span> (serverCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * No servers. End regardless of pass, because subsequent passes</span></span><br><span class="line"><span class="comment">                 * only get more restrictive.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//int index = chooseRandomInt(serverCount);//生成区间随机数</span></span><br><span class="line">            <span class="comment">//server = upList.get(index);//从或活着的服务中,随机获取一个</span></span><br><span class="line">            <span class="comment">//=====================自定义代码=========================</span></span><br><span class="line">            <span class="keyword">if</span> (total &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                server = upList.get(currentIndex);</span><br><span class="line">                total++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                total = <span class="number">0</span>;</span><br><span class="line">                currentIndex++;</span><br><span class="line">                <span class="keyword">if</span> (currentIndex &gt; upList.size()) &#123;</span><br><span class="line">                    currentIndex = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                server = upList.get(currentIndex);<span class="comment">//从活着的服务中,获取指定的服务来进行操作</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//======================================================</span></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only time this should happen is if the server list were</span></span><br><span class="line"><span class="comment">                 * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class="line"><span class="comment">                 * yielding.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Shouldn&#x27;t actually happen.. but must be transient or a bug.</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">chooseRandomInt</span><span class="params">(<span class="keyword">int</span> serverCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextInt(serverCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Feign：负载均衡-基于服务端"><a href="#Feign：负载均衡-基于服务端" class="headerlink" title="Feign：负载均衡(基于服务端)"></a>Feign：负载均衡(基于服务端)</h1><h4 id="1-Feign简介"><a href="#1-Feign简介" class="headerlink" title="1 Feign简介"></a>1 Feign简介</h4><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p><p><strong>只需要创建一个接口，然后添加注解即可~</strong></p><p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p><ol><li>微服务名字 【ribbon】</li><li>接口和注解 【feign】</li></ol><p><strong>Feign能干什么？</strong></p><ul><li>Feign旨在使编写Java Http客户端变得更容易</li><li>前面在使用<strong>Ribbon</strong> + <strong>RestTemplate</strong>时，利用<strong>RestTemplate</strong>对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，<strong>Feign</strong>在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li></ul><p><strong>Feign默认集成了Ribbon</strong></p><ul><li>利用<strong>Ribbon</strong>维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与<strong>Ribbon</strong>不同的是，通过<strong>Feign</strong>只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li></ul><h4 id="Feign的使用步骤"><a href="#Feign的使用步骤" class="headerlink" title="Feign的使用步骤"></a>Feign的使用步骤</h4><ol><li>创建springcloud-consumer-fdept-feign模块</li></ol><p>拷贝springcloud-consumer-dept-80模块下的pom.xml，resource，以及java代码到springcloud-consumer-feign模块，并添加feign依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过<strong>Ribbon</strong>实现：—原来的controller：<strong>DeptConsumerController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Auther</span>: csp1999</span><br><span class="line"><span class="meta">@Date</span>: <span class="number">2020</span>/<span class="number">05</span>/<span class="number">17</span>/<span class="number">22</span>:<span class="number">44</span></span><br><span class="line"><span class="meta">@Description</span>:</span><br><span class="line">*/</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 理解：消费者，不应该有service层~</span></span><br><span class="line"><span class="comment">     * RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中</span></span><br><span class="line"><span class="comment">     * (地址：url, 实体：Map ,Class&lt;T&gt; responseType)</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 提供多种便捷访问远程http服务的方法，简单的Restful服务模板~</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务提供方地址前缀</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    private static final String REST_URL_PREFIX = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_URL_PREFIX = <span class="string">&quot;http://SPRINGCLOUD-PROVIDER-DEPT&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方添加部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dept</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// postForObject(服务提供方地址(接口),参数实体,返回类型.class)</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/add&quot;</span>, dept, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方根据id查询部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getForObject(服务提供方地址(接口),返回类型.class)</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/get/&quot;</span> + id, Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方查询部门信息列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(REST_URL_PREFIX + <span class="string">&quot;/dept/list&quot;</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong>Feign</strong>实现：—改造后controller：<strong>DeptConsumerController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptClientService deptClientService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方添加部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dept</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptClientService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方根据id查询部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> deptClientService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费方查询部门信息列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptClientService.queryAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Feign和Ribbon二者对比，前者显现出面向接口编程特点，代码看起来更清爽，而且Feign调用方式更符合我们之前在做SSM或者SprngBoot项目时，Controller层调用Service层的编程习惯！<br><strong>主配置类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">// feign客户端注解,并指定要扫描的包以及配置接口DeptClientService</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;</span></span><br><span class="line"><span class="meta">      &quot;com.haust.springcloud&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 切记不要加这个注解，不然会出现404访问不到</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.haust.springcloud&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignDeptConsumer_80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignDeptConsumer_80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造springcloud-api模块</p><p>pom.xml添加feign依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Feign的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建service包，并新建DeptClientService.java接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span></span><br><span class="line"><span class="meta">@FeignClient(value = “SPRINGCLOUD-PROVIDER-DEPT”)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Feign和Ribbon如何选择？"><a href="#Feign和Ribbon如何选择？" class="headerlink" title="Feign和Ribbon如何选择？"></a>Feign和Ribbon如何选择？</h4><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</strong></p><p>Feign 本质上也是实现了 Ribbon，只不过后者是在调用方式上，为了满足一些开发者习惯的接口调用习惯！</p><p>下面我们关闭springcloud-consumer-dept-80 这个服务消费方，换用springcloud-consumer-dept-feign(端口还是80) 来代替：(依然可以正常访问，就是调用方式相比于Ribbon变化了)</p><h1 id="Hystrix：服务熔断"><a href="#Hystrix：服务熔断" class="headerlink" title="Hystrix：服务熔断"></a>Hystrix：服务熔断</h1><p>分布式系统面临的问题</p><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败</p><h4 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h4><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p><p>我们需要，<strong>弃车保帅</strong>！</p><h4 id="什么是Hystrix？"><a href="#什么是Hystrix？" class="headerlink" title="什么是Hystrix？"></a>什么是Hystrix？</h4><p><strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</p><p>“<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><h4 id="Hystrix能干嘛？"><a href="#Hystrix能干嘛？" class="headerlink" title="Hystrix能干嘛？"></a>Hystrix能干嘛？</h4><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控</li><li>…</li></ul><p>随着大容量通信量的增加，单个后端依赖项的潜在性会导致所有服务器上的所有资源在几秒钟内饱和。</p><p>应用程序中通过网络或客户端库可能导致网络请求的每个点都是潜在故障的来源。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，从而备份队列、线程和其他系统资源，从而导致更多跨系统的级联故障。</p><p>当使用<strong>Hystrix</strong>包装每个基础依赖项时，上面的图表中所示的体系结构会发生类似于以下关系图的变化。<strong>每个依赖项是相互隔离的</strong>，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：</p><p><strong>官网资料</strong>：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><h5 id="什么是服务熔断"><a href="#什么是服务熔断" class="headerlink" title="什么是服务熔断?"></a>什么是服务熔断?</h5><p><strong>熔断机制是赌赢雪崩效应的一种微服务链路保护机制</strong>。</p><p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p><p>服务熔断解决如下问题：</p><ul><li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li><li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li></ul><h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p>新建springcloud-provider-dept-hystrix-8001模块并拷贝springcloud-provider-dept–8001内的<strong>pom.xml、resource</strong>和Java代码进行初始化并调整。</p><p><strong>导入hystrix依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>调整yml配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="comment"># mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># springcloud-api 模块下的pojo包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.haust.springcloud.pojo</span></span><br><span class="line">  <span class="comment"># 本模块下的mybatis-config.xml核心配置文件类路径</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="comment"># 本模块下的mapper配置文件类路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"><span class="comment"># spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#项目名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-provider-dept</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 德鲁伊数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># Eureka配置：配置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 注册中心地址7001-7003</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">springcloud-provider-dept-hystrix-8001</span> <span class="comment">#修改Eureka上的默认描述信息</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#改为true后默认显示的是ip地址而不再是localhost</span></span><br><span class="line"><span class="comment">#info配置</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">haust-springcloud</span> <span class="comment">#项目的名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">com.haust</span> <span class="comment">#公司的名称</span></span><br></pre></td></tr></table></figure><p><strong>修改controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 提供Restful服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询部门信息</span></span><br><span class="line"><span class="comment">     * 如果根据id查询出现异常,则走hystrixGet这段备选代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;hystrixGet&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span><span class="comment">//根据id查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">get</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Dept dept = deptService.queryById(id);</span><br><span class="line">        <span class="keyword">if</span> (dept==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;这个id=&gt;&quot;</span>+id+<span class="string">&quot;,不存在该用户，或信息无法找到~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询备选方案(熔断)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">hystrixGet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dept().setDeptno(id)</span><br><span class="line">                .setDname(<span class="string">&quot;这个id=&gt;&quot;</span>+id+<span class="string">&quot;,没有对应的信息,null---@Hystrix~&quot;</span>)</span><br><span class="line">                .setDb_source(<span class="string">&quot;在MySQL中没有这个数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为主启动类添加对熔断的支持注解<a href="https://github.com/EnableCircuitBreaker">@EnableCircuitBreaker</a></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/17/22:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 服务发现~</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">// 添加对熔断的支持注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><p>使用熔断后，当访问一个不存在的id时，前台页展示数据如下:</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/202011211516091.png" alt="在这里插入图片描述"></p><p>而不适用熔断的springcloud-provider-dept–8001模块访问相同地址会出现下面状况</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132119757.png" alt="在这里插入图片描述"></p><p>因此，<strong>为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</strong></p><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><h5 id="什么是服务降级"><a href="#什么是服务降级" class="headerlink" title="什么是服务降级?"></a>什么是服务降级?</h5><p>服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，<strong>就是尽可能的把系统资源让给优先级高的服务</strong>。</p><p>资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p><p>服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。</p><p>降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p><p>由上图可得，<strong>当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级</strong>。</p><h5 id="服务降级需要考虑的问题"><a href="#服务降级需要考虑的问题" class="headerlink" title="服务降级需要考虑的问题"></a>服务降级需要考虑的问题</h5><ul><li>1）那些服务是核心服务，哪些服务是非核心服务</li><li>2）那些服务可以支持降级，那些服务不能支持降级，降级策略是什么</li><li>3）除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</li></ul><h5 id="自动降级分类"><a href="#自动降级分类" class="headerlink" title="自动降级分类"></a>自动降级分类</h5><p>1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p><p>2）失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p><p>3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p><p>4）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p><h5 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h5><p>在springcloud-api模块下的service包中新建降级配置类DeptClientServiceFallBackFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/20/9:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Hystrix服务降级 ~</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallBackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptClientService <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptClientService() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Dept()</span><br><span class="line">                        .setDeptno(id)</span><br><span class="line">                        .setDname(<span class="string">&quot;id=&gt;&quot;</span> + id + <span class="string">&quot;没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭&quot;</span>)</span><br><span class="line">                        .setDb_source(<span class="string">&quot;没有数据~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在DeptClientService中指定降级配置类DeptClientServiceFallBackFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册到spring容器中</span></span><br><span class="line"><span class="comment">//@FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,fallbackFactory = DeptClientServiceFallBackFactory.class)</span><span class="comment">//fallbackFactory指定降级配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">addDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>springcloud-consumer-dept-feign</strong>模块中开启降级：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向 Eureka注册自己</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 从三个注册中心中随机取一个去访问</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line"><span class="comment"># 开启降级feign.hystrix</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="服务熔断和降级的区别"><a href="#服务熔断和降级的区别" class="headerlink" title="服务熔断和降级的区别"></a>服务熔断和降级的区别</h4><ul><li><strong>服务熔断—&gt;服务端</strong>：某个服务超时或异常，引起熔断~，类似于保险丝(自我熔断)</li><li><strong>服务降级—&gt;客户端</strong>：从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个 FallBackFactory ，返回一个默认的值(缺省值)。会导致整体的服务下降，但是好歹能用，比直接挂掉强。</li><li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li><li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为<strong>自我熔断</strong>。</li></ul><p><strong>熔断，降级，限流</strong>：</p><p>限流：限制并发的请求访问量，超过阈值则拒绝；</p><p>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；</p><p>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</p><h4 id="Dashboard-流监控"><a href="#Dashboard-流监控" class="headerlink" title="Dashboard 流监控"></a>Dashboard 流监控</h4><p>新建springcloud-consumer-hystrix-dashboard模块</p><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Hystrix依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dashboard依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实体类+web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 开启Dashboard</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumerDashboard_9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptConsumerDashboard_9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">给springcloud-provider-dept-hystrix-<span class="number">8001</span>模块下的主启动类添加如下代码,添加监控</span><br><span class="line"></span><br><span class="line">​```java</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加一个 Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">hystrixMetricsStreamServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> HystrixMetricsStreamServlet());</span><br><span class="line">        <span class="comment">//访问该页面就是监控页面</span></span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p>进入监控页面：</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201121162143650.png" alt="在这里插入图片描述"></p><p>效果如下图：</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201121162412970.png" alt="在这里插入图片描述"></p><h1 id="Zull路由网关"><a href="#Zull路由网关" class="headerlink" title="Zull路由网关"></a>Zull路由网关</h1><p>什么是zuul?</p><p>Zull包含了对请求的<strong>路由</strong>(用来跳转的)和<strong>过滤</strong>两个最主要功能：</p><p>其中<strong>路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础</strong>，而过<strong>滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础</strong>。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201122103018821.png" alt="在这里插入图片描述"></p><p><strong>注意</strong>：Zuul 服务最终还是会注册进 Eureka</p><p><strong>提供</strong>：代理 + 路由 + 过滤 三大功能！</p><p>Zuul 能干嘛？</p><ul><li>路由</li><li>过滤</li></ul><p>官方文档：<a href="https://github.com/Netflix/zuul/">https://github.com/Netflix/zuul/</a></p><h4 id="入门案例-2"><a href="#入门案例-2" class="headerlink" title="入门案例"></a>入门案例</h4><p><strong>新建springcloud-zuul模块，并导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入zuul依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Hystrix依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dashboard依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Ribbon--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Eureka--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--实体类+web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.haust<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-zuul</span> <span class="comment">#微服务名称</span></span><br><span class="line"><span class="comment"># eureka 注册中心配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#实例的id</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">zuul9527.com</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 显示ip</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app.name:</span> <span class="string">haust.springcloud</span> <span class="comment"># 项目名称</span></span><br><span class="line">  <span class="attr">company.name:</span> <span class="string">河南科技大学西苑校区</span> <span class="comment"># 公司名称</span></span><br><span class="line"><span class="comment"># zull 路由网关配置</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment"># 路由相关配置</span></span><br><span class="line">  <span class="comment"># 原来访问路由 eg:http://www.cspStudy.com:9527/springcloud-provider-dept/dept/get/1</span></span><br><span class="line">  <span class="comment"># zull路由配置后访问路由 eg:http://www.cspstudy.com:9527/haust/mydept/dept/get/1</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.serviceId:</span> <span class="string">springcloud-provider-dept</span> <span class="comment"># eureka注册中心的服务提供方路由名称</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/mydept/**</span> <span class="comment"># 将eureka注册中心的服务提供方路由名称 改为自定义路由名称</span></span><br><span class="line">  <span class="comment"># 不能再使用这个路径访问了，*： 忽略,隐藏全部的服务名称~</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="comment"># 设置公共的前缀</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/haust</span></span><br></pre></td></tr></table></figure><p><strong>主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: csp1999</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/05/20/20:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Zull路由网关主启动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">// 开启Zuul</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication_9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201122104936500.png" alt="在这里插入图片描述"></p><p>上图是没有经过Zull路由网关配置时，服务接口访问的路由，可以看出直接用微服务(服务提供方)名称去访问，这样不安全，不能将微服务名称暴露！</p><p>所以经过Zull路由网关配置后，访问的路由为：</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20201122111703260.png" alt="在这里插入图片描述"></p><p>我们看到，微服务名称被替换并隐藏，换成了我们自定义的微服务名称mydept，同时加上了前缀haust，这样就做到了对路由fan访问的加密处理！</p><p>详情参考springcloud中文社区zuul组件 :<a href="https://www.springcloud.cc/spring-cloud-greenwich.html/#_router_and_filter_zuul">https://www.springcloud.cc/spring-cloud-greenwich.html#_router_and_filter_zuul</a></p><h1 id="Spring-Cloud-Config-分布式配置"><a href="#Spring-Cloud-Config-分布式配置" class="headerlink" title="Spring Cloud Config 分布式配置"></a>Spring Cloud Config 分布式配置</h1><p><strong>Dalston.RELEASE</strong></p><p><strong>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持</strong>。使用Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与Spring <code>Environment</code>和<code>PropertySource</code>抽象相同，因此它们与Spring应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。很容易添加替代实现，并使用Spring配置将其插入。</p><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><strong>分布式系统面临的–配置文件问题</strong></p><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。spring cloud提供了configServer来解决这个问题，我们每一个微服务自己带着一个application.yml，那上百个的配置文件修改起来，令人头疼！</p><p><strong>什么是SpringCloud config分布式配置中心？</strong></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/202005211322530.png" alt="在这里插入图片描述"></p><p>spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个<strong>中心化的外部配置</strong>。</p><p>spring cloud config 分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p><p>服务端也称为 <strong>分布式配置中心</strong>，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。</p><p>客户端则是<strong>通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息</strong>。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。</p><p><strong>spring cloud config 分布式配置中心能干嘛？</strong></p><ul><li>集中式管理配置文件</li><li>不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev /test /prod /beta /release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><p><strong>spring cloud config 分布式配置中心与GitHub整合</strong></p><p>由于spring cloud config 默认使用git来存储配置文件 (也有其他方式，比如自持SVN 和本地文件)，但是最推荐的还是git ，而且使用的是 http / https 访问的形式。</p><h4 id="入门案例-3"><a href="#入门案例-3" class="headerlink" title="入门案例"></a>入门案例</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><p>新建springcloud-config-server-3344模块导入pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resource下创建application.yml配置文件，Spring Cloud Config服务器从git存储库（必须提供）为远程客户端提供配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-server</span></span><br><span class="line">  <span class="comment"># 连接码云远程仓库</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment"># 注意是https的而不是ssh</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/cao_shi_peng/springcloud-config.git</span> </span><br><span class="line">            <span class="comment"># 通过 config-server可以连接到git，访问其中的资源以及配置~</span></span><br><span class="line"><span class="comment"># 不加这个配置会报Cannot execute request on any known server 这个错：连接Eureka服务端地址不对</span></span><br><span class="line"><span class="comment"># 或者直接注释掉eureka依赖 这里暂时用不到eureka</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">// 开启spring cloud config server服务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config_server_3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Config_server_3344.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将本地git仓库springcloud-config文件夹下新建的application.yml提交到码云仓库：</p><p>定位资源的默认策略是克隆一个git仓库（在<code>spring.cloud.config.server.git.uri</code>），并使用它来初始化一个迷你<code>SpringApplication</code>。小应用程序的<code>Environment</code>用于枚举属性源并通过JSON端点发布。</p><p>HTTP服务具有以下格式的资源：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/&#123;</span></span><br><span class="line">    <span class="string">application&#125;/&#123;</span></span><br><span class="line">    <span class="string">profile&#125;[/&#123;</span></span><br><span class="line">    <span class="string">label&#125;]</span></span><br><span class="line"><span class="string">/&#123;</span></span><br><span class="line">    <span class="string">application&#125;-&#123;</span></span><br><span class="line">    <span class="string">profile&#125;.yml</span></span><br><span class="line"><span class="string">/&#123;</span></span><br><span class="line">    <span class="string">label&#125;/&#123;</span></span><br><span class="line">    <span class="string">application&#125;-&#123;</span></span><br><span class="line">    <span class="string">profile&#125;.yml</span></span><br><span class="line"><span class="string">/&#123;</span></span><br><span class="line">    <span class="string">application&#125;-&#123;</span></span><br><span class="line">    <span class="string">profile&#125;.properties</span></span><br><span class="line"><span class="string">/&#123;</span></span><br><span class="line">    <span class="string">label&#125;/&#123;</span></span><br><span class="line">    <span class="string">application&#125;-&#123;</span></span><br><span class="line">    <span class="string">profile&#125;.properties</span></span><br></pre></td></tr></table></figure><p>其中“应用程序”作为<code>SpringApplication</code>中的<code>spring.config.name</code>注入（即常规的Spring Boot应用程序中通常是“应用程序”），“配置文件”是活动配置文件（或逗号分隔列表的属性），“label”是可选的git标签（默认为“master”）。</p><p>测试访问<a href="http://localhost:3344/application-dev.yml">http://localhost:3344/application-dev.yml</a></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132350566.png" alt="在这里插入图片描述"></p><p>测试访问 <a href="http://localhost:3344/application/test/master">http://localhost:3344/application/test/master</a></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132406474.png" alt="在这里插入图片描述"></p><p>测试访问 <a href="http://localhost:3344/master/application-dev.yml">http://localhost:3344/master/application-dev.yml</a></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132423447.png" alt="在这里插入图片描述"></p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h5><p>将本地git仓库springcloud-config文件夹下新建的config-client.yml提交到码云仓库：</p><p>新建一个springcloud-config-client-3355模块，并导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--config--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resources下创建application.yml和bootstrap.yml配置文件</p><p><strong>bootstrap.yml</strong> 是系统级别的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统级别的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-client</span> <span class="comment"># 需要从git上读取的资源名称，不要后缀</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br></pre></td></tr></table></figure><p><strong>application.yml</strong> 是用户级别的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户级别的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springcloud-config-client</span></span><br></pre></td></tr></table></figure><p>创建controller包下的<strong>ConfigClientController.java</strong> 用于测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName; <span class="comment">//获取微服务名称</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String eurekaServer; <span class="comment">//获取Eureka服务</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port; <span class="comment">//获取服务端的端口号</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/config&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;applicationName:&quot;</span>+applicationName +</span><br><span class="line">         <span class="string">&quot;eurekaServer:&quot;</span>+eurekaServer +</span><br><span class="line">         <span class="string">&quot;port:&quot;</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClient.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p>启动服务端Config_server_3344 再启动客户端ConfigClient</p><p>访问：<a href="http://localhost:8201/config/">http://localhost:8201/config/</a></p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132534867.png" alt="在这里插入图片描述"></p><p><strong>小案例</strong></p><p>本地新建config-dept.yml和config-eureka.yml并提交到码云仓库</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132550150.png" alt="在这里插入图片描述"></p><p>这里配置文件内容不再列举直接到代码中看把。</p><p>新建springcloud-config-eureka-7001模块，并将原来的springcloud-eureka-7001模块下的内容拷贝的该模块。</p><p>1.清空该模块的application.yml配置，并新建bootstrap.yml连接远程配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-eureka</span> <span class="comment"># 仓库中的配置文件名称</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br></pre></td></tr></table></figure><p>2.在pom.xml中添加spring cloud config依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--config--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-config --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//EnableEurekaServer 服务端的启动类，可以接受别人注册进来~</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigEurekaServer_7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigEurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试</p><p>第一步：启动 Config_Server_3344，并访问 <a href="http://localhost:3344/master/config-eureka-dev.yml">http://localhost:3344/master/config-eureka-dev.yml</a> 测试</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/2020052113262082.png" alt="在这里插入图片描述"></p><p>第二部：启动ConfigEurekaServer_7001，访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 测试</p><p><img src="/2021/08/03/java-2021-08-03-springcloudKuang/20200521132633925.png" alt="在这里插入图片描述"></p><p>显示上图则成功</p><p>新建springcloud-config-dept-8001模块并拷贝springcloud-provider-dept-8001的内容</p><p>同理导入spring cloud config依赖、清空application.yml 、新建bootstrap.yml配置文件并配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config-dept</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//在服务启动后自动注册到Eureka中！</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//服务发现~</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigDeptProvider_8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigDeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加一个 Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">hystrixMetricsStreamServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> HystrixMetricsStreamServlet());</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>转载自:<a href="https://www.kuangstudy.com/bbs/1374942542566551554%EF%BC%8C%E9%81%B5%E5%BE%AA[CC">https://www.kuangstudy.com/bbs/1374942542566551554，遵循[CC</a> 4.0 BY-SA](<a href="https://creativecommons.org/licenses/by-sa/4.0/)%E7%89%88%E6%9D%83%E5%8D%8F%E8%AE%AE">https://creativecommons.org/licenses/by-sa/4.0/)版权协议</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;SpringCloud五大组件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务注册与发现:Netflix Eureka&lt;/li&gt;
&lt;li&gt;负载均衡:&lt;ul</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="笔记" scheme="http://stary2020.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="springCloud" scheme="http://stary2020.gitee.io/tags/springCloud/"/>
    
    <category term="狂神" scheme="http://stary2020.gitee.io/tags/%E7%8B%82%E7%A5%9E/"/>
    
  </entry>
  
  <entry>
    <title>面试题(第一季)</title>
    <link href="http://stary2020.gitee.io/2021/08/02/java-2021-08-02-faceQuestion/"/>
    <id>http://stary2020.gitee.io/2021/08/02/java-2021-08-02-faceQuestion/</id>
    <published>2021-08-02T07:12:51.000Z</published>
    <updated>2021-08-19T02:35:04.922Z</updated>
    
    <content type="html"><![CDATA[<p>参考尚硅谷教学视频:<a href="https://www.bilibili.com/video/BV1Eb411P7bP?spm_id_from=333.788.b_636f6d6d656e74.25">https://www.bilibili.com/video/BV1Eb411P7bP?spm_id_from=333.788.b_636f6d6d656e74.25</a></p><p>转载自:<a href="https://blog.csdn.net/qq_42999092/article/details/109068522">https://blog.csdn.net/qq_42999092/article/details/109068522</a></p><h1 id="Java-SE"><a href="#Java-SE" class="headerlink" title="Java SE"></a>Java SE</h1><h2 id="自增变量"><a href="#自增变量" class="headerlink" title="自增变量"></a>自增变量</h2><p>i++与++i</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">     i=i++;</span><br><span class="line">     <span class="keyword">int</span> j=i++;</span><br><span class="line">     <span class="keyword">int</span> k=i+ ++i*i++;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">     System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">     System.out.println(<span class="string">&quot;k=&quot;</span>+k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">4</span></span><br><span class="line">j=<span class="number">1</span></span><br><span class="line">k=<span class="number">11</span></span><br></pre></td></tr></table></figure><p><code> int k=i+ ++i*i++;</code>过程:</p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014103557836.png" alt="在这里插入图片描述"></p><p>小结:</p><p>赋值=，最后计算</p><p>=右边的从左到右加载值依次压入操作数栈</p><p>实际先算哪个，看运算符优先级</p><p>自增、自减操作都是直接修改变量值，不经过操作数栈</p><p>最后的赋值之前，临时结果也是存储在操作数栈中。</p><p>详情参考JVM虚拟机指令</p><h2 id="单例设计模式-具体可参见设计模式，必须掌握"><a href="#单例设计模式-具体可参见设计模式，必须掌握" class="headerlink" title="单例设计模式(具体可参见设计模式，必须掌握)"></a>单例设计模式(具体可参见设计模式，必须掌握)</h2><p>单例模式:Singleton，即某个类在整个系统中只能有一个实例对象可被获取和使用的代码模式。如代表JVM运行环境的Runtime类。</p><p>要点:</p><p>一是某个类只能有一个实例，构造器私有化。二是他必须自行创建实例，含有一个该类的静态变量来保存这个唯一的实例。三是他必须自行向整个系统提供这个实例，对外提供该类实例的方式:直接暴露、用静态变量的get方法获取。</p><h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h3><p>直接创建对象，不存在线程安全问题</p><ul><li><p>直接实例化饿汉式(简介直观)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、构造器私有化</span></span><br><span class="line"><span class="comment">     * 2、自行创建，并且用静态变量保存</span></span><br><span class="line"><span class="comment">     * 3、向外提供实例</span></span><br><span class="line"><span class="comment">     * 4、强调这是一个单例，我们可以用final修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 INSTANCE = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举式(最简洁)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类型：表示该类型是有限的几个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态代码块饿汉式(适合复杂实例化对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton3 INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> Singleton3(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h3><p>延迟创建对象</p><ul><li><p>线程不安全(使用于单线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、构造器私有化</span></span><br><span class="line"><span class="comment">     * 2、用一个静态变量保存这个唯一的实例</span></span><br><span class="line"><span class="comment">     * 3、提供一个静态方法，获取这个实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Singleton4 instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程安全(使用于多线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、构造器私有化</span></span><br><span class="line"><span class="comment">     * 2、用一个静态变量保存这个唯一的实例</span></span><br><span class="line"><span class="comment">     * 3、提供一个静态方法，获取这个实例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> Singleton5 instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton5.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton5();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态内部类模式 (适用于多线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、内部类被加载和初始化时，才创建INSTANCE实例对象</span></span><br><span class="line"><span class="comment">     * 2、静态内部类不会自动创建,随着外部类的加载初始化而初始化，他是要单独去加载和实例化的</span></span><br><span class="line"><span class="comment">     * 3、因为是在内部类加载和初始化时，创建的，因此线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton6</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton6 INSTANCE = <span class="keyword">new</span> Singleton6();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="类初始化实例初始化"><a href="#类初始化实例初始化" class="headerlink" title="类初始化实例初始化"></a>类初始化实例初始化</h2><p>类初始化</p><blockquote><p>一个类要创建实例需要先加载并初始化该类<br>main方法所在的类需要先加载和初始化<br>一个子类要初始化需要先初始化父类<br>一个类初始化就是执行 clinit 方法<br>clinit 方法由静态类变量显示赋值代码和静态代码块组成<br>类变量显示赋值代码和静态代码块代码从上到下执行<br>clinit 方法只调用一次</p></blockquote><p>实例初始化过程</p><blockquote><p>实例初始化就是执行 init() 方法<br>init () 方法可能重载有多个，有几个构造器就有几个 init() 方法<br>init() 方法由非静态实例变量显示赋值代码和非静态代码块，对应构造器代码组成非静态实例变量显示赋值代码和非静态代码块从上到下顺序执行，而对应构造器的代码最后执行<br>每次创建实例对象，调用对应构造器，执行的就是对应的 ini方法<br>init 方法的首行是super()和super(实参列表) ,即对应父类的 init 方法</p></blockquote><p>Father.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.classLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类初始化&lt;clinit&gt;</span></span><br><span class="line"><span class="comment"> * 1、j = method()</span></span><br><span class="line"><span class="comment"> * 2、 父类的静态代码块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 父类实例化方法:</span></span><br><span class="line"><span class="comment"> * 1、super()（最前）</span></span><br><span class="line"><span class="comment"> * 2、i = test() (9)</span></span><br><span class="line"><span class="comment"> * 3、子类的非静态代码块 (3)</span></span><br><span class="line"><span class="comment"> * 4、子类的无参构造（最后）(2)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 非静态方法前面其实有一个默认的对象this</span></span><br><span class="line"><span class="comment"> * this在构造器或&lt;init&gt; 他表示的是正在创建的对象，因为咱们这里是正在创建Son对象，所以</span></span><br><span class="line"><span class="comment"> * test()执行的就是子类重写的代码(面向对象多态)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这里i=test() 执行的就是子类重写的test()方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-09-25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = test();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> j = method();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(1)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Father() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(2)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(3)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(4)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(5)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Son.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.classLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类的初始化&lt;clinit&gt;</span></span><br><span class="line"><span class="comment"> * 1、j = method()</span></span><br><span class="line"><span class="comment"> * 2、子类的静态代码块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 先初始化父类 (5)(1)</span></span><br><span class="line"><span class="comment"> * 初始化子类 (10) (6)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 子类实例化方法:</span></span><br><span class="line"><span class="comment"> * 1、super()（最前</span></span><br><span class="line"><span class="comment"> * 2、i = test() (9)</span></span><br><span class="line"><span class="comment"> * 3、子类的非静态代码块 (8)</span></span><br><span class="line"><span class="comment"> * 4、子类的无参构造（最后）(7)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-09-25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = test();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> j = method();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(6)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Son() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;(7)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(8)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(9)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(10)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        System.out.println();</span><br><span class="line">        Son son1 = <span class="keyword">new</span> Son();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法参数传递机制"><a href="#方法参数传递机制" class="headerlink" title="方法参数传递机制"></a>方法参数传递机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.methodParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-09-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        String str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Integer num = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        MyData my = <span class="keyword">new</span> MyData();</span><br><span class="line"></span><br><span class="line">        change(i,str,num,arr,my);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr my变了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i= &quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;str= &quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;num= &quot;</span> + num);</span><br><span class="line">        System.out.println(<span class="string">&quot;arr= &quot;</span> + Arrays.toString(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;my.a= &quot;</span> + my.a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> j, String s, Integer n, <span class="keyword">int</span>[] a, MyData m)</span> </span>&#123;</span><br><span class="line">        j += <span class="number">1</span>;</span><br><span class="line">        s += <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        n += <span class="number">1</span>;</span><br><span class="line">        a[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">        m.a += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考点:<br>方法的参数传递机制</p><p>String、包装类等对象的不可变性</p><h4 id="方法的参数传递机制"><a href="#方法的参数传递机制" class="headerlink" title="方法的参数传递机制"></a>方法的参数传递机制</h4><p>1、形参是基本的数据类型:传递数据值</p><p>2、实参是引用数据类型:传递值地址</p><h2 id="递归与迭代"><a href="#递归与迭代" class="headerlink" title="递归与迭代"></a>递归与迭代</h2><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p>考点:<br>就近原则</p><p>变量的分类</p><p>成员变量:类变量、实例变量</p><p>局部变量</p><p>非静态代码块的执行:每次创建实例对象都会执行</p><p>方法的调用规则:调用一次执行一次</p><p>局部变量与成员变量区别</p><ol><li><p>声明的位置</p><ul><li>局部变量:方法体{}中，形参，代码块{}中</li><li>成员变量:类方法外</li><li>类变量:有static修饰</li><li>实例变量:没有static修饰</li></ul></li><li><p>修饰符</p><ul><li>局部变量:final</li><li>成员变量:public、protected、private、final、static、volatile、transient、</li></ul></li><li><p>值存储位置</p><ul><li>局部变量:栈</li><li>实例变量:堆</li><li>类变量:方法区</li></ul><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014104703729.png" alt="JVM 运行时数据区"></p><p>堆(heap)，此内存区域的唯一目的就是存放实例对象，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是:所有的对象实例以及数组都要在堆上分配。</p><p>提倡所说的栈(stack)，是指虚拟机栈。虚拟机栈用于存储局部变量表等。局部变量表存放了编译期可知长度的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型，它不等同于对象本身，是对象在堆内存的首地址)。方法执行完，自动释放。</p><p>方法区(Method Area)用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</p></li><li><p>作用域:</p><ul><li>局部变量从声明处开始，到所属的}号结束</li><li>实例变量:在当前类中this(有时候this可以省略)，在其他类对象中，对象名.访问</li><li>类变量:在当前类中，类名(有时类名可以省略)，在其他类中:类名.(或对象名.访问)</li></ul></li><li><p>生命周期</p><ul><li>局部变量:每一个线程，每一次调用执行都是新的生命周期</li><li>实例变量:随着对象的初始化而初始化，随着对象的被回收而消亡，每一个对象的实例变量都是独立的类变量:随着类的初始化而初始化，随着类的卸载而消亡，该类的所有对象的类变量是共享的<ul><li>当局部变量与某变量重名时如姐区分?<ul><li>与实例变量重名:在成员变量前加this</li><li>与类变量重名:在类变量前加类名</li></ul></li></ul></li></ul></li></ol><h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h1><h2 id="Spring中支持的常用数据库事务传播属性和事务隔离级别"><a href="#Spring中支持的常用数据库事务传播属性和事务隔离级别" class="headerlink" title="Spring中支持的常用数据库事务传播属性和事务隔离级别"></a>Spring中支持的常用数据库事务传播属性和事务隔离级别</h2><h3 id="1-事务的传播行为"><a href="#1-事务的传播行为" class="headerlink" title="1. 事务的传播行为"></a>1. 事务的传播行为</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播，例如方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行，事务传播的行为有传播属性指定，spring中定义了7种类传播行为</p><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则就启动一个新的事务，并在自己的事务内运行</td></tr><tr><td>REQUIRED_NEW</td><td>当前方法必须启动事务，并在它自己的事务内运行，如果有事务正在运行，应该将他挂起</td></tr><tr><td>SUPPORTS</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则他可以不运行在事务中</td></tr><tr><td>NOT_SUPPORTE</td><td>当前的方法不应该运行在事务中，如果有运行的事务，将他挂起</td></tr><tr><td>MANDATORY</td><td>当前的方法必须运行在事务内部，如果没有正在运行的事务，就抛出异常</td></tr><tr><td>NEVER</td><td>当前方法不应该运行在事务中，如果有运行的事务，就抛出异常</td></tr><tr><td>NESTED</td><td>如果有事务在运行，当前的方法就应该在这个事物的嵌套事务内运行，否则，就启动一个新的事务，并在它自己的事务内运行</td></tr></tbody></table><p>事务传播属性可以在@Transactional注解的propagation属性中定义</p><h3 id="2-事务隔离级别"><a href="#2-事务隔离级别" class="headerlink" title="2. 事务隔离级别"></a>2. 事务隔离级别</h3><h4 id="数据库事务并发问题"><a href="#数据库事务并发问题" class="headerlink" title="数据库事务并发问题:"></a>数据库事务并发问题:</h4><p>假设现在有两个事务:Transaction01和Transaction02并发执行</p><ul><li>脏读<br>02读取了01更新后的值后，01回滚，此时02读取到的值便无效了</li><li>不可重复读<br>01读取值后，02将该值修改，01再次读数，两次读数不一致</li><li>幻读<br>01读取了一部分数据，然后02又插入了一些新的数据，01再读时，数据增加</li></ul><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别:"></a>隔离级别:</h4><p>数据库系统必须具有隔离并发运行各个事务的能力，使他们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同的隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><ol><li><p>读未提交:READ UNCOMMITTED<br>允许Transaction01读取Transaction02未提交的修改。</p></li><li><p>读已提交：READ COMMITTED<br> 要求Transaction01只能读取Transaction02已提交的修改。</p></li><li><p>可重复读：REPEATABLE READ<br> 确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</p></li><li><p>串行化：SERIALIZABLE<br> 确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p></li><li><p>各个隔离级别解决并发问题的能力见下表</p></li></ol><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014104905860.png" alt="在这里插入图片描述"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.请简单介绍Spring支持的常用数据库事务传播属性和事务隔离级别？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务的属性：</span></span><br><span class="line"><span class="comment"> * 1.★propagation：用来设置事务的传播行为</span></span><br><span class="line"><span class="comment"> * 事务的传播行为：一个方法运行在了一个开启了事务的方法中时，当前方法是使用原来的事务还是开启一个新的事务</span></span><br><span class="line"><span class="comment"> * -Propagation.REQUIRED：默认值，使用原来的事务</span></span><br><span class="line"><span class="comment"> * -Propagation.REQUIRES_NEW：将原来的事务挂起，开启一个新的事务</span></span><br><span class="line"><span class="comment"> * 2.★isolation：用来设置事务的隔离级别</span></span><br><span class="line"><span class="comment"> * -Isolation.REPEATABLE_READ：可重复读，MySQL默认的隔离级别</span></span><br><span class="line"><span class="comment"> * -Isolation.READ_COMMITTED：读已提交，Oracle默认的隔离级别，开发时通常使用的隔离级别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><p>整体流程</p><p>SpringMVC框架是一个基于请求驱动的Web框架，并且使用了”前端控制器”模型来进行设计，再根据”请求映射规则”分发给响应的页面控制器进行处理。</p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/2020101410495014.png" alt="在这里插入图片描述"></p><p>具体步骤:</p><ol><li>首先晕乎乎发送请求到前端控制器，前端控制器根据请求信息(如URL)来决定选择哪一个页面控制器进行处理并把请求托付给它，即以前的控制器的逻辑控制部分</li><li>页面控制器收到请求后，进行功能处理，首先需要收集和绑定请求参数到一个对象，这个对象在Spring web MVC中叫命令，并进行验证，然后将命令对象委托给业务对象进行处理，处理完毕后返回一个ModelAndView</li><li>前端控制器收回控制权，然后根据返回的逻辑视图名，选择相应的视图进行渲染，并把模型数据传入以便视图渲染</li><li>前端控制器再次收回控制权，将响应返回给用户，至此整个结束</li></ol><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014105003756.png" alt="在这里插入图片描述"></p><p>步骤:</p><ol><li>发起请求到前端控制器(DispatcherServlet)</li><li>前端控制器请求HandlerMapping查找Handle(可以根据xml配置、注解进行查找)</li><li>处理器映射器HandlerMapping向前端控制器返回Handler，HandlerMapping会把请求映射为HandlerExecutionChain对象(包含一个Handler处理器(页面控制)对象，对个HandlerInterceptor拦截器)，通过这种策略模式，很容易添加新的映射策略</li><li>前端控制器调用处理器适配器去执行Handler</li><li>处理器适配器HandlerAdapter将会根据适配的结果去执行Handler</li><li>Handler执行完成给适配器返回ModelAndView</li><li>处理器适配器向前端控制器返回ModelAndView</li><li>前端控制器请求视图解析器去进行视图解析(根据逻辑视图名解析成为真正的视图)，通过这种策略很容易更换其他视图技术，只需要更改视图解析器即可。</li><li>视图解析器向前端控制器返回View</li><li>前端控制器进行视图渲染(视图渲染将模型数据(在ModelAndView对象中)填充到request域)</li><li>前端控制器向用户响应结果</li></ol><h4 id="核心开发步骤"><a href="#核心开发步骤" class="headerlink" title="核心开发步骤"></a>核心开发步骤</h4><ol><li>DispatcherServlet在web.xml中的部署描述，从而拦截请求到Spring web MVC</li><li>HandlerMapping的配置，从而将请求映射到处理器</li><li>HandlerAdapter的配置，从而支持多种类型的处理器<br>ps:处理器映射和适配器使用纾解的话包含在了注解驱动中，不需要再单独配置</li><li>ViewResolver的配置，从而将逻辑视图名解析为具体视图技术</li><li>处理器(页面控制器)的配置，从而解析功能处理<br>View是一个接口，实现类支持不同的View类型</li></ol><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h4 id="MyBatis中当实体类中的属性名和表中的字段不一样，怎么办"><a href="#MyBatis中当实体类中的属性名和表中的字段不一样，怎么办" class="headerlink" title="MyBatis中当实体类中的属性名和表中的字段不一样，怎么办?"></a>MyBatis中当实体类中的属性名和表中的字段不一样，怎么办?</h4><p>解决方案:</p><ol><li><p>写SQL语句的时候，写别名</p></li><li><p>在MyBatis的全局配置文件中开启驼峰命名规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启驼峰命名规则，可以将数据库中下划线映射为驼峰命名</span></span><br><span class="line"><span class="comment">列如 last_name 可以映射为 lastName</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCameLCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>要求:数据库字段中含有下划线</p></li><li><p>在Mapper映射文件中使用resultMap自定义映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">自定义映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.pojo.Employee&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射主键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">cloumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射其他列 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;last_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">property</span>=<span class="string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Java高级面试题"><a href="#Java高级面试题" class="headerlink" title="Java高级面试题"></a>Java高级面试题</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>常用命令:进程类<br><code>Service(centos6)</code></p><p>注册在系统中的标准化程序，有方便统一的管理方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">service服务名start</span><br><span class="line">service服务名stop</span><br><span class="line">service服务名restart</span><br><span class="line">service服务名reload</span><br><span class="line">service服务名status</span><br><span class="line"></span><br><span class="line">#查看服务的方法 /etc/init.d/ 服务名</span><br><span class="line">#通过 chkconfig 命令设置自启动</span><br><span class="line">#查看服务 chkconfig -list l grepXXX</span><br><span class="line"></span><br><span class="line">chkconfig -level 5 服务名on</span><br></pre></td></tr></table></figure><hr><p>运行级别:runlevel(centos6)</p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/2020101410522554.png" alt="在这里插入图片描述"></p><p>linux系统有7种运行级别(runlevel)，最常用的是3和5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运行级别0:系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</span><br><span class="line">运行级别1:单用户工作状态，root权限，用于系统维护，禁止远程登陆</span><br><span class="line">运行级别2:多用户状态(没有NFS),不支持网络</span><br><span class="line">运行级别3:完全的多用户状态(有NFS),登陆后进入控制台命令行模式</span><br><span class="line">运行级别4:系统未使用，保留</span><br><span class="line">运行级别5: X11控制台，登陆后进入图形GUI模式</span><br><span class="line">运行级别6:系统正常关闭并重启，默认运行级别不能设为6,否则不能正常启动.</span><br></pre></td></tr></table></figure><hr><p><code>Systemctl(centos7)</code></p><p>注册在系统中的标准化程序，有方便统一的管理方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">systemctl start 服务名(xxx.service</span><br><span class="line">systemct restart 服务名(xxxx.service)</span><br><span class="line">systemctl stop 服务名(xxxx.service)</span><br><span class="line">systemctl reload 服务名(xxxx.service)</span><br><span class="line">systemctl status 服务名(xxxx.service)</span><br><span class="line"></span><br><span class="line">#查看服务的方法 /usr/lib/systemd/system</span><br><span class="line">#查看服务的命令</span><br><span class="line"></span><br><span class="line">systemctl list-unit-files</span><br><span class="line">systemctl --type service</span><br><span class="line"></span><br><span class="line">#通过systemctl命令设置自启动</span><br><span class="line"></span><br><span class="line">自启动systemctl enable service_ _name</span><br><span class="line">不自启动systemctl disable service_ name</span><br></pre></td></tr></table></figure><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>创建分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;分支名&gt;</span><br><span class="line">git branch -v 查看分支</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;分支名&gt;</span><br><span class="line">一步完成: git checkout -b &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>合并分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先切换到主干 git checkout master</span><br><span class="line">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先切换到主干 git checkout master</span><br><span class="line">git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure><p>Git工作流:</p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014105249439.png" alt="在这里插入图片描述"></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>Redis持久化有几种类型，他们的区别?</p><p>Redis提供了2个不同形式的持久化方式</p><ul><li>RDB(Redis DataBase)</li><li>AOF(Append OF File)</li></ul><hr><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p><strong>备份如何执行?</strong></p><p>Redis会单独创建(fork)个子进程来进行持久化，先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何的IO操作，这就确保了极高的性能，如果需要进行大规模数据的恢复，若对数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p><strong>RDB的保存文件</strong></p><p>在Redis.conf中配置文件名称，默认为dump.rdb。rdb文件的保存路径，也可以修改，默认为Redis启动命令所在的目录下</p><p><strong>RDB的备份</strong></p><p>先通过<code>config get dir</code>查询RDB文件的目录，将*.rdb的文件拷贝到别的地方</p><p><strong>RDB的恢复</strong></p><p>关闭Redis，先把备份文件拷贝到工作目录下，启动Redis，备份数据会直接加载。</p><p><strong>RDB的优点</strong></p><p>节省磁盘空间</p><p>恢复速度更快</p><p><strong>RDB的缺点</strong></p><p>虽然Redis在fork时使用了写时拷贝技术，但是如果数据庞大时，还是比较消耗性能。在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次，以完成数据的恢复工作</p><p><strong>Rewrite</strong></p><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集可以使用命令bgrewriteaof</p><p><strong>Redis如何实现重写</strong></p><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件写(也是先写临时文件最后在rename)，遍历新进程的内存中数据，记录每一条的set语句。写AAOF文件的操作，并读取旧的AOF文件，将整个内存中的数据库内容用命令的方式写一个新的aof文件，这点和快照优点类似。</p><p><strong>何时重写</strong></p><p>写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是由一定的负担的，因此设定Redis要满足一定的条件才会重写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto- aof- rewrite- percentage 100</span><br><span class="line">auto- aof- rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>系统载入时或上次重写完毕时，Redis会记录此时AOF大小，设为base size，如果Redis的AOF当前大小&gt;=base size+base_size*100%(默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。</p><p><strong>AOF的优点</strong></p><p>备份机制更稳健，丢失数据概率更低。可读的日志文本，通过操作AOF文件，可以处理误操作。</p><p><strong>AOF的缺点</strong></p><p>比起RDB占用更多的磁盘空间。恢复备份速度要慢。每次读写都同步的话，有一定的性能压力。存在个别bug，造成不能恢复。</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p><strong>MySQL什么时候建立索引、什么时候不适合建立索引?</strong></p><p>那些情况需要创建索引:</p><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外检关系建立索引</li><li>频繁更新的字段不适合创建索引，因为每次更新不单是更新了记录还会更新索引</li><li>单键组索引的选择问题，who?在高并发下领向创建组合索引</li><li>查询中排序的字段，排序字段若通过索引法访问将大大提高排序速度</li><li>查询中统计或者分组字段</li></ol><p>那些情况下不要建立索引</p><ol><li>表记录太少。原因:提高了查询速度，同时却会降低更新表的速度，如对表进行INSTER、UPDATE和DELETE</li><li>经常增删改的表。原因:更新表时，MySQL不仅要保存数据，还要保存一下索引文件数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。</li><li>注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li></ol><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/2020101410564535.png" alt="在这里插入图片描述"></p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><strong>JVM垃圾回收机制、GC发生在JVM哪部分，有几种GC，他们的算法是什么</strong></p><p>GC发生在JVM的堆里面</p><p>有Monit GC、Major GC。具体有:CMS、G1、serial、……，算法有标记压缩、标记复制、标记清除。</p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014105709667.png" alt="在这里插入图片描述"></p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014105716599.png" alt="在这里插入图片描述"></p><h2 id="项目面试题"><a href="#项目面试题" class="headerlink" title="项目面试题"></a>项目面试题</h2><h3 id="Redis在项目中的使用场景"><a href="#Redis在项目中的使用场景" class="headerlink" title="Redis在项目中的使用场景"></a>Redis在项目中的使用场景</h3><table><thead><tr><th>数据类型</th><th align="center">使用场景</th></tr></thead><tbody><tr><td>String</td><td align="center">比如说，我想知道什么时候封锁一个 IP 地址 Incrby 命令</td></tr><tr><td>Hash</td><td align="center">存储用户信息[ id, name , age]<br>Hset( key ,field, value)<br>Hset( key ,id, 101)<br>Hset( key ,name, admin)<br>Hset( key ,age, 23)<br>修改案例———<br>Hget(userKev,jd)+<br>Hset(userKey,id,102)<br>为什么不使用String类型来存储 String拿到对象值之后需要反序列化，我们只需要更改id name, age 没有意义反序列化<br>Set(userKey;用信息的字符串)<br>Get(userKey)<br>不建议使用String 类型。</td></tr><tr><td>List</td><td align="center">实现最新消息的排行，还可以利用 List 的 push 命令，将任务存在list集合<br>中，同时使用另-个命令，将任务从集合中取出[ pop ]。。<br>Redis - List 数据类型来模拟消息队列。[电商中的秒杀就可以采用这种方式<br>来完成一个秒杀活动]。</td></tr><tr><td>Set</td><td align="center">特殊之处:可以自动排重。比如说微博中将每个人的好友存在集合( Set) 中，+<br>这样求两个人的共通好友的操作。我们只需要求交集即可。</td></tr><tr><td>Zset</td><td align="center">以某一个条件为权重，进行排序。<br>京东:商品详情的时候，都会有一个综合排名，还可以按照价格进行排名</td></tr></tbody></table><h3 id="Elasticsearch与solr的区别"><a href="#Elasticsearch与solr的区别" class="headerlink" title="Elasticsearch与solr的区别"></a>Elasticsearch与solr的区别</h3><p>背景:他们都是基于Lucene搜索服务器基础上开发的，一款优秀的高性能企业级搜索服务器(都是基于分词技术构建的<strong>倒排索引</strong>的方式进行查询)</p><p>开发语言:java。Solr2004年诞生，ES2010年诞生，ES更新，功能更强大(新技术的出现，会弥补老技术的缺点，吸取老技术的优点)。</p><p>区别:</p><ol><li>当建立索引的时候，solr会产生io阻塞，而es不会，es查询性能要高于solr</li><li>在不断动态添加数据的时候，solr的检索效率会变得低下，而es没有什么变化</li><li>Solr利用zookeeper进行分布式管理，而es自带有分布式系统的管理功能，Solr一般都要部署到web服务器上，比如tomcat，启动tomcat的时候需要配置tomcat和solr的关联(Solr的本质，是一个动态的web项目)</li><li>solr支持更多格式的数据(XML、json、csv等)，而es仅仅支持json文件格式</li><li>solr是传统搜索应用的有利解决方案，但是es更加适用于新兴的实时搜索应用。单纯对已有的数据进行检索，solr效率更好，高于es。</li><li>solr官网提供的功能更多，而es本身更加注重于核心功能，高级功能都有的第三方插件完成</li></ol><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><p>单点登录:一处登录多处使用!</p><p>前提:单点登录使用在分布式系统中，一处登录，处处运行。</p><p><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014110632902.png" alt="在这里插入图片描述"></p><p>实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">京东：单点登录，是将 token 放入到 cookie 中</span><br><span class="line">案例：将浏览器的 cookie 禁用，则在登录京东则失效，无论如何登录不了</span><br></pre></td></tr></table></figure><h3 id="购物车实现过程"><a href="#购物车实现过程" class="headerlink" title="购物车实现过程"></a>购物车实现过程</h3><p>购物车：</p><p> 1、购物车跟用户的关系 ？</p><ul><li>一个用户必须对应一个购物车【一个用户不管买多少商品，都会存在属于自己的购物车中】</li><li>单点登录一定要在购车前</li></ul><p> 2、跟购物车有关的操作有那些？</p><p> 0 用户未登录状态</p><p> 添加到什么地方，未登录将数据保存到什么地方？</p><p> Redis —京东</p><p> Cookie 自己开发项目的时候【如果浏览器禁用Cookie】</p><p> 用户登录状态。Redis 缓存中 【读写速度快】:Hash: Hset(key,field,value)、 Key:user:userId,cart、 Hset(key,skuId,value); 存在数据库中 【Oracle，mysql】</p><p> 展示购物车</p><ul><li><p>未登录状态显示:直接从 cookie 中 取得数据展示即可</p></li><li><p>登录状态:用户一旦登录，必须显示数据库【redis】 + cookie 中的购物车的数据。Cookie 中有三条记录，Redis 中有五条记录，真正展示的时候应该是八条记录</p></li></ul><h3 id="消息队列在项目中的使用"><a href="#消息队列在项目中的使用" class="headerlink" title="消息队列在项目中的使用"></a>消息队列在项目中的使用</h3><p>背景:在分布式系统中如何处理高并发的</p><p>由于在高并发的环境下，来不及同步处理用户发送的请求，则会导致请求发生阻塞，比如说，大量的insert、update之类的请求同时到达数据库，直接导致无数的行锁表锁，甚至会导致请求堆积过多，从而触发too many connections(连接数太多)错误，使用消息队列可以解决(异步通信)</p><p>异步:<br><img src="/2021/08/02/java-2021-08-02-faceQuestion/2020101411064799.png" alt="在这里插入图片描述"></p><p>并行:<br><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014110654572.png" alt="在这里插入图片描述"></p><p>排队<br><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014110703235.png" alt="在这里插入图片描述"></p><p>消息队列在电商中的使用场景:<br><img src="/2021/08/02/java-2021-08-02-faceQuestion/20201014110711735.png" alt="在这里插入图片描述"></p><p>消息队列的弊端</p><p>消息的不确定性:延迟队列和轮询技术来解决问题即可</p><p>推荐使用activeMQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考尚硅谷教学视频:&lt;a href=&quot;https://www.bilibili.com/video/BV1Eb411P7bP?spm_id_from=333.788.b_636f6d6d656e74.25&quot;&gt;https://www.bilibili.com/video/BV</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="面试" scheme="http://stary2020.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="笔记" scheme="http://stary2020.gitee.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面试题2</title>
    <link href="http://stary2020.gitee.io/2021/08/01/java-2021-08-15-faceQuestions2/"/>
    <id>http://stary2020.gitee.io/2021/08/01/java-2021-08-15-faceQuestions2/</id>
    <published>2021-08-01T12:56:06.000Z</published>
    <updated>2021-08-19T02:34:03.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4、GitHub"><a href="#4、GitHub" class="headerlink" title="4、GitHub"></a>4、GitHub</h1><h2 id="常用词含义"><a href="#常用词含义" class="headerlink" title="常用词含义"></a>常用词含义</h2><p>watch: 会持续收到该项目的动态</p><p>fork，复制某个项目到自己的github仓库中</p><p>star,可以理解为点赞</p><p>clone，将项目下载至本地</p><p>follow，关注你感兴趣的作者，会收到他们的动态</p><p>in关键词限制搜索范围</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p> xxx关键词 in:name或description或readme</p><p>xxx in:name项目名包含xxx的</p><p>xxx in:description项目描述包含xxx的</p><p>xxx in:readme项目的readme文件中包含xxx的</p><p>组合使用</p><p>搜索项目名或者readme中包含秒杀的项目</p><p>seckill in:name,readme</p><h2 id="stars或fork数量关键词去查找"><a href="#stars或fork数量关键词去查找" class="headerlink" title="stars或fork数量关键词去查找"></a>stars或fork数量关键词去查找</h2><h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h3><p>xxx关键词 stars 通配符</p><p>:&gt; 或者 :&gt;=</p><p>区间范围数字<br>数字1..数字2</p><p>查找stars数大于等于5000的springboot项目<br>springboot stars:&gt;=5000</p><p>查找forks数大于500的springcloud项目<br>springcloud forks:&gt;500</p><p>组合使用</p><p>查找ifork在100到200之间并且stars数在80到100之间的springboot项目<br>springboot forks:100..200 stars:80..100</p><h2 id="awesome加强搜索"><a href="#awesome加强搜索" class="headerlink" title="awesome加强搜索"></a>awesome加强搜索</h2><h3 id="公式-2"><a href="#公式-2" class="headerlink" title="公式"></a>公式</h3><p>awesome 关键字</p><p>awesome 系列 一般是用来收集学习，工具，书籍类相关的项目</p><p>搜索优秀的redis相关的项目，包括框架，教程等</p><h2 id="高亮显示某一行代码"><a href="#高亮显示某一行代码" class="headerlink" title="高亮显示某一行代码"></a>高亮显示某一行代码</h2><h3 id="公式-3"><a href="#公式-3" class="headerlink" title="公式"></a>公式</h3><p>1行<br>地址后面紧跟#L数字</p><p>多行<br>地址后面紧跟#L数字-L数字2</p><p>项目内搜索</p><p>英文<br> <a href="https://help.github.com/en/articles/using-keyboard-shortcuts">https://help.github.com/en/articles/using-keyboard-shortcuts</a></p><h2 id="搜索某个地区内的大佬"><a href="#搜索某个地区内的大佬" class="headerlink" title="搜索某个地区内的大佬"></a>搜索某个地区内的大佬</h2><h3 id="公式-4"><a href="#公式-4" class="headerlink" title="公式"></a>公式</h3><p>location:地区<br>language:语言</p><p>地区北京的java方向的用户<br>location:beijing language:java</p><h1 id="5、消息中间件之MQ"><a href="#5、消息中间件之MQ" class="headerlink" title="5、消息中间件之MQ"></a>5、消息中间件之MQ</h1><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><h4 id="1、作为技术选型的时候，你们是怎么判断的？还是说你进去公司以后，公司要你用这个你就用这个？请问你有没有自己的独立见解和思考？"><a href="#1、作为技术选型的时候，你们是怎么判断的？还是说你进去公司以后，公司要你用这个你就用这个？请问你有没有自己的独立见解和思考？" class="headerlink" title="1、作为技术选型的时候，你们是怎么判断的？还是说你进去公司以后，公司要你用这个你就用这个？请问你有没有自己的独立见解和思考？"></a>1、作为技术选型的时候，你们是怎么判断的？还是说你进去公司以后，公司要你用这个你就用这个？请问你有没有自己的独立见解和思考？</h4><p>答:  我刚入行的时候，人为年轻，也没有这个能力这个权限去做我们公司项目的技术选型，经理让我们用什么我们就用什么，但是我现在深度了解过ActiveMQ。我在公司用ActiveMQ的时候都接触过api发送和接收，MQ的高可用性，集群容错，持久化等功能，如果贵公司用ActiveMQ这款产品最好，如果不用，我也相信其他MQ也会支持像ActiveMQ的高可用，集群容错等功能，因为技术维度都是相通的。</p><h4 id="2、对于这个消息里面，两大经典的Queue队列和Topic主题，这两者有什么区别？请谈谈你的理解？"><a href="#2、对于这个消息里面，两大经典的Queue队列和Topic主题，这两者有什么区别？请谈谈你的理解？" class="headerlink" title="2、对于这个消息里面，两大经典的Queue队列和Topic主题，这两者有什么区别？请谈谈你的理解？"></a>2、对于这个消息里面，两大经典的Queue队列和Topic主题，这两者有什么区别？请谈谈你的理解？</h4><p>答:  Queue队列是以数据默认存储在MQ服务器上文件形式保存起来，也可以用数据库进行存储。它采用的是负载均衡的模式，若当前没有消费者，消息也不会被丢弃。如果有多个消费者，那一个消息就只会发送给其中一个消费者。</p><p>Topic它是无状态的发布订阅模式，若没有订阅者，那么消息就直接被丢弃，如果有多个订阅者，那么这些订阅者就都会收到消息，但是性能会降低，因为它是按照订阅者数量进行复制数据来发送的。</p><h4 id="3、ActiveMQ的默认端口是什么？"><a href="#3、ActiveMQ的默认端口是什么？" class="headerlink" title="3、ActiveMQ的默认端口是什么？"></a>3、ActiveMQ的默认端口是什么？</h4><p>ActiveMQ两大经典默认的端口是61616和8161</p><h4 id="4、消息队列的主要作用是什么？"><a href="#4、消息队列的主要作用是什么？" class="headerlink" title="4、消息队列的主要作用是什么？"></a>4、消息队列的主要作用是什么？</h4><p>削锋<br>解耦<br>异步</p><p>它能对多个模块进行解耦，对相关高并发场景进行削峰以及消息的异步处理</p><h4 id="5、你生产上的链接协议如何配置的？是使用tcp吗？"><a href="#5、你生产上的链接协议如何配置的？是使用tcp吗？" class="headerlink" title="5、你生产上的链接协议如何配置的？是使用tcp吗？"></a>5、你生产上的链接协议如何配置的？是使用tcp吗？</h4><p>答：还用过NIO，它类似于TCP传输协议，但是它是用的是非阻塞型NIO，它有比TCP更好的性能</p><h4 id="6、默认的61616端口以及web页面的端口在哪修改"><a href="#6、默认的61616端口以及web页面的端口在哪修改" class="headerlink" title="6、默认的61616端口以及web页面的端口在哪修改"></a>6、默认的61616端口以及web页面的端口在哪修改</h4><p>答：可以在ActiveMQ的conf文件夹下的ActiveMQ.xml当中进行修改61616进程端口，以及在conf文件夹下的jetty.xml进行修改web页面的端口</p><h4 id="7、kafka-activemq，rabbitmq，rocketmq都有什么区别？"><a href="#7、kafka-activemq，rabbitmq，rocketmq都有什么区别？" class="headerlink" title="7、kafka activemq，rabbitmq，rocketmq都有什么区别？"></a>7、kafka activemq，rabbitmq，rocketmq都有什么区别？</h4><p>1、我就说说我用过的ActiveMQ，ActiveMQ是Apache下的产品，它支持JAVA，它自身是JAVA开发出来的产品，而Apache跟我们JAVA程序员是耍不掉的，我们用的很多产品也都是Apache下的，比如Tomcat这些产品，所以它对于我们的入门学习的提升非常有帮助。它有较低的概念数据丢失，但是这个可以控制的。可能等到ActiveMQ6.0出来了以后，可能会更完善了一些，但现在如果比起阿里巴巴的RocketMQ，这个ActiveMQ没有RocketMQ好。2、因为RocketMQ是阿里的产品，它模仿了kafka的精华，进行改造出来的产品，也是得到阿里双十一验证的较为成熟的产品。</p><p>3、而kafka是大数据场景下用到的产品，它是支持十万级别的吞吐量，但是它似乎会丢失一些数据的概率大一些吧</p><p>4、而RabbitMQ是其他语言开发的，若改它源码可能使我们JAVA程序员较为麻烦。扩展性可能就不是很好。</p><h4 id="8、你们为什么不用其他的MQ，最终选择了用ActiveMQ？"><a href="#8、你们为什么不用其他的MQ，最终选择了用ActiveMQ？" class="headerlink" title="8、你们为什么不用其他的MQ，最终选择了用ActiveMQ？"></a>8、你们为什么不用其他的MQ，最终选择了用ActiveMQ？</h4><p>因为ActiveMQ是Apache下的产品，它支持JAVA，它自身是JAVA开发出来的产品，而Apache 跟我们JAVA程序员是耍不掉的，我们用的很多 产品也都是Apache的，比如Tomcat这些产品，所以它对于我们的入门学习的提升非常有帮助并且扩展性较好。它有较低的概念数据丢失，但是这个可以控制的。可能等到下一代的ActiveMQ6.0出来了以后，可能会更加完善了一些</p><h4 id="9、ActiveMQ的持久化机制请你谈谈？"><a href="#9、ActiveMQ的持久化机制请你谈谈？" class="headerlink" title="9、ActiveMQ的持久化机制请你谈谈？"></a>9、ActiveMQ的持久化机制请你谈谈？</h4><p>答：MQ自身也带有持久化机制，并且MQ默认的就是KahaDB以日志文件进行存储的，但是这种自带的持久化机制也不可靠，因为若一旦MQ宕机了，就算自带可持久化机制也需要重启恢复，所以为了保证高可用，为了保证可靠性。MQ一般都会采用数据库存储等方式进行更为保障的持久化。</p><h4 id="10、请你谈谈ActiveMQ默认存储机制KahaDB的原理是什么？"><a href="#10、请你谈谈ActiveMQ默认存储机制KahaDB的原理是什么？" class="headerlink" title="10、请你谈谈ActiveMQ默认存储机制KahaDB的原理是什么？"></a>10、请你谈谈ActiveMQ默认存储机制KahaDB的原理是什么？</h4><p>1、KahaDB里面有四类文件一把锁，其中一个db-1.log是日志文件，当这个日志文件满了以后，会新增一个新的日志文件，并在日志文件名称中按照数字进行编号，若不再引用该日志文件了，该日志文件就会被删除或者是归档。</p><p>2、db.data是索引，他用来存储日志文件记录的具体索引位置的。</p><p>3、db.free是看db.data索引文件当中是有有空闲</p><p>4、lock是读取该KahaDB的一把权限锁。</p><h4 id="11、你是如何保证生产端发送消息比较快，并且要保证消息能发送成功？"><a href="#11、你是如何保证生产端发送消息比较快，并且要保证消息能发送成功？" class="headerlink" title="11、你是如何保证生产端发送消息比较快，并且要保证消息能发送成功？"></a>11、你是如何保证生产端发送消息比较快，并且要保证消息能发送成功？</h4><p>1、若生产端发送的大量消息，消费端消费的比较慢，可以开启异步投递的方式， 有三种方法可以开启生产端的异步投递，使其性能提高，发送消息会更快</p><p>2、但是同时也会导致丢失数据的风险，因为生产端直接生产了消息就直接丢给了MQ，也不管MQ收到没收到，生产端这边就自认为自己已经完成了工作。但MQ一旦宕机等了，那么数据可能会丢失。</p><p>3、想保证消息能发送成功，要加入异步投递的同时，再加入异步接收回调方法，使其再判断是否都发送成功，若失败了就需要人工干预，继续重发。</p><h4 id="12、请你谈谈MQ当中具体哪些情况会引发消息的重发？"><a href="#12、请你谈谈MQ当中具体哪些情况会引发消息的重发？" class="headerlink" title="12、请你谈谈MQ当中具体哪些情况会引发消息的重发？"></a>12、请你谈谈MQ当中具体哪些情况会引发消息的重发？</h4><p>1、消费端使用事务，但是在session中调用了rollback回滚,没有真正的提交数据</p><p>2、消费端使用事务，但是没有提交或者是之前关闭了</p><p>3、消费端在使用签收的模式下，在session中调用了recover()重试的方法</p><p>这以上三种情况都会导致消息的重发。</p><h4 id="13、请说说消息重发时间间隔和重发次数？"><a href="#13、请说说消息重发时间间隔和重发次数？" class="headerlink" title="13、请说说消息重发时间间隔和重发次数？"></a>13、请说说消息重发时间间隔和重发次数？</h4><p>默认是间隔每一秒钟，消息会重发6次</p><h4 id="14、MQ的有毒消息谈谈你的理解？"><a href="#14、MQ的有毒消息谈谈你的理解？" class="headerlink" title="14、MQ的有毒消息谈谈你的理解？"></a>14、MQ的有毒消息谈谈你的理解？</h4><p>我的理解是：这个消息重发了6次以后，还是发送不出去，消费端就会自动给MQ一个标识，表明这个消息是有毒的消息，告诉MQ实例（broker），不要再发这个消息了。MQ实例（broker）就会把这个消息放到死信队列当中。</p><h4 id="15、谈谈你对死信队列的理解？"><a href="#15、谈谈你对死信队列的理解？" class="headerlink" title="15、谈谈你对死信队列的理解？"></a>15、谈谈你对死信队列的理解？</h4><p>若MQ发送的消息，发送了6次都未能发送成功，会将该消息放入到死信队列当中，相关工程师可以在这个MQ的网页端的Queue队列中查看出错的消息，然后进行人工的干预处理</p><h4 id="16、你在项目中是如何保证消息队列的高可用？"><a href="#16、你在项目中是如何保证消息队列的高可用？" class="headerlink" title="16、你在项目中是如何保证消息队列的高可用？"></a>16、你在项目中是如何保证消息队列的高可用？</h4><p>答：是用事务，签收，持久化和zookeeper+replicated-leveldb-store的主从集群来保证MQ的高可用</p><h4 id="17、消费者消费消息，如何保证MQ幂等性？"><a href="#17、消费者消费消息，如何保证MQ幂等性？" class="headerlink" title="17、消费者消费消息，如何保证MQ幂等性？"></a>17、消费者消费消息，如何保证MQ幂等性？</h4><p>1、若MQ的消息是可以落盘到数据库的，可以在数据库当中设置唯一的ID主键，这样就算出现了重复消费的情况，也会导致主键的冲突。避免数据库会出现脏数据。不过这个并不推荐</p><p>2、推荐用redis缓存来做，给消息分配一个全局的id，只要是消费过的消息，就放入redis当中，那么消费者在开始消费前，先去redis中查询有没有消费的记录。</p><h4 id="18、为什么要在系统里引入消息中间件"><a href="#18、为什么要在系统里引入消息中间件" class="headerlink" title="18、为什么要在系统里引入消息中间件?"></a>18、为什么要在系统里引入消息中间件?</h4><p>1、它能够解决系统耦合调用的问题</p><p>2、它能够解决系统RPC同步调用的问题异步模型</p><p>3、它能够抵御洪峰流量，达到保护主业务的目的。</p><h4 id="19、何种场景下使用了消息中间件？"><a href="#19、何种场景下使用了消息中间件？" class="headerlink" title="19、何种场景下使用了消息中间件？"></a>19、何种场景下使用了消息中间件？</h4><p>1、只要是消息发送，尽量都是异步，所以可以引入消息中间件</p><p>2、只要是系统解耦，尽量都可以引入消息中间件</p><h4 id="20、如果消息中间件的消息大量积压了，你是如何处理的？"><a href="#20、如果消息中间件的消息大量积压了，你是如何处理的？" class="headerlink" title="20、如果消息中间件的消息大量积压了，你是如何处理的？"></a>20、如果消息中间件的消息大量积压了，你是如何处理的？</h4><h5 id="为什么会导致消息大量的积压？"><a href="#为什么会导致消息大量的积压？" class="headerlink" title="为什么会导致消息大量的积压？"></a>为什么会导致消息大量的积压？</h5><p>如果生产者发送消息给消息队列MQ，消费者会连上消息队列MQ服务器，进行消费消息，但是消息队列MQ里面存的消息太多，那肯定会影响很多的性能，所以消息的积压会导致MQ性能的下降，所以一定要解决消息积压的问题。</p><h5 id="什么情况下会导致消息的积压？"><a href="#什么情况下会导致消息的积压？" class="headerlink" title="什么情况下会导致消息的积压？"></a>什么情况下会导致消息的积压？</h5><p>1、比如消费者宕机，相当于MQ服务器没有连上任何一个消费者或者连的消费者太少了，消费者宕机了，没有消费者去消费MQ服务器当中的消息，而生产者源源不断的在生产着消息，那可能导致MQ服务器里面会有上万的消息在等着被消费</p><p>2、消费者消费的能力不足，假设原本有10个消费者，结果有9个消费者宕机了，最终一个消费者消费消息的效率太慢了</p><p>3、生产者发送的消息比较猛，消费者在消费MQ服务器当中的消息，导致可能消费者跟不上生产者生产的消息，而最终导致MQ大量的消息积压</p><h5 id="怎么解决消息积压的问题？"><a href="#怎么解决消息积压的问题？" class="headerlink" title="怎么解决消息积压的问题？"></a>怎么解决消息积压的问题？</h5><p>解决方案1：<br>可以限制生产者的发送流量，但是要限制流量，就要限制业务，只要业务不执行，就不发这个消息出去</p><p>解决方案2：<br>更可以在消费者来解决消息积压的问题，既然MQ服务器里面的消息积压了，就可以上线更多的消费者来消费消息</p><p>解决方案3：<br>由于可能数据量太大，如果上线更多的消费者的话，那么这个消费者如果是正常来消费消息，还要来处理，那么这个处理可能还要一段时间，就会有点慢，那么就可以上线一个专门处理消息的消费者，假设MQ有百万的消息积压，可以直接从这个专门处理消息的消费者把百万积压的消息全部批量拿出来存到数据库，然后存到数据库以后，再来编写一个离线处理消息的业务功能，从数据库里面，慢慢取出一条一条的数据进行处理。</p><h4 id="21、MQ在高并发情况下假设队列满了如何防止消息的丢失？"><a href="#21、MQ在高并发情况下假设队列满了如何防止消息的丢失？" class="headerlink" title="21、MQ在高并发情况下假设队列满了如何防止消息的丢失？"></a>21、MQ在高并发情况下假设队列满了如何防止消息的丢失？</h4><h5 id="为什么会导致消息的丢失？"><a href="#为什么会导致消息的丢失？" class="headerlink" title="为什么会导致消息的丢失？"></a>为什么会导致消息的丢失？</h5><p>消息的丢失是一个非常严重的现象，特别是做类似电商的业务，只要有一个消息丢失，可能会影响到后边一连串的操作都会出现问题。</p><p>一般使用消息事务，也就是用可靠消息+最终一致性方案，那么就应该首先保证消息的不丢失。</p><h5 id="什么情况下会导致消息的丢失？"><a href="#什么情况下会导致消息的丢失？" class="headerlink" title="什么情况下会导致消息的丢失？"></a>什么情况下会导致消息的丢失？</h5><p>1、消息发出去，但由于网络的问题没有抵达到MQ服务器</p><p>2、消息发送到MQ服务器，MQ服务器要将消息写入到磁盘才能算成功，但此时MQ服务器还没持久化这个数据也即可能还没处理这个数据，就宕机了，MQ服务器一旦宕机了以后再次启动，那么这个没有处理的数据就丢失了。</p><p>解决方案1：<br>使用生产者发送消息的确认机制，每一个确认成功的消息，都去数据库MQ表里面修改一下状态，改为：已收到的状态</p><p>3、比如生产者发送一个消息给MQ服务器，确认抵达机制已经到了MQ服务器，那么消费者此时就在消费消息，消息者刚把消息拿到，还没来得及消费，消费者却宕机了，宕机以后，此时这个消息，如果是自动确认(也即自动ACK机制的)情况下，相当于消费者已上线拿到消息就默认回复给MQ服务器：消费者已经收到了，但是其实最终却没有消费成功这个消息，那么这个消息就相当于走了一般过场而已</p><p>解决方案1:<br> 一定要开启手动确认机制(也即手动开启ACK机制)，消费真正成功才移除，失败或者没来得及处理就让消息重新入消息队列</p><h5 id="怎么解决消息丢失的问题？那么如何保证消息一定发出去呢？"><a href="#怎么解决消息丢失的问题？那么如何保证消息一定发出去呢？" class="headerlink" title="怎么解决消息丢失的问题？那么如何保证消息一定发出去呢？"></a>怎么解决消息丢失的问题？那么如何保证消息一定发出去呢？</h5><p>解决方案1：<br>可以做好容错方案，也即发送消息可能会导致网络原因而发不出去，那么就将没发送出去的消息进行重试发送</p><p>解决方案2:<br>做好日志记录，只要每发一个消息，都做好相应的日志记录，可以给每一个业务的数据库里面创建一张MQ的表，这个表主要保存每一个消息的详细信息，只要发送失败了，就可以定期去扫描这个MQ日志表的数据库，把这些失败的消息拿出来再发一遍</p><p>解决方案3:<br> 一定要开启手动确认机制(也即手动开启ACK机制)，消费真正成功才移除，失败或者没来得及处理就让消息重新入消息队列</p><p>解决方案4：<br>使用生产者发送消息的确认机制，每一个确认成功的消息，都去数据库MQ表里面修改一下状态，改为：已收到的状态</p><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>做好消息的确认机制，要做两端的确认（也即消费者和生产者） 特别是消费者一定要开启手动确认机制(也即手动开启ACK机制),否则只要一收到消息，但还没有处理消息就宕机了，那么这个消息就直接被删除了。一旦做了确认机制，那么每一个发送的消息都在数据库做好记录，然后将定期所有失败的消息再次发送一遍</p><h4 id="22、MQ在高并发下若消息重复了，你是如何处理的？"><a href="#22、MQ在高并发下若消息重复了，你是如何处理的？" class="headerlink" title="22、MQ在高并发下若消息重复了，你是如何处理的？"></a>22、MQ在高并发下若消息重复了，你是如何处理的？</h4><h5 id="为什么会导致消息的重复？"><a href="#为什么会导致消息的重复？" class="headerlink" title="为什么会导致消息的重复？"></a>为什么会导致消息的重复？</h5><p>所谓的消息重复就是一个消息给消费者发了两次，相当于消费者收到了两次相同的消息</p><h5 id="什么情况下会导致消息的重复？"><a href="#什么情况下会导致消息的重复？" class="headerlink" title="什么情况下会导致消息的重复？"></a>什么情况下会导致消息的重复？</h5><p>1、消费者一般会用监听器来收到消息，一旦监听器收到消息以后，会调用业务逻辑进行处理，假设消息消费成功了，业务逻辑也处理完了，此时突然宕机了，那么下面的一些方法可能还没走完，也相当于没有给MQ服务器回复这个消息已经消费成功了，消费者就跟MQ服务器断开连接了，那么一旦断开连接，那么MQ服务器就认为消费者没有把消息消费成功，因为设置的是手动确认（ACK）机制，那么此时消息就会从Unack（正在处理）状态变成Ready（重新处理的），那么变成Ready状态，就会发给其他的消费者，相当于其他消费者收到以后，再处理，那么这个消息就相当于被处理了两遍。</p><p>2、消息消费失败了，然后告诉MQ服务器，拒绝消息，让这个消息重新回到队列里面，然后再来接收到进行处理，这种的消息重复处理是被允许的，因为第一遍是失败了，那么消息再次进入队列，来重新尝试消费。</p><h5 id="怎么解决消息重复的问题？"><a href="#怎么解决消息重复的问题？" class="headerlink" title="怎么解决消息重复的问题？"></a>怎么解决消息重复的问题？</h5><p>解决方案1：<br>将业务逻辑方法设计成幂等性的。</p><p>解决方案2：<br>也可以使用防重表，每一个消息由于都有一个唯一的id，只要它被处理过了，就可以去防重表里面记录一下。</p><p>解决方案3：<br>也可以使用RabbitMQ的消息的属性字段，来看看是不是消息是重新派发过来的，那么就可以不处理了，但是这样做太暴力了，万一上一次是失败的，没有消费成功，那么再派送过来也丢失了</p><p>总结:<br>如果消息重复了，把业务设计成幂等性的就行了，即使消息发上一万遍，那都是最终执行一遍的结果。</p><h1 id="6、MySQL相关-待更新"><a href="#6、MySQL相关-待更新" class="headerlink" title="6、MySQL相关(待更新)"></a>6、MySQL相关(待更新)</h1><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h4 id="1、mysql5-5以上的存储引擎是什么"><a href="#1、mysql5-5以上的存储引擎是什么" class="headerlink" title="1、mysql5.5以上的存储引擎是什么"></a>1、mysql5.5以上的存储引擎是什么</h4><p> 答:默认的是InnoDB存储引擎,</p><h4 id="2、为什么mysql5-5以后的存储引擎会选择这个作为存储引擎呢？"><a href="#2、为什么mysql5-5以后的存储引擎会选择这个作为存储引擎呢？" class="headerlink" title="2、为什么mysql5.5以后的存储引擎会选择这个作为存储引擎呢？"></a>2、为什么mysql5.5以后的存储引擎会选择这个作为存储引擎呢？</h4><p>答：因为它支持事务，行锁，支持外键，InnoDB它的高并发支持的比较好，因为要锁也只是锁一行，不是锁整张表.所以InnoDB的功能和性能会更强一些。</p><h4 id="3、请谈谈InnoDB和MyISAM优点和缺点，并谈谈你的理解？"><a href="#3、请谈谈InnoDB和MyISAM优点和缺点，并谈谈你的理解？" class="headerlink" title="3、请谈谈InnoDB和MyISAM优点和缺点，并谈谈你的理解？"></a>3、请谈谈InnoDB和MyISAM优点和缺点，并谈谈你的理解？</h4><p>答：现在最常用的存储引擎是InnoDB，它从Mysql5.5.5版本开始以后就成为了默认的存储引擎 InnoDB支持主外键，事务，行表锁，缓存，表的空间，而MyISAM是不支持主外键以及事务的，它在锁方面也仅仅只是支持表锁，它并不适合做高并发的操作，因为它操作一个记录的时候，会锁住整个表。 MyISAM的关注点是在性能,它偏向于查询，而InnoDB的关注点是在事务方面，它偏向于数据的稳定和持久</p><h4 id="4、请问当你写了一个sql以后，在Mysql数据库底层是如何加载并运行的？"><a href="#4、请问当你写了一个sql以后，在Mysql数据库底层是如何加载并运行的？" class="headerlink" title="4、请问当你写了一个sql以后，在Mysql数据库底层是如何加载并运行的？"></a>4、请问当你写了一个sql以后，在Mysql数据库底层是如何加载并运行的？</h4><p>答：Mysql默认是从FROM 先开始加载表，再从ON。然后就是JOIN，WHERE,GROUP BY, HAVING, SELECT,DISTINCT, ORDER BY ,LIMIT等其他这种顺序运行的</p><h4 id="5、请问Join是有几种？"><a href="#5、请问Join是有几种？" class="headerlink" title="5、请问Join是有几种？"></a>5、请问Join是有几种？</h4><p>答：粗分是有四种，左连接，右连接，内连接，外连接</p><h4 id="6、索引是什么？"><a href="#6、索引是什么？" class="headerlink" title="6、索引是什么？"></a>6、索引是什么？</h4><p>Mysql官方对索引的定义是：索引(Index)是帮助Mysql高效获取数据的数据结构。</p><h5 id="为什么要建索引？"><a href="#为什么要建索引？" class="headerlink" title="为什么要建索引？"></a>为什么要建索引？</h5><p>索引的目的在于提高查询效率。</p><p>索引有两大功能：查找快，排好序。也即建的索引将会影响到Sql的两部分。</p><p>第一部分：就是where条件后面这部分的条件约束是否用到索引，这部分就是负责查找的条件过滤。</p><p>第二部分：索引会影响到where后面的查找以及order by后面的排序。</p><h5 id="哪些情况下适合建索引？"><a href="#哪些情况下适合建索引？" class="headerlink" title="哪些情况下适合建索引？"></a>哪些情况下适合建索引？</h5><p>1.主键自动建立唯一索引。</p><p>2.频繁作为查询条件的字段应该建索引。</p><p>3.查询中与其他表关联的字段，外键关系建立索引。</p><p>4.频繁更新的字段不适合创建索引：因为每次更新不单单只是更新了记录，还会更新索引，加重了IO负担。</p><p>5.Where条件里用不到的字段不创建索引。</p><p>6.单键/组合索引的选择问题(高并发下倾向创建组合索引)。</p><p>7.查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度。</p><p>8.查询中统计或者分组字段。</p><h5 id="哪些情况下不适合建索引？"><a href="#哪些情况下不适合建索引？" class="headerlink" title="哪些情况下不适合建索引？"></a>哪些情况下不适合建索引？</h5><p>1.表记录太少。</p><p>2.经常增删改的表：提高了查询效率，但是同时却会降低了更新表的速度，如对表进行INSERT,UPDATE以及DELETE。因为更新表时，MySql不仅要保存数据，还要保存索引文件。</p><p>3.数据重复并且分布平均的表字段，因此应该只给最经常查询和最经常排序的数据列建立索引，但如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p><h1 id="7、NoSQL数据库Redis实现分布式锁"><a href="#7、NoSQL数据库Redis实现分布式锁" class="headerlink" title="7、NoSQL数据库Redis实现分布式锁"></a>7、NoSQL数据库Redis实现分布式锁</h1><h2 id="基础补充"><a href="#基础补充" class="headerlink" title="基础补充"></a>基础补充</h2><h3 id="1、查询缓存"><a href="#1、查询缓存" class="headerlink" title="1、查询缓存"></a>1、查询缓存</h3><p>为了系统性能的提升，我们一般都会将数据放入缓存中，加速访问。而db承担数据落盘工作<br>整合jedis</p><h3 id="2、缓存问题"><a href="#2、缓存问题" class="headerlink" title="2、缓存问题"></a>2、缓存问题</h3><h4 id="1。缓存穿透"><a href="#1。缓存穿透" class="headerlink" title="1。缓存穿透"></a>1。缓存穿透</h4><p><strong>缓存穿透</strong>是指<strong>查询一个一定不存在的数据</strong>，由于缓存是不命中， 将去查询数据库，但是数据库也无此记录，并且处于容错考虑， 我们没有将这次查询的null写入缓存， 这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。 <strong>在流量大时</strong>，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p>解决：空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><h4 id="2。缓存雪崩"><a href="#2。缓存雪崩" class="headerlink" title="2。缓存雪崩"></a>2。缓存雪崩</h4><p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><p>原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h4 id="3。缓存击穿"><a href="#3。缓存击穿" class="headerlink" title="3。缓存击穿"></a>3。缓存击穿</h4><p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。 这个时候，需要考虑一个问题：如果这个key在大量请求同时进来前正好失效，那么所有对这个key的数据查询都落到db，我们称为缓存击穿。</p><p>与缓存雪崩的区别： 缓存击穿是一个热点key失效，缓存雪崩是很多key集体失效</p><p>解决<br>分布式锁</p><h3 id="3、分布式锁"><a href="#3、分布式锁" class="headerlink" title="3、分布式锁"></a>3、分布式锁</h3><p>1、我们想要的效果</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816103758003.png" alt="image-20210816103758003"></p><p>2、分布式锁第一阶段&amp;出现的问题</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816103858610.png" alt="image-20210816103858610"></p><p>3、分布式锁第二阶段&amp;出现的问题</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816103911056.png" alt="image-20210816103911056"></p><p>4、分布式锁第三阶段&amp;出现的问题</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816103921742.png" alt="image-20210816103921742"></p><p>5、分布式锁第四阶段&amp;出现的问题</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816103937148.png" alt="image-20210816103937148"></p><p>6、分布式锁核心代码</p><p>  加锁   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String token =  UUID.randomUUID().toString();   </span><br><span class="line">String lock = jedis.set(key, token,  <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>,<span class="number">20</span>);  </span><br><span class="line">More Actions </span><br></pre></td></tr></table></figure><p> 解锁  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;,  KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0  end&quot;</span>;  </span><br><span class="line">jedis.eval(script, Collections.singletonList(key),  Collections.singletonList(token)); </span><br></pre></td></tr></table></figure><p>  进入redis测试  <code>docker exec –it redis redis-cli  docker exec –it redis redis-benchmark  </code></p><h3 id="4、缓存使用模式"><a href="#4、缓存使用模式" class="headerlink" title="4、缓存使用模式"></a>4、缓存使用模式</h3><h4 id="Cache-Aside"><a href="#Cache-Aside" class="headerlink" title="Cache-Aside"></a>Cache-Aside</h4><p>即业务代码围绕Cache编写，由业务代码维护缓存；</p><p>读场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = cache.getIfPresent(key);</span><br><span class="line"><span class="keyword">if</span>(data == <span class="keyword">null</span>)&#123;</span><br><span class="line">  data = loadFromSoR(key);</span><br><span class="line">  cache.put(key,data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先从缓存中获取，没有查询SoR，再放入缓存</p><p>写场景</p><p><strong>双写模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先将数据写入SoR</span></span><br><span class="line">writeToSoR(k,v);</span><br><span class="line"><span class="comment">//2、执行成功后立即同步写入缓存</span></span><br><span class="line">cache.put(k,v)</span><br></pre></td></tr></table></figure><p><strong>失效模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、先将数据写入SoR</span></span><br><span class="line">writeToSoR(k,v);</span><br><span class="line"><span class="comment">//2、失效缓存，下次读取时从缓存中加载（进入读场景），</span></span><br><span class="line">cache.invalidate(k);</span><br></pre></td></tr></table></figure><p>并发更新问题与解决</p><p>（多个缓存实例，同时更新自己里面的同样数据）</p><p>canal</p><p>1、考虑使用中间件如Canal订阅binlog，进行增量更新分布式缓存，不会存在缓存数据不一致问题。但是会有延迟，我们可以调整合理的过期时间来容忍这个延迟</p><p>2、读服务，可以考虑一致性哈希，相同的操作负载均衡到同一个实例，从而减少并发几率。</p><p>自定义数据分片规则，实现一致性hash</p><h4 id="Cache-As-SoR"><a href="#Cache-As-SoR" class="headerlink" title="Cache As SoR"></a>Cache As SoR</h4><p>即把Cache当做SoR，所有操作都是对Cache进行，然后Cache委托SoR进行数据的真实读写。 即业务代码只看到Cache的操作，看不到关于SoR的代码；三种实现模式：read-through、 write-through、write-behind</p><p>read-through</p><p>业务代码首先调用Cache，Cache不命中，由Cache回源到SoR（类似回调的方式或者Cache配置的方式）， 而不是业务代码。【Guava、Ehcache均支持这种模式】 优点：业务代码整洁； MyBatis缓存机制；userMapper.get(1);</p><p>write-through</p><p>称为穿透写模式/直写模式。业务代码调用Cache写数据，然后由Cache负责写缓存和写SoR，而不是业务代码。</p><p>MyBatis缓存机制：userMapper.update(1); 1)、直接把缓存删了或者改了 2）、再去改数据</p><p>write-behind（write-back）</p><p>也叫write-back；回写模式。不同于write-through的是，write-through是同步写，而write-back是异步写，异步成功后可以实现批量写、合并写、延时写等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.update(<span class="number">1</span>); <span class="comment">//1s</span></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123; cache.update() <span class="comment">//3s&#125;).start();</span></span><br><span class="line">sout(<span class="string">&quot;&quot;</span>);<span class="comment">//1s后</span></span><br></pre></td></tr></table></figure><p>Copy-Pattern（缓存数据复制方式）</p><p>缓存使用两种复制模式，注意。Copy-On-Read（读时复制）、Copy-On-Write（写时复制）。</p><p>有些进程内缓存很多是基于引用的，所以拿到缓存中的数据如果进行修改，可能发生不可预测的问题。</p><p>读时复制：读取到的缓存的值，复制内容封装一个新的对象。</p><p>写时复制：给缓存中写的值，复制一个新的对象写入</p><p>名词</p><p>SoR（system-of-record）：记录系统，或者可以叫数据源，实际存储原始数据的系统</p><p>Cache：缓存，是SoR的快照数据，Cache的访问速度比SoR要快，放入Cache的目的是提升系统速度，减少回源到SoR的次数</p><p>回源：回到数据源头检索数据，Cache没有命中需要回到SoR读取数据，这叫做回源</p><h3 id="5、分布式锁-amp-集合落地实现—-Redisson"><a href="#5、分布式锁-amp-集合落地实现—-Redisson" class="headerlink" title="5、分布式锁&amp;集合落地实现—-Redisson"></a>5、分布式锁&amp;集合落地实现—-<strong>Redisson</strong></h3><p>1、简介</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p>2、整合</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置</p><p>配置redis</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.redis.host=192.168.159.130</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br></pre></td></tr></table></figure><p>配置redisson</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GmallRedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span>+host+<span class="string">&quot;:&quot;</span>+port);</span><br><span class="line">        RedissonClient redisson = Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redisson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、文档</p><p> <a href="https://github.com/redisson/redisson/wiki/1.-Overview">https://github.com/redisson/redisson/wiki/1.-Overview</a></p><p>4、分布式锁</p><p>5、分布式集合</p><h3 id="6、各种锁"><a href="#6、各种锁" class="headerlink" title="6、各种锁"></a>6、各种锁</h3><p>锁的基本问题</p><h4 id="1、锁是什么？干什么用？"><a href="#1、锁是什么？干什么用？" class="headerlink" title="1、锁是什么？干什么用？"></a>1、锁是什么？干什么用？</h4><p>锁主要用来实现资源共享的同步。只有获取到了锁才能访问该同步代码，否则等待其他线程使用结束释放锁。</p><p>一句话：限制多线程资源竞争</p><h4 id="2、知道下面这些锁吗？"><a href="#2、知道下面这些锁吗？" class="headerlink" title="2、知道下面这些锁吗？"></a>2、知道下面这些锁吗？</h4><p>自旋锁、阻塞锁、可重入锁、读写锁、互斥锁、悲观锁、乐观锁、公平锁、偏向锁、 对象锁、线程锁、锁粗化、锁消除、轻量级锁、重量级锁、信号量、 独享锁、共享锁、分段锁、闭锁</p><p>锁分类</p><p>其实我们真正用到的锁也就那么两三种，只不过依据设计方案和性质对其进行了大量的划分。</p><p>常见（kao）的锁</p><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h4><p>Synchronized，它就是一个：非公平，悲观，独享，互斥，可重入，重量级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Synchronized <span class="title">a</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">Synchronized <span class="title">b</span> <span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><p>以下两个锁都在JUC包下，是API层面上的实现</p><p>ReentrantLock，它是一个：默认非公平但可实现公平的，悲观，独享，互斥，可重入，重量级锁。</p><p>ReentrantReadWriteLocK，它是一个，默认非公平但可实现公平的，悲观，写独享，读共享，读写，可重入，重量级锁。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock .lock();</span><br><span class="line"> &#123;&#125;</span><br><span class="line">lock .unlock();</span><br></pre></td></tr></table></figure><p>公平锁：排队机制</p><p>AQS：百度</p><h4 id="ReentrantLock与synchronized-的区别"><a href="#ReentrantLock与synchronized-的区别" class="headerlink" title="ReentrantLock与synchronized 的区别"></a>ReentrantLock与synchronized 的区别</h4><p>ReentrantLock（可重入锁）</p><p>中断等待</p><p>ReentrantLock 拥有Synchronized相同的并发性和内存语义，此外还多了 锁投票，定时锁等候和中断锁等候。</p><p>线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定</p><p>如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断</p><p>如果 使用ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断等待，而干别的事情</p><h4 id="ReentrantLock获取锁定有三种方式"><a href="#ReentrantLock获取锁定有三种方式" class="headerlink" title="ReentrantLock获取锁定有三种方式"></a>ReentrantLock获取锁定有三种方式</h4><p>lock(),<br>如果获取了锁立即返回，如果别的线程持有锁， 当前线程则一直处于休眠状态，直到获取锁</p><p>tryLock(),<br>如果获取了锁立即返回true， 如果别的线程正持有锁，立即返回false</p><p>tryLock(long timeout,TimeUnit unit)<br>如果获取了锁定立即返回true， 如果别的线程正持有锁， 会等待参数给定的时间， 在等待的过程中，如果获取了锁定，就返回true， 如果等待超时，返回false；</p><p>lockInterruptibly:<br>如果获取了锁定立即返回， 如果没有获取锁定，当前线程处于休眠状态， 直到获取锁定，或者当前线程被别的线程中断</p><p>可实现公平锁<br>对于ReentrantLock而言， 通过构造函数指定该锁是否是公平锁， 默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。</p><p>锁绑定多个条件<br>锁绑定多个条件是指一个ReentrantLock对象可以同时绑定多个Condition对象，而在synchronized中，锁对象的wait（）和notify（）或notifyAll（）方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而ReentrantLock则无须这样做，只需要多次调用newCondition（）方法即可。</p><p>公平锁<br>AbstractQueuedSynchronizer</p><p>AQS；抽象的队列同步器；</p><p>所有抢锁的线程都去queue里面；</p><p>synchronized（也可重入）</p><p>优势<br>synchronized是在JVM层面上实现的， 不但可以通过一些监控工具监控synchronized的锁定， 而且在代码执行时出现异常，JVM会自动释放锁定， 但是使用Lock则不行，lock是通过代码实现的， 要保证锁定一定会被释放，就必须将unLock()放到finally{}中</p><p>场景<br>在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock， 但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态； 实际上，我推荐大家以压力测试为准</p><p>按照性质分类</p><h4 id="公平锁-非公平锁"><a href="#公平锁-非公平锁" class="headerlink" title="公平锁/非公平锁"></a>公平锁/非公平锁</h4><p>公平锁:公平锁是指多个线程按照申请锁的顺序来获取锁。</p><p>非公平锁:非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序， 有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象。</p><p>ReentrantLock而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁</p><p>非公平锁的优点在于吞吐量比公平锁大。</p><p>对于Synchronized而言，也是一种非公平锁。</p><p>ReentrantLock是通过AQS的来实现线程调度，实现公平锁（AbstractQueuedSynchronizer）</p><h4 id="乐观锁-悲观锁"><a href="#乐观锁-悲观锁" class="headerlink" title="乐观锁/悲观锁"></a>乐观锁/悲观锁</h4><p>乐观锁与悲观锁不是指具体的什么类型的锁，而是指看待并发同步的角度</p><p>悲观锁<br>悲观锁认为对于同一个数据的并发操作， 一定是会发生修改的，哪怕没有修改，也会认为修改。 因此对于同一个数据的并发操作，悲观锁采取加锁的形式</p><p>悲观锁适合写操作非常多的场景</p><p>悲观锁在Java中的使用，就是利用各种锁。</p><p>乐观锁<br>乐观锁则认为对于同一个数据的并发操作，是不会发生修改的。 在更新数据的时候，会采用尝试更新，不断重新的方式更新数据。 乐观的认为，不加锁的并发操作是没有事情的</p><p>乐观锁适合读操作非常多的场景</p><p>不加锁会带来大量的性能提升</p><p>乐观锁在Java中的使用，是无锁编程，常常采用的是CAS算法， 典型的例子就是原子类，通过CAS自旋实现原子操作的更新。</p><p>CAS是英文单词CompareAndSwap的缩写，中文意思是：比较并替换。CAS需要有3个操作数：内存地址V，旧的预期值A，即将要更新的目标值B。</p><p>CAS指令执行时，当且仅当内存地址V的值与预期值A相等时，将内存地址V的值修改为B，否则就什么都不做。整个比较并替换的操作是一个原子操作。</p><h4 id="独享锁-共享锁"><a href="#独享锁-共享锁" class="headerlink" title="独享锁/共享锁"></a>独享锁/共享锁</h4><p>独享锁<br>独享锁是指该锁一次只能被一个线程所持有。</p><p>ReentrantLock是独享锁。</p><p>Synchronized是独享锁</p><p>共享锁<br>共享锁是指该锁可被多个线程所持有</p><p>ReentrantReadWriteLock，其读锁是共享锁，其写锁是独享锁。</p><p>读锁的共享锁可保证并发读是非常高效的，读写，写读 ，写写的过程是互斥的。独享锁与共享锁也是通过AQS来实现的， 通过实现不同的方法，来实现独享或者共享。</p><h4 id="互斥锁-读写锁"><a href="#互斥锁-读写锁" class="headerlink" title="互斥锁/读写锁"></a>互斥锁/读写锁</h4><p>独享锁/共享锁是一种广义的说法，互斥锁/读写锁就是具体的实现。</p><p>互斥锁</p><p>ReentrantLock</p><p>读写锁<br>读写锁在Java中的具体实现就是ReentrantReadWriteLock</p><p>可重入锁<br>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，在进入内层加锁方法会自动获取锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a()&#123;</span><br><span class="line"> <span class="keyword">if</span>(lock.lock())&#123;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">//  a(); 递归</span></span><br><span class="line"> <span class="comment">//while true；自旋</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReentrantLock、Synchronized都是可重入锁，可重入锁的一个好处是可一定程度避免死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> sychrnozied <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  xxxxxx;</span><br><span class="line">  test2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> sychronized <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  yyyyy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在上面代码段中，执行 test 方法需要获得当前对象作为监视器的对象锁，但方法中又调用了 test2 的同步方法。</p><p>如果锁是具有可重入性的话，那么该线程在调用 test2 时并不需要再次获得当前对象的锁，可以直接进入 test2 方法进行操作。</p><p>如果锁是不具有可重入性的话，那么该线程在调用 test2 前会等待当前对象锁的释放，实际上该对象锁已被当前线程所持有，不可能再次获得。</p><p>如果锁是不具有可重入性特点的话，那么线程在调用同步方法、含有锁的方法时就会产生死锁。</p><p>所以所有的锁都应该被设计成可重入的</p><hr><p><strong>按照设计分类</strong></p><h4 id="自旋锁-自适应自旋锁"><a href="#自旋锁-自适应自旋锁" class="headerlink" title="自旋锁/自适应自旋锁"></a>自旋锁/自适应自旋锁</h4><p>在Java中，自旋锁是指尝试获取锁的线程不会立即阻塞， 而是采用循环的方式去尝试获取锁，<strong>这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU。</strong> 非阻塞方式获取锁</p><p>自适应自旋</p><p>如果锁被占用的时间很短，自旋等待的效果就会非常好，反之，如果锁被占用的时间很长，那么自旋的线程只会白白消耗处理器资源，而不会做任何有用的工作，反而会带来性能上的浪费。</p><p>在JDK1.6中引入了自适应的自旋锁。</p><p>自旋的时间不固定，由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。</p><p>如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而它将允许自旋等待持续相对更长时间，比如100个循环。</p><p> 如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源</p><p>什么是阻塞方式获取锁</p><p>阻塞指的是暂停一个线程的执行以等待某个条件发生（如某资源就绪）</p><p>sleep()：睡眠</p><p>Thread.sleep (long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。</p><p>顺序进入同步块的，不释放锁，持有monitor对象锁，其他线程是不能进入的。//忍让一段时间 </p><p>阻塞而不释放锁</p><p>wait()：等待</p><p>wait() 与 notify/notifyAll()都是放在同步代码块中才能够执行的。</p><p>Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait() 一样。</p><p>wait() 和 notify() 方法：两个方法配套使用，<strong>wait()</strong> <strong>使得线程进入阻塞状态</strong>，它有两种形式，一种允许 <strong>指定以毫秒为单位的一段时间</strong>作为参数，<strong>另一种没有参数</strong>，<strong>前者</strong>当<strong>对应的 notify() 被调用</strong>或者<strong>超出指定时间</strong>时线程重新进入可执行状态，<strong>后者</strong>则必须<strong>对应的 notify()</strong> 被调用.</p><p><strong>当调用wait方法后，当前线程会释放持有的monitor对象锁</strong>，因此，其他线程还可以进入到同步方法，线程<strong>被唤醒后</strong>（如果加时间参数的话，则会在时间被消耗后唤醒，否则需要通过notify或notifyall唤醒），<strong>需要竞争锁</strong>，获取到锁之后再继续执行。//无条件忍让一段时间</p><p>阻塞并释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;begin wait() ThreadName=&quot;</span></span><br><span class="line">                        + Thread.currentThread().getName());</span><br><span class="line">                lock.wait();</span><br><span class="line">                System.out.println(<span class="string">&quot;  end wait() ThreadName=&quot;</span></span><br><span class="line">                        + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synNotifyMethod</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;begin notify() ThreadName=&quot;</span></span><br><span class="line">                        + Thread.currentThread().getName() + <span class="string">&quot; time=&quot;</span></span><br><span class="line">                        + System.currentTimeMillis());</span><br><span class="line">                lock.notify();</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;  end notify() ThreadName=&quot;</span></span><br><span class="line">                        + Thread.currentThread().getName() + <span class="string">&quot; time=&quot;</span></span><br><span class="line">                        + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">==================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        service.testMethod(lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynNotifyMethodThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SynNotifyMethodThread</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        service.synNotifyMethod(lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">==================</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"> </span><br><span class="line">        ThreadA a = <span class="keyword">new</span> ThreadA(lock);</span><br><span class="line">        a.start();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//NotifyThread notifyThread = new NotifyThread(lock);</span></span><br><span class="line">       <span class="comment">// notifyThread.start();</span></span><br><span class="line"> </span><br><span class="line">        SynNotifyMethodThread c = <span class="keyword">new</span> SynNotifyMethodThread(lock);</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> yield()：礼让</p><p>Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程.</p><p> 放弃当前时间片，将Running状态转变为Runnable状态，不能指定多长时间。//假装忍让，完成具有不确定性不受监督的切换</p><p>暂停当前线程，主动让出自己的CPU时间</p><p>join()：插队</p><p>类似sleep，停止当前线程，让join线程先执行完毕，或执行指定的时间。//插队拼接</p><p>==main线程要等到t1线程运行结束后，才会输出“main end”。如果不加t1.join(),main线程和t1线程是并行的。而加上t1.join(),程序就变成是顺序执行了。==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main start&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(<span class="string">&quot;thread-1&quot;</span>));</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">============================</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">==============线程是顺序执行的。=============================</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main start&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(<span class="string">&quot;thread-1&quot;</span>));</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(<span class="string">&quot;thread-2&quot;</span>));</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//等待t1结束，这时候t2线程并未启动</span></span><br><span class="line">        t1.join();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//t1结束后，启动t2线程</span></span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="comment">//等待t2结束</span></span><br><span class="line">        t2.join();</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当前线程等待join进来的执行完，再继续</p><p>suspend()和resume()：暂停/恢复</p><p>两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。Thread中suspend()和resume()两个方法在JDK1.5中已经废除，不再介绍。因为有死锁倾向。</p><p>有死锁倾向</p><p>线程类常用方法</p><p>sleep(): 强迫一个线程睡眠Ｎ毫秒。</p><p>isAlive(): 判断一个线程是否存活。</p><p>join(): 等待线程终止。</p><p>activeCount(): 程序中活跃的线程数。</p><p>enumerate(): 枚举程序中的线程。</p><p>currentThread(): 得到当前线程。</p><p>isDaemon(): 一个线程是否为守护线程。</p><p>setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束)</p><p>setName(): 为线程设置一个名称。</p><p>wait(): 强迫一个线程等待。</p><p>notify(): 通知一个线程继续运行。</p><p>setPriority(): 设置一个线程的优先级。</p><h4 id="锁粗化-锁消除"><a href="#锁粗化-锁消除" class="headerlink" title="锁粗化/锁消除"></a>锁粗化/锁消除</h4><p>锁粗化和消除其实设计原理都差不多，都是为了减少没必要的加锁</p><p>锁消除<br>锁消除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。</p><p>锁消除的主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们是线程私有的，同步加锁自然就无须进行。 </p><p>锁粗化</p><p>如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。如果虚拟机探测到有这样一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部</p><h4 id="偏向锁-轻量级锁-重量级锁"><a href="#偏向锁-轻量级锁-重量级锁" class="headerlink" title="偏向锁/轻量级锁/重量级锁"></a>偏向锁/轻量级锁/重量级锁</h4><p>这三种锁是指锁的状态，并且是针对Synchronized</p><p>偏向锁<br>偏向锁是指一段同步代码一直被一个线程所访问， 那么该线程会自动获取锁。降低获取锁的代价。</p><p>轻量级锁<br>是指当锁是偏向锁的时候，被另一个线程所访问， 偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</p><p>重量级锁<br>当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去， 当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。 重量级锁会让其他申请的线程进入阻塞，性能降低。</p><p>分段锁<br>分段锁是一种锁的设计，并不是具体的一种锁</p><p>ConcurrentHashMap并发的实现就是通过分段锁的形式来实现高效的并发操作</p><p>ConcurrentHashMap中的分段锁称为Segment，它即类似于HashMap（JDK7与JDK8中HashMap的实现）的结构，即内部拥有一个Entry数组，数组中的每个元素又是一个链表；同时又是一个ReentrantLock（Segment继承了ReentrantLock)。</p><p>当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在那一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。</p><p>但是，在统计size的时候，可就是获取hashmap全局信息的时候，就需要获取所有的分段锁才能统计。分段锁的设计目的是细化锁的粒度，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</p><p>分布式锁<br>Redisson</p><p>数据库锁<br><a href="http://hedengcheng.com/?p=771#_Toc374698307">http://hedengcheng.com/?p=771#_Toc374698307</a></p><p>表锁、行锁、间隙锁、悲观锁、乐观锁、共享锁（读锁）、排他锁（写锁）</p><h1 id="8、分布式协调技术Zookeeper实现分布式锁"><a href="#8、分布式协调技术Zookeeper实现分布式锁" class="headerlink" title="8、分布式协调技术Zookeeper实现分布式锁"></a>8、分布式协调技术Zookeeper实现分布式锁</h1><h4 id="zookeeper实现过分布式锁吗？"><a href="#zookeeper实现过分布式锁吗？" class="headerlink" title="zookeeper实现过分布式锁吗？"></a>zookeeper实现过分布式锁吗？</h4><h4 id="分布式情况下，怎么解决订单号生成的重复问题？"><a href="#分布式情况下，怎么解决订单号生成的重复问题？" class="headerlink" title="分布式情况下，怎么解决订单号生成的重复问题？"></a>分布式情况下，怎么解决订单号生成的重复问题？</h4><p>问题产生</p><p>真分布式/伪分布式式</p><p>分布式优缺点</p><p>解决</p><p>1.使用分布式锁<br>    1、mysql数据库的乐观锁实现<br>    2、redis–redission<br>    3、zookeeper</p><p>2.提前生成好订单号，存放在内存取。获取订单号，直接从内存中取</p><p>实现思路</p><p>设计思想</p><blockquote><p>对于单进程的并发场景，我们可以使用synchronized关键字和Reentrantlock类等</p><p>对于分布式场景，我们可以使用分布式锁</p><p>创建锁<br>多个jvm服务器之间，同时在zookeeper上创建相同的一个临时节点，因为临时节点路径是保证唯一。<br>只要谁能够创建节点成功，谁就能够获取到锁<br>没有创建成功节点，只能注册个监听器监听这个锁并进行等待，当锁释放的时候，采用事件通知给其他客户端重新获取锁的资源，这时客户端使用事件监听，如果该临时节点被删除的话，重新进入获取锁的步骤</p><p>释放锁<br>Zookeeper使用直接关闭临时节点session会话连接，因为临时节点生命周期与session会话绑定在一起<br>如果session会话连续关闭的话，该临时节点也会被删除，这时候客户端使用事件监听，如果该临时节点被删除的话，重新进入到获取锁的步骤。</p></blockquote><hr><p>回顾我们的zookeeper临时节点的创建</p><p> zkClient端的事件监控通知demo</p><p>步骤方案</p><p>启动Linux系统下的zk服务器并设置好防火墙</p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>log4j.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.atguigu.File=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.atguigu.File.file=d:\\atguigu.log</span><br><span class="line">log4j.appender.atguigu.File.DatePattern=.yyyy-MM-dd</span><br><span class="line">log4j.appender.atguigu.File.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.atguigu.File.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %5p (%C:%M) - %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.atguigu.Console=org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.atguigu.Console.layout=org.apache.log4j.PatternLayout    </span><br><span class="line">log4j.appender.atguigu.Console.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; %5p (%C:%M) - %m%n </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.rootLogger=error,atguigu.Console</span><br><span class="line"></span><br><span class="line">log4j.logger.com.atguigu=error</span><br></pre></td></tr></table></figure><p>模拟订单的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.distributed.lock.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hhf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-10 22:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNumCreateUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrdNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\t 生产订单号:&quot;</span>+(++number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZK接口ZKLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.distributed.lock.zk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hhf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-10 22:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ZkLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zklock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zkUnlock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模版模式抽象类ZkAbstractTemplateLock</p><p>模版模式</p><blockquote><p>在模板模式(Template Pattern)设计模式中，用一个抽象类公开定义了执行它的方法的方式、模板，它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p><p>意图:定义一个操作中的算法的骨架，将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>主要解决:一些方法通用，却在每一个子类都重写了这一方法。</p><p>何时使用:有一些通用的方法</p><p>如何解决:将这些通用的算法抽象出来</p><p>关键代码:在抽象父类中实现通用的方法，其他步骤下放到子类中实现。</p><p>应用实例:</p><p>1、西游记中菩萨定好的81难就是一个顶层的逻辑骨架</p><p>2、spring中对Hibernate的支持，将一些已经定好的方法封装起来，比如开启事务、获取session、关闭session等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p><p>优点:<br>1、封装不变部分，扩展可变部分。<br>2、提取公共代码，便于维护<br>3、行为由父类控制，子类实现</p><p>缺点:每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p>使用场景:<br>1、有多个子类共用的方法，且逻辑相同<br>2、重要的、复杂的方法，可以考虑作为模板方法。</p></blockquote><p>ZkAbstractTemplateLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.distributed.lock.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.ZkClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hhf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-10 22:50</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkAbstractTemplateLock</span> <span class="keyword">implements</span> <span class="title">ZkLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZKSERVER = <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer TIME_OUT = <span class="number">45</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String path = <span class="string">&quot;/zklock0510&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> CountDownLatch countDownLatch = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ZkClient zkClient = <span class="keyword">new</span> ZkClient(ZKSERVER,TIME_OUT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抢锁方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zklock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先看看有没有人已经用有锁了</span></span><br><span class="line">        <span class="keyword">if</span> (tryZkLock())&#123; <span class="comment">//如果返回true就说明没有人拥有锁</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t占用锁成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//如果抢不到锁，就等待</span></span><br><span class="line">            waitZkLock(); <span class="comment">//等待</span></span><br><span class="line">            zklock(); <span class="comment">//递归思想，若有人释放锁了，那么重新调用这个方法，去抢锁，</span></span><br><span class="line">             &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">waitZkLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryZkLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zkUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zkClient != <span class="keyword">null</span>)&#123;</span><br><span class="line">            zkClient.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t释放锁成功&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现分布式锁的类ZkDistributedLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.distributed.lock.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.I0Itec.zkclient.IZkDataListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hhf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-10 23:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkDistributedLock</span> <span class="keyword">extends</span> <span class="title">ZkAbstractTemplateLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitZkLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IZkDataListener iZkDataListener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  监听的zk临时节点看看有没有改变</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> dataPath</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 看看监听的zk临时节点有没有被删除</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> datapath</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String datapath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (countDownLatch != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//zk的监听方法，监听zk的这个方法handleDataDeleted()有没有执行删除临时节点的方法,如果有就去抢锁</span></span><br><span class="line">        zkClient.subscribeDataChanges(path,iZkDataListener); <span class="comment">//如果没有抢到锁，就监听这个zk的这个临时节点的路径</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(path))&#123;<span class="comment">//如果有这个节点了，就说明这个节点已被抢了</span></span><br><span class="line">            <span class="comment">//那么只能等待，不能往下执行，除非被占用的资源删掉了</span></span><br><span class="line">            countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);<span class="comment">//临时节点只有1个</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            zkClient.unsubscribeDataChanges(path,iZkDataListener);<span class="comment">//解除对zk相应临时节点的监听</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryZkLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    zkClient.createEphemeral(path); <span class="comment">//在某个路径下面创建临时节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//创建成功返回true</span></span><br><span class="line">               &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//创建失败返回false</span></span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>业务实现类OrderZkService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.distributed.lock.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hhf.distributed.lock.util.OrderNumCreateUtil;</span><br><span class="line"><span class="keyword">import</span> com.hhf.distributed.lock.zk.ZkDistributedLock;</span><br><span class="line"><span class="keyword">import</span> com.hhf.distributed.lock.zk.ZkLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hhf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-10 22:25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderNumCreateUtil orderNumCreateUtil = <span class="keyword">new</span> OrderNumCreateUtil();</span><br><span class="line">    <span class="keyword">private</span> ZkLock zkLock = <span class="keyword">new</span> ZkDistributedLock(); <span class="comment">//手写的zk版的分布式锁</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOrdNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        zkLock.zklock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获得编号:-----&gt;:&quot;</span>+ orderNumCreateUtil.getOrdNumber()); <span class="comment">//线程值</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                zkLock.zkUnlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终效果图</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816105044784.png" alt="image-20210816105044784"></p><h1 id="9、SpringCloud-Alibaba系列"><a href="#9、SpringCloud-Alibaba系列" class="headerlink" title="9、SpringCloud Alibaba系列"></a>9、SpringCloud Alibaba系列</h1><h2 id="1-Nacos-spring-cloud-alibaba"><a href="#1-Nacos-spring-cloud-alibaba" class="headerlink" title="1. Nacos[spring cloud alibaba]"></a>1. Nacos[spring cloud alibaba]</h2><p><strong>简介</strong><br>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p><strong>文档</strong><br><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">https://nacos.io/zh-cn/docs/what-is-nacos.html</a></p><p><strong>安装</strong><br><a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></p><p>1、windows</p><p>2、linux</p><p>3、docker化</p><p><strong>使用</strong></p><p>1、核心概念</p><p>namespace**(命名空间)**</p><p>namespace 的设计是 nacos 基于此做<strong>多环境</strong>以及<strong>多租户数据</strong>(配置和服务)<strong>隔离</strong>的</p><p>  从一个租户(用户)的角度来看，如果有多套不同的环境，那么这个时候可以根据指定的环境来创建不同的 namespce，以此来实现多环境的隔离。例如，你可能有日常，预发和生产三个不同的环境，那么使用一套 nacos 集群可以分别建以下三个不同的 namespace。如下图所示：</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816105114310.png" alt="image-20210816105114310"></p><p>从多个租户(用户)的角度来看，每个租户(用户)可能会有自己的 namespace,每个租户(用户)的配置数据以及注册的服务数据都会归属到自己的 namespace 下，以此来实现多租户间的数据隔离。例如超级管理员分配了三个租户，分别为张三、李四和王五。分配好了之后，各租户用自己的账户名和密码登录后，创建自己的命名空间。如下图所示：</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816105128914.png" alt="image-20210816105128914"></p><p> 注意: 该功能还在规划中。</p><p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p><p>配置<br>在系统开发过程中，开发者通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者运维人员完成。配置变更是调整系统运行时的行为的有效手段。</p><p>配置管理<br>系统配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等所有与配置相关的活动。</p><p>配置项<br> 一个具体的可配置的参数与其值域，通常以 param-key=param-value 的形式存在。例如我们常配置系统的日志输出级别（logLevel=INFO|WARN|ERROR） 就是一个配置项。</p><p>配置集<br>一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p><p>配置集 ID**(data-id)**<br>Nacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。</p><p>配置分组<br>Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。</p><p>endpoint<br>当 nacos server 集群需要扩缩容时，客户端需要有一种能力能够及时感知到集群发生变化。及时感知到集群的变化是通过 endpoint来实现的。也即客户端会定时的向endpoint发送请求来更新客户端内存中的集群列表。</p><p>其他查看官方文档</p><p>2、nacos-discovery服务注册、发现</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816105156172.png" alt="image-20210816105156172"></p><ol><li><p>创建provider应用（cloud选择ribbon，一会儿要测试调用）</p></li><li><p>引入nacos-discovery</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;--!注意:版本0.2xReLEASE对应的是spring boot2.x 版本，0.1.x对应的是springboot1.x--&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改application.properties</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8070</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-provider #指定应用名字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848  #指定nacos地址</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启用服务注册发现功能</li></ol><p><code>@EnableDiscoveryClient</code></p><ol start="5"><li><p>在nacos控制台查看注册的服务</p></li><li><p>创建consumer应用（cloud选择ribbon，测试调用）</p><pre><code>1、引入nacos-discovery依赖2、修改application.properties指定nacos地址3、启用服务注册发现4、利用ribbon测试远程调用</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/echo/&#123;str&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://service-provider/echo/&quot;</span> + str, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>3、nacos-config配置管理（配置的动态变更）</p><p>·     1、引入nacos-config</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;nacos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816142715502.png" alt="image-20210816142715502"></p><p>·     2、创建bootstrap.properties文件，指定nacos配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">xxxxxx</span></span><br></pre></td></tr></table></figure><p>·     3、我们需要了解的默认规则</p><p>之所以需要配置 spring.application.name ，是因为它是构成 Nacos 配置管理 dataId字段的一部分。</p><p>在 Nacos Spring Cloud 中，dataId 的完整格式如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure><p>  prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</p><p>  spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</p><p>  file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</p><p>·     1、spring.application.name很重要 ，是因为它是构成 Nacos 配置管理 dataId字段的一部分。</p><p>·     2、dataId 的完整格式 ${prefix}-${spring.profile.active}.${file-extension}</p><p>·     prefix</p><p>·      默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</p><p>·     spring.profile.active</p><p>·     当前环境对应的 profile。当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</p><p>·     file-exetension</p><p>·     为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</p><p>·     4、通过 Spring Cloud 原生注解 @RefreshScope 实现配置自动更新：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/config&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;useLocalCache:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> useLocalCache;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> useLocalCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     5、修改配置文件，查看是否实时变更</p><p>·     6、高级：nacos，指定namespace&amp;多data-id加载</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=gulimall-pms</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spring.application.name=multi-data-ids-example</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.server-addr=127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.2.1.RELEASE 以上支持多个配置，文档：https://github.com/spring-cloud-incubator/spring-cloud-alibaba/wiki/Nacos-config</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nacos 控制台添加配置：</span></span><br><span class="line"><span class="comment">#   Data ID：app.properties</span></span><br><span class="line"><span class="comment">#   Group：multi-data-ids</span></span><br><span class="line"><span class="comment">#   配置内容：app.user.cache=false</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.namespace=ef1c9ca2-40d7-4eb6-ad7f-c12c5751c193</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[0].data-id=app.properties</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.ext-config[0].group=multi-data-ids</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[0].refresh=true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 本地安装 MySQL</span></span><br><span class="line"><span class="comment"># 2. Nacos 控制台添加配置：</span></span><br><span class="line"><span class="comment">#   Data ID：datasource.properties</span></span><br><span class="line"><span class="comment">#   Group：multi-data-ids</span></span><br><span class="line"><span class="comment">#   配置内容示例：</span></span><br><span class="line"><span class="comment">#       spring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false</span></span><br><span class="line"><span class="comment">#       spring.datasource.username=root</span></span><br><span class="line"><span class="comment">#       spring.datasource.password=root</span></span><br><span class="line"><span class="comment">#       spring.datasource.initial-size=10</span></span><br><span class="line"><span class="comment">#       spring.datasource.max-active=20</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[1].data-id=datasource.properties</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[1].refresh=true</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.ext-config[1].group=multi-data-ids</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 本地安装 Redis</span></span><br><span class="line"><span class="comment"># 2. Nacos 控制台添加配置：</span></span><br><span class="line"><span class="comment">#   Data ID：redis.properties</span></span><br><span class="line"><span class="comment">#   Group：multi-data-ids</span></span><br><span class="line"><span class="comment">#   配置内容示例：</span></span><br><span class="line"><span class="comment">#       spring.redis.host=localhost</span></span><br><span class="line"><span class="comment">#       spring.redis.password=20190101</span></span><br><span class="line"><span class="comment">#       spring.redis.timeout=5000</span></span><br><span class="line"><span class="comment">#       spring.redis.max-idle=5</span></span><br><span class="line"><span class="comment">#       spring.redis.max-active=10</span></span><br><span class="line"><span class="comment">#       spring.redis.max-wait=3000</span></span><br><span class="line"><span class="comment">#       spring.redis.test-on-borrow=false</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[2].data-id=redis.properties</span></span><br><span class="line"><span class="string">spring.cloud.nacos.config.ext-config[2].refresh=true</span></span><br><span class="line"><span class="comment">#spring.cloud.nacos.config.ext-config[2].group=multi-data-ids</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     7、当一个配置在本地文件和nacos中都有时，优先使用nacos的，如果nacos中娶不到值，则用本地配置的</p><h2 id="2-SpringCloud-Gateway"><a href="#2-SpringCloud-Gateway" class="headerlink" title="2. SpringCloud Gateway"></a>2. SpringCloud Gateway</h2><p>简介</p><p>Spring Cloud Gateway旨在提供一种简单而有效的方式来对API进行路由，并为他们提供切面，例如：安全性，监控/指标 和弹性等。</p><p><strong>为什么使用API 网关？</strong></p><p>API 网关出现的原因是微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><p>客户端会多次请求不同的微服务，增加了客户端的复杂性。<br>存在跨域请求，在一定场景下处理相对复杂。<br>认证复杂，每个服务都需要独立认证。<br>难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施。<br>某些微服务可能使用了防火墙 / 浏览器不友好的协议，直接访问会有一定的困难。</p><p>以上这些问题可以借助 API 网关解决。API 网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过 API 网关这一层。也就是说，API 的实现方面更多的考虑业务逻辑，而安全、性能、监控可以交由 API 网关来做，这样既提高业务灵活性又不缺安全性： </p><p><strong>使用 API 网关后的优点如下：</strong></p><p>易于监控。可以在网关收集监控数据并将其推送到外部系统进行分析。</p><p>易于认证。可以在网关上进行认证，然后再将请求转发到后端的微服务，而无须在每个微服务中进行认证。</p><p>减少了客户端与各个微服务之间的交互次数。</p><p><strong>API</strong> <strong>网关选型：</strong></p><p>业界情况</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816142833509.png" alt="image-20210816142833509"></p><p>gateway性能高于zuul，在高吞吐量，高并发情况下表现很好。</p><p>注意</p><p>Spring Cloud Gateway依赖Spring Boot和Spring Webflux提供的Netty runtime。它不能在传统的Servlet容器中工作或构建为WAR</p><p>Webflux:    <a href="https://blog.51cto.com/liukang/2090163">https://blog.51cto.com/liukang/2090163</a></p><p>特性</p><p>基于Spring 5，Reactor 和 Spring Boot 2.0</p><ol><li><p>能够在任何请求属性上匹配路由</p></li><li><p>断言和过滤器是特定于路由的</p></li><li><p>Hystrix断路器集成</p></li><li><p>Spring Cloud DiscoveryClient集成</p></li><li><p>易于编写断言和过滤器</p></li><li><p>请求速率限制</p></li><li><p>路径重写</p></li></ol><p>文档</p><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RELEASE/single/spring-cloud-gateway.html#_cors_configuration">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.1.0.RELEASE/single/spring-cloud-gateway.html#_cors_configuration</a></p><p>概念</p><p>Route 路由</p><p>gateway的基本构建模块。它由ID、目标URI、断言集合和过滤器集合组成。如果聚合断言结果为真，则匹配到该路由。</p><p>Predicate 断言</p><p>这是一个Java 8 Function Predicate。输入类型是 Spring Framework ServerWebExchange。这允许开发人员可以匹配来自HTTP请求的任何内容，例如Header或参数。</p><p>Filter 过滤器</p><p>这些是使用特定工厂构建的 Spring FrameworkGatewayFilter实例。所以可以在返回请求之前或之后修改请求和响应的内容。</p><p>入门示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemogatewayApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">            .route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/get&quot;</span>)</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">            .route(<span class="string">&quot;host_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.myhost.org&quot;</span>)</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">            .route(<span class="string">&quot;rewrite_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.rewrite.org&quot;</span>)</span><br><span class="line">                .filters(f -&gt; f.rewritePath(<span class="string">&quot;/foo/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$&#123;segment&#125;&quot;</span>))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">            .route(<span class="string">&quot;hystrix_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrix.org&quot;</span>)</span><br><span class="line">                .filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>)))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">            .route(<span class="string">&quot;hystrix_fallback_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrixfallback.org&quot;</span>)</span><br><span class="line">                .filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>).setFallbackUri(<span class="string">&quot;forward:/hystrixfallback&quot;</span>)))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">            .route(<span class="string">&quot;limit_route&quot;</span>, r -&gt; r</span><br><span class="line">                .host(<span class="string">&quot;*.limited.org&quot;</span>).and().path(<span class="string">&quot;/anything/**&quot;</span>)</span><br><span class="line">                .filters(f -&gt; f.requestRateLimiter(c -&gt; c.setRateLimiter(redisRateLimiter())))</span><br><span class="line">                .uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心</p><p>Predicate 断言</p><p>·     RoutePredicateFactory</p><p>Filter 过滤器</p><p>·     GatewayFilterFactory</p><p>·     GlobalFilter</p><p>应用</p><p>1、网关项目的pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>gulimall-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>谷粒商城网关<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、整合各个项目的统一swagger接口（后来做）</p><p>·     GulimallSwaggerResourceProvider</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gulimall.gateway.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.TypeReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallSwaggerResourceProvider</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * swagger2默认的url后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SWAGGER2RESOURCESURL = <span class="string">&quot;/swagger-resources&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static final String SWAGGER2URL = &quot;/v2/api-docs&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关路由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网关应用名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String self;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GulimallSwaggerResourceProvider</span><span class="params">(RouteLocator routeLocator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routeLocator = routeLocator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;SwaggerResource&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; routeHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 由于我的网关采用的是负载均衡的方式，因此我需要拿到所有应用的serviceId</span></span><br><span class="line">        <span class="comment">// 获取所有可用的host：serviceId</span></span><br><span class="line">        routeLocator.getRoutes().filter(route -&gt; route.getUri().getHost() != <span class="keyword">null</span>)</span><br><span class="line">                .filter(route -&gt; !self.equals(route.getUri().getHost()))</span><br><span class="line">                .subscribe(route -&gt; routeHosts.add(route.getUri().getHost()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录已经添加过的server，存在同一个应用注册了多个服务在nacos上</span></span><br><span class="line">        Set&lt;String&gt; dealed = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        routeHosts.forEach(instance -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//String url = &quot;/&quot; + instance + SWAGGER2URL;</span></span><br><span class="line">            String url = <span class="string">&quot;http://&quot;</span>+instance+<span class="string">&quot;/&quot;</span>+SWAGGER2RESOURCESURL;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!dealed.contains(url)) &#123;</span><br><span class="line">                dealed.add(url);</span><br><span class="line">                String forObject = restTemplate.getForObject(url, String.class);</span><br><span class="line">                List&lt;Map&lt;String, String&gt;&gt; list = JSON.parseObject(forObject, <span class="keyword">new</span> TypeReference&lt;List&lt;Map&lt;String, String&gt;&gt;&gt;() &#123;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//要获取每个swagger-resource从而得出真正的v2/docs；所以加上ribbon；</span></span><br><span class="line">                SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">                <span class="comment">// 拼接url，样式为/serviceId/v2/api-info，当网关调用这个接口时，网关就需要配置路由，则会自动通过负载均衡寻找对应的主机</span></span><br><span class="line">                <span class="comment">//有编码问题；</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                    swaggerResource.setUrl(<span class="string">&quot;/&quot;</span>+instance+list.get(<span class="number">0</span>).get(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">                    swaggerResource.setName(list.get(<span class="number">0</span>).get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                    swaggerResource.setSwaggerVersion(list.get(<span class="number">0</span>).get(<span class="string">&quot;swaggerVersion&quot;</span>));</span><br><span class="line">                    resources.add(swaggerResource);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SwaggerResourceController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gulimall.gateway.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * gateway整合swagger的核心</span></span><br><span class="line"><span class="comment"> * 1）、每一个微服务/swagger-resources;都可以获取自己微服务的swagger信息</span></span><br><span class="line"><span class="comment"> * [</span></span><br><span class="line"><span class="comment"> *     &#123;</span></span><br><span class="line"><span class="comment"> *         &quot;name&quot;: &quot;商品平台&quot;,</span></span><br><span class="line"><span class="comment"> *         &quot;url&quot;: &quot;/v2/api-docs?group=商品平台&quot;,[这个很重要]</span></span><br><span class="line"><span class="comment"> *         &quot;swaggerVersion&quot;: &quot;2.0&quot;,</span></span><br><span class="line"><span class="comment"> *         &quot;location&quot;: &quot;/v2/api-docs?group=商品平台&quot;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * ]</span></span><br><span class="line"><span class="comment"> * 2）、我们通过网关，发现出所有上线的微服务以及他们的/swagger-resources，获取到每个微服务的swagger的url</span></span><br><span class="line"><span class="comment"> * 3）、给每一个微服务发送刚才url( /v2/api-docs?group=商品平台)就可以获取到服务的swagger接口文档信息</span></span><br><span class="line"><span class="comment"> * 4）、GulimallSwaggerResourceProvider可以帮我们</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger-resources&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerResourceController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GulimallSwaggerResourceProvider swaggerResourceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwaggerResourceController</span><span class="params">(GulimallSwaggerResourceProvider swaggerResourceProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.swaggerResourceProvider = swaggerResourceProvider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/configuration/security&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;SecurityConfiguration&gt; <span class="title">securityConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(SecurityConfigurationBuilder.builder().build(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/configuration/ui&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UiConfiguration&gt; <span class="title">uiConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(UiConfigurationBuilder.builder().build(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;SwaggerResource&gt;&gt; swaggerResources() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(swaggerResourceProvider.get(), HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、路由各个请求到相应的服务配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#         =======pms====</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pms_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-pms</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/pms/**,/gulimall-pms/**</span></span><br><span class="line"><span class="comment">#            - Path=/gulimall-pms/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gulimall-pms/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        =======oms====</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">oms_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-oms</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/oms/**,/gulimall-oms/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gulimall-oms/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#        =======sms====</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sms_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-sms</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/sms/**,/gulimall-sms/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gulimall-sms/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"><span class="comment">#        =======tms====</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tms_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-tms</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/tms/**,/gulimall-tms/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gulimall-tms/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"><span class="comment">#        ======ums=====</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">ums_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-ums</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/ums/**,/gulimall-ums/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gulimall-ums/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"><span class="comment">#        ======wms====</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">wms_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-wms</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/wms/**,/gulimall-wms/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/gulimall-wms/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">88</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、整合Hystrix进行容错</p><p>·     0、导入Hystrix依赖，并开启断路保护@EnableHystrix或者@EnableCircuitBreaker</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     1、Gateway配置各个微服务服务容错</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">hystrix_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://backing-service:8088</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/consumingserviceendpoint</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">fallbackcmd</span></span><br><span class="line">            <span class="attr">fallbackUri:</span> <span class="string">forward:/incaseoffailureusethis</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     2、Gateway配置全局容错</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">fallbackcmd</span></span><br><span class="line">            <span class="attr">fallbackUri:</span> <span class="string">forward:/incaseoffailureusethis</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在gateway中写一个controller。来映射incaseoffailureusethis即可</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><h4 id="3-你是怎么解决分布式事务？"><a href="#3-你是怎么解决分布式事务？" class="headerlink" title="3.你是怎么解决分布式事务？"></a>3.你是怎么解决分布式事务？</h4><p>答：我是用SpringCloudAlibaba开源的Seata</p><h4 id="4-那请你说说你对Seata的理解？"><a href="#4-那请你说说你对Seata的理解？" class="headerlink" title="4.那请你说说你对Seata的理解？"></a>4.那请你说说你对Seata的理解？</h4><p>答：seata它是由1+3的套件所组成，所谓的1+3的1就是全局唯一事务的id，只要在同一ID下不管几个库，都能证明是一套的全局下面的统一体，3就是3大组件，主要是指TC，TM，RM三个概念。</p><h4 id="5-那TC，TM，RM是怎么协作的？"><a href="#5-那TC，TM，RM是怎么协作的？" class="headerlink" title="5.那TC，TM，RM是怎么协作的？"></a>5.那TC，TM，RM是怎么协作的？</h4><p>答:请你谈谈什么是服务的降级，服务的熔断，服务的限流？</p><h4 id="6-SpringCloud-Alibaba和Spring团队研发的SpringCloud有什么区别？"><a href="#6-SpringCloud-Alibaba和Spring团队研发的SpringCloud有什么区别？" class="headerlink" title="6.SpringCloud Alibaba和Spring团队研发的SpringCloud有什么区别？"></a>6.SpringCloud Alibaba和Spring团队研发的SpringCloud有什么区别？</h4><p>答：SpringCloud原生的很多组件已经不维护了，而springcloudalibaba是借鉴了原生的springcloud技术，开发出的新产品。而且更加的方便易用，springcloudalibaba已能提供微服务治理的整套解决方案并经过了双十一的验证</p><h4 id="7-SpringCloud和SpringBoot的区别和关系？"><a href="#7-SpringCloud和SpringBoot的区别和关系？" class="headerlink" title="7.SpringCloud和SpringBoot的区别和关系？"></a>7.SpringCloud和SpringBoot的区别和关系？</h4><p>SpringBoot专注于快速，方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</p><h4 id="什么是服务的熔断？"><a href="#什么是服务的熔断？" class="headerlink" title="什么是服务的熔断？"></a>什么是服务的熔断？</h4><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。</p><p>当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。当检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败就会启动熔断机制。熔断机制的注解是@HystrixCommand。</p><h4 id="什么是服务的降级？"><a href="#什么是服务的降级？" class="headerlink" title="什么是服务的降级？"></a>什么是服务的降级？</h4><p>整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。</p><p>服务降级处理是在客户端实现完成的，与服务端没有关系。</p><p>熔断和降级的区别：</p><blockquote><p>服务熔断<br>一般是指某个服务故障或者异常引起，类似现实世界中的”保险丝”，当某个异常条件被触发，直接熔断整个服务，而不是一直等到此服务超时</p><p>服务降级<br>所谓降级，一般是从整体负荷考虑，就是当某个服务熔断后，服务器将不再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省值。<br>这样做，虽然整体服务水平下降，但是好歹可用，比直接挂掉要强。 </p></blockquote><h1 id="10、本地事务-amp-amp-分布式事务"><a href="#10、本地事务-amp-amp-分布式事务" class="headerlink" title="10、本地事务&amp;&amp;分布式事务"></a>10、本地事务&amp;&amp;分布式事务</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h3><p>1.本地事务的简介</p><p>本地事务是在单个数据源上进行数据的访问和更新等操作的</p><p>2.ACID的特性</p><p>·     ACID</p><p>原子性（Atomicity）,一致性(Consistency),隔离性或者独立性(Isolation)和持久性(Durabilily)。简称就是:ACID</p><p>原子性（Atomicity）：一系列的操作整体不可拆分，要么同时成功，要么同时失败。</p><p>一致性(Consistency)：数据在事务的前后，业务整体一致。</p><p>隔离性或者独立性(Isolation)：事务之间是互相隔离的。</p><p>持久性(Durabilily)：一旦事务成功，数据一定会落盘在数据库中。</p><p>3.事务的传播行为</p><p>Propagation propagation() default </p><p>Propagation是事务的传播行为:  其意思就是： 当事务里面还有其他事务方法的时候，其他事务方法就有以下这么多种可能来运行。</p><ol><li><p>REQUIRED【无论如何这个方法都必须在事务内运行】： 需要一个事物，如果外层已经存在了事务。就用已经存在的事务，否则就创建一个事务</p></li><li><p>REQUIRES_NEW【总是需要创建新的事务】：无论外层有没有存在事务，都自己创建一个事务，在自己的事物内进行运行。</p></li></ol><p>《以上两个是最常用》</p><ol start="3"><li><p>SUPPORTS【支持事务】：如果外层有事务，就在该事务内运行，否则就可以不以事务的方式运行。</p></li><li><p>MANDATORY【强制运行在已经存在的事务内】： 必须在事务内运行，如果外层已存在事务，就在这个事务内运行，如果外层没有事务，就将抛出异常。</p></li><li><p>NOT_SUPPORTED【不支持运行在事务内】： 必须以非事务的方式运行。如果外层已经有事务了，就把外层的事务暂停。</p></li><li><p>NEVER【必须以非事务方式运行】： 如果外层有事务，就会抛出异常，否则就会正常运行。</p></li><li><p>NESTED【嵌入式的事务】： 基于存档点的事物</p></li></ol><p>4.事务的隔离级别</p><p>隔离级别产生的原因：是因为数据库同时存在即读又写，所以得防止在写的过程中，读这条数据是要读到，还是怎么去读，隔离级别就是为了保证同时对一个数据进行读写该要怎么处理。</p><p>读未提交【read uncommitted】（可以读到没有提交的数据）</p><p>读已提交【read committed】（只能读到提交了的数据） Oracle数据库默认的隔离级别</p><p>可重复读【Repeatable read】（同一个事务内，之前读到的数据是多少，以后还是多少，只要事物不结束的情况下） Mysql数据库默认的隔离级别</p><p>串行化【Serializable】（已经不用）</p><p>以上不同隔离级别可能会导致以下现象</p><p>·     1.脏读：若把隔离级别调为读未提交，那么读到没有生效的数据（读未提交）就会发生脏读，这是不允许发生的</p><p>·     2.幻读：同一个事物内下次读到的和上次读到的不一样（读未提交，读已提交）是允许发生的</p><p>·     3.可重复读：可重复多次读取数据，多次读取到的都一样，就不会有幻读的问题</p><p>·     4.不可重复读：不能多次重复读取数据，多次读取会读到不一样的，这会有幻读的问题。</p><p>5.事务的回滚策略</p><p>rollbackFor：指定的异常必须回滚</p><p>noRollbackFor：发生指定的异常不用回滚</p><p>异常<br>运行时异常（不受检查异常，没有强制要求try-catch的）：都会回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayOutofIndex</span><br><span class="line">Math...</span><br><span class="line">OutofMemory</span><br><span class="line">NullPointException</span><br><span class="line">编译异常（受检查异常）【必须进行处理，要么try-catch要么throws】的：都不回滚</span><br><span class="line">FileNotFoundException</span><br></pre></td></tr></table></figure><p>6.SpringBoot本地事务之大坑</p><p>SpringBoot在做事务的时候，在某些情况下有可能会不起作用，特别是使用@Transactional(propagation = Propagation.REQUIRES_NEW)的隔离级别的时候，有可能不起事务的作用。</p><p>因为 @Transactional的底层是AOP，那么事务想要生效必须是使用代理对象来调用才行： 如果你的业务代码中，有使用事务的隔离级别，尽量不要使用this来调用,防止事务的失效。</p><p>因为this并不是代理对象，就相当于代码粘到了大方法里面，this.方法（）是跟外层用的同一个事务，所以事务失效了。</p><p>解决方案：开启AOP来进行代理，导入aop-starter，暴露代理对象来解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.开启自动代理:@EnableAspectJAutoProxy</span><br><span class="line">2.暴露代理对象：@EnableAspectJAutoProxy(exposeProxy=true)</span><br><span class="line">3.获取代理对象：AopContext.getCurrent()</span><br></pre></td></tr></table></figure><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>7.什么是分布式事务</p><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上。</p><p>简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。</p><p>本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><p>分布式系统经常出现的异常如：</p><p>机器宕机，网络异常，消息丢失，消息乱序，数据错误，不可靠的TCP，存储数据丢失等问题。</p><p>8.BASE【柔性的事务： 最终一致，基本可用，软状态】</p><p>·     分布式事务的相关解决方案</p><p>·     基于XA协议的两阶段提交</p><p>数据库支持的2PC【2 phase commit】，又叫做 XA Transactions。</p><p>MySQL从5.5版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。</p><p>其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交.</span><br><span class="line">第二阶段：事务协调器要求每个数据库提交数据。</span><br><span class="line">其中，如果有任何一个数据库否决此次提交，那么所有数据库都会被要求回滚它们在此事务中的那部分信息。</span><br><span class="line">可用率 a%*b% = 99%*99%=98%</span><br></pre></td></tr></table></figure><p>总的来说，XA协议比较简单，而且一旦商业数据库实现了XA协议，使用分布式事务的成本也比较低。但是，XA也有致命的缺点，那就是性能不理想，特别是在交易下单链路，往往并发量很高，XA无法满足高并发场景。XA目前在商业数据库支持的比较理想，在mysql数据库中支持的不太理想，mysql的XA实现，没有记录prepare阶段日志，主备切换回导致主库与备库数据不一致。许多nosql也没有支持XA，这让XA的应用场景变得非常狭隘。</p><p>·     TCC编程模式</p><p>所谓的TCC编程模式，也是两阶段提交的一个变种。TCC提供了一个编程框架，将整个业务逻辑分为三块：Try、Confirm和Cancel三个操作。以在线下单为例，Try阶段会去扣库存，Confirm阶段则是去更新订单状态，如果更新订单失败，则进入Cancel阶段，会去恢复库存。总之，TCC就是通过代码人为实现了两阶段提交，不同的业务场景所写的代码都不一样，复杂度也不一样，因此，这种模式并不能很好地被复用。</p><p>分布式事务框架；</p><p>买东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">wms&#123;</span><br><span class="line">     <span class="comment">//扣库存</span></span><br><span class="line">    koukucun()&#123;</span><br><span class="line">      <span class="comment">//预准备  </span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   tijiaokoukucun()&#123;</span><br><span class="line">      <span class="comment">//update stock set stock=stock-1;  commit;</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   cancelkoukucun()&#123;</span><br><span class="line">      <span class="comment">//反向扣库存。update stock set stock=stock+1;  commit;</span></span><br><span class="line">     <span class="comment">//undo_log；</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">oms&#123;</span><br><span class="line">    <span class="comment">//创建订单</span></span><br><span class="line">    预准备()&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   保存订单()&#123;</span><br><span class="line">   &#125;</span><br><span class="line">  取消订单()&#123; <span class="comment">//delete&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ums&#123;</span><br><span class="line">   <span class="comment">//扣余额</span></span><br><span class="line">  准备扣()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  真正扣余额（）&#123;&#125;</span><br><span class="line">  取消扣余额()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     消息事务+最终一致性</p><p>基于消息中间件的两阶段提交往往用在高并发场景下，将一个分布式事务拆成一个消息事务（A系统的本地操作+发消息）+B系统的本地操作，其中B系统的操作由消息驱动，只要消息事务成功，那么A操作一定成功，消息也一定发出来了，这时候B会收到消息去执行本地操作，如果本地操作失败，消息会重投，直到B操作成功，这样就变相地实现了A与B的分布式事务。</p><p>虽然上面的方案能够完成A和B的操作，但是A和B并不是严格一致的，而是最终一致的，我们在这里牺牲了一致性，换来了性能的大幅度提升。当然，这种玩法也是有风险的，如果B一直执行不成功，那么一致性会被破坏，具体要不要玩，还是得看业务能够承担多少风险。</p><p>9.分布式事务解决方案Seata</p><p>·     1.核心概念</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Distributed Transaction：分布式事务</span><br><span class="line">Global Transaction：全局事务</span><br><span class="line">Branch Transaction：分支事务</span><br><span class="line">Local Transaction：本地事务</span><br></pre></td></tr></table></figure><p>以上四个的关系</p><p>官方文档说明：a Distributed Transaction is a Global Transaction which is made up with a batch of Branch Transaction, and normally Branch Transaction is just Local Transaction.</p><p>其意思：分布式事务是由一批分支事务组成的全局事务，通常分支事务只是本地事务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Transaction Coordinator(TC)：事务协调器</span><br><span class="line">Transaction Manager(TM)：事务管理器</span><br><span class="line">Resource Manager(RM): 资源管理器</span><br></pre></td></tr></table></figure><p>·     2.示例工程的代码: <a href="https://github.com/seata/seata-samples/tree/master/springcloud-jpa-seata">https://github.com/seata/seata-samples/tree/master/springcloud-jpa-seata</a></p><p>·     3.如何使用Seata</p><ul><li>1.每一个微服务的数据库，都建立一个seata的undo_log日志表。来记录各个事务的记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `undo_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>2.下载并启动seata服务器  <a href="https://github.com/seata/seata/">https://github.com/seata/seata/</a></p></li><li><p>3.调整自己的微服务</p></li><li><p>4.seata其他相关文档</p></li></ul><p>SpringCloud+Seata+Feign案例： <a href="https://github.com/seata/seata-samples/tree/master/springcloud-jpa-seata">https://github.com/seata/seata-samples/tree/master/springcloud-jpa-seata</a></p><p>Seata官方文档： <a href="https://github.com/seata/seata">https://github.com/seata/seata</a></p><p>Seata-wiki：<a href="https://github.com/seata/seata/wiki/Home_Chinese">https://github.com/seata/seata/wiki/Home_Chinese</a></p><ul><li>5、整合到业务</li></ul><p>·     1.每一个微服的数据库必须有undo_log表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `undo_log`;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     2.导包</p><p>·     seata的starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·    seata-all</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## transaction log store</span></span><br><span class="line"><span class="string">store</span> &#123;</span><br><span class="line">  <span class="comment">## store mode: file、db</span></span><br><span class="line">  <span class="string">mode</span> <span class="string">=</span> <span class="string">&quot;db&quot;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">## file store</span></span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">dir</span> <span class="string">=</span> <span class="string">&quot;sessionStore&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class="line">    <span class="string">max-branch-session-size</span> <span class="string">=</span> <span class="number">16384</span></span><br><span class="line">    <span class="comment"># globe session size , if exceeded throws exceptions</span></span><br><span class="line">    <span class="string">max-global-session-size</span> <span class="string">=</span> <span class="number">512</span></span><br><span class="line">    <span class="comment"># file buffer size , if exceeded allocate new buffer</span></span><br><span class="line">    <span class="string">file-write-buffer-cache-size</span> <span class="string">=</span> <span class="number">16384</span></span><br><span class="line">    <span class="comment"># when recover batch read size</span></span><br><span class="line">    <span class="string">session.reload.read_size</span> <span class="string">=</span> <span class="number">100</span></span><br><span class="line">    <span class="comment"># async, sync</span></span><br><span class="line">    <span class="string">flush-disk-mode</span> <span class="string">=</span> <span class="string">async</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">## database store</span></span><br><span class="line">  <span class="string">db</span> &#123;</span><br><span class="line">    <span class="string">driver_class</span> <span class="string">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    <span class="string">url</span> <span class="string">=</span> <span class="string">&quot;jdbc:mysql://192.168.128.130:3306/xx&quot;</span></span><br><span class="line">    <span class="string">user</span> <span class="string">=</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="string">password</span> <span class="string">=</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     3.写配置</p><p>·     1.我们原来的DataSource要用seata的</p><p>·     2.file.conf</p><p>·     定义seata客户端核心工作规则信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vgroup_mapping.gulimall-pms-fescar-service-group = &quot;default&quot;</span><br><span class="line"> </span><br><span class="line">vgroup_mapping.前缀.后缀(-fescar-service-group)=&quot;默认名称空间&quot;；</span><br><span class="line"> </span><br><span class="line">$&#123;spring.application.name&#125;-fescar-service-group；必须和但是必须和file.conf中的配置保持一致</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     事务日志</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## transaction log store</span></span><br><span class="line"><span class="string">store</span> &#123;</span><br><span class="line">  <span class="comment">## store mode: file、db</span></span><br><span class="line">  <span class="string">mode</span> <span class="string">=</span> <span class="string">&quot;db&quot;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">## file store</span></span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">dir</span> <span class="string">=</span> <span class="string">&quot;sessionStore&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class="line">    <span class="string">max-branch-session-size</span> <span class="string">=</span> <span class="number">16384</span></span><br><span class="line">    <span class="comment"># globe session size , if exceeded throws exceptions</span></span><br><span class="line">    <span class="string">max-global-session-size</span> <span class="string">=</span> <span class="number">512</span></span><br><span class="line">    <span class="comment"># file buffer size , if exceeded allocate new buffer</span></span><br><span class="line">    <span class="string">file-write-buffer-cache-size</span> <span class="string">=</span> <span class="number">16384</span></span><br><span class="line">    <span class="comment"># when recover batch read size</span></span><br><span class="line">    <span class="string">session.reload.read_size</span> <span class="string">=</span> <span class="number">100</span></span><br><span class="line">    <span class="comment"># async, sync</span></span><br><span class="line">    <span class="string">flush-disk-mode</span> <span class="string">=</span> <span class="string">async</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">## database store</span></span><br><span class="line">  <span class="string">db</span> &#123;</span><br><span class="line">    <span class="string">driver_class</span> <span class="string">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    <span class="string">url</span> <span class="string">=</span> <span class="string">&quot;jdbc:mysql://192.168.128.130:3306/xx&quot;</span></span><br><span class="line">    <span class="string">user</span> <span class="string">=</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="string">password</span> <span class="string">=</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     当前微服务在seata服务器中注册的信息配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">service &#123;</span><br><span class="line">  #vgroup-&gt;rgroup</span><br><span class="line">  vgroup_mapping.-xxx-fescar-service-group = <span class="attr">&quot;default&quot;</span>  ##当前应用名</span><br><span class="line">  #only support single node</span><br><span class="line">  default.grouplist = <span class="attr">&quot;127.0.0.1:8091&quot;</span>  # seata服务器地址</span><br><span class="line">  #degrade current not support</span><br><span class="line">  enableDegrade = false</span><br><span class="line">  #disable</span><br><span class="line">  disable = false</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     客户端相关工作的机制</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">client &#123;</span><br><span class="line">  async.commit.buffer.limit = 10000</span><br><span class="line">  lock &#123;</span><br><span class="line">    retry.internal = 10</span><br><span class="line">    retry.times = 30</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     3.registry.conf</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk</span><br><span class="line">  type = <span class="attr">&quot;nacos&quot;</span></span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;localhost:8848&quot;</span></span><br><span class="line">    namespace = <span class="attr">&quot;public&quot;</span></span><br><span class="line">    cluster = <span class="attr">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="attr">&quot;http://localhost:1001/eureka&quot;</span></span><br><span class="line">    application = <span class="attr">&quot;default&quot;</span></span><br><span class="line">    weight = <span class="attr">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;localhost:6381&quot;</span></span><br><span class="line">    db = <span class="attr">&quot;0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = <span class="attr">&quot;default&quot;</span></span><br><span class="line">    serverAddr = <span class="attr">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="attr">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk</span><br><span class="line">  type = <span class="attr">&quot;file&quot;</span></span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;localhost&quot;</span></span><br><span class="line">    namespace = <span class="attr">&quot;public&quot;</span></span><br><span class="line">    cluster = <span class="attr">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = <span class="attr">&quot;fescar-server&quot;</span></span><br><span class="line">    apollo.meta = <span class="attr">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="attr">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     定义让seata知道微服务在其他注册中心的一些配置。</p><p>·     1、指定注册中心信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk</span><br><span class="line">  type = <span class="attr">&quot;nacos&quot;</span></span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;localhost:8848&quot;</span></span><br><span class="line">    namespace = <span class="attr">&quot;public&quot;</span></span><br><span class="line">    cluster = <span class="attr">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = <span class="attr">&quot;http://localhost:1001/eureka&quot;</span></span><br><span class="line">    application = <span class="attr">&quot;default&quot;</span></span><br><span class="line">    weight = <span class="attr">&quot;1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = <span class="attr">&quot;localhost:6381&quot;</span></span><br><span class="line">    db = <span class="attr">&quot;0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = <span class="attr">&quot;default&quot;</span></span><br><span class="line">    serverAddr = <span class="attr">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = <span class="attr">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     2、seata客户端的配置【这些也是可以放在配置中心中】</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">config</span> &#123;</span><br><span class="line">  <span class="comment"># file、nacos 、apollo、zk</span></span><br><span class="line">  <span class="string">type</span> <span class="string">=</span> <span class="string">&quot;file&quot;</span>   <span class="comment">#我们使用的是配置文件。</span></span><br><span class="line"> </span><br><span class="line">  <span class="string">nacos</span> &#123;</span><br><span class="line">    <span class="string">serverAddr</span> <span class="string">=</span> <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="string">namespace</span> <span class="string">=</span> <span class="string">&quot;public&quot;</span></span><br><span class="line">    <span class="string">cluster</span> <span class="string">=</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">apollo</span> &#123;</span><br><span class="line">    <span class="string">app.id</span> <span class="string">=</span> <span class="string">&quot;fescar-server&quot;</span></span><br><span class="line">    <span class="string">apollo.meta</span> <span class="string">=</span> <span class="string">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">zk</span> &#123;</span><br><span class="line">    <span class="string">serverAddr</span> <span class="string">=</span> <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="string">session.timeout</span> <span class="string">=</span> <span class="number">6000</span></span><br><span class="line">    <span class="string">connect.timeout</span> <span class="string">=</span> <span class="number">2000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">name</span> <span class="string">=</span> <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     4.每一个微服务原来自己的数据源都必须使用DataSourceProxy来进行代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">originDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;spring.datasource.jdbcUrl&#125;&quot;)</span> String url, <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span>String Username ,<span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span>String Password,<span class="meta">@Value(&quot;$&#123;spring.datasource.driverClassName&#125;&quot;)</span> String DriverClass)</span></span>&#123;</span><br><span class="line">        HikariDataSource hikariDataSource = <span class="keyword">new</span> HikariDataSource();</span><br><span class="line">        hikariDataSource.setJdbcUrl(url);</span><br><span class="line">        hikariDataSource.setUsername(Username);</span><br><span class="line">        hikariDataSource.setPassword(Password);</span><br><span class="line">        hikariDataSource.setDriverClassName(DriverClass);</span><br><span class="line">        <span class="keyword">return</span> hikariDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>·     5.若我们使用注册中心，进行服务的发现，seata服务器也得配置放在注册中心，去seata服务器配置registry.conf</p><h1 id="11、Spring等高级框架复习"><a href="#11、Spring等高级框架复习" class="headerlink" title="11、Spring等高级框架复习"></a>11、Spring等高级框架复习</h1><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>1、SpringMVC的图解原理分析</p><p>完整的原理图：</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816144434556.png" alt="image-20210816144434556"></p><p>2、简单先分析一下上图的流程是怎么样的</p><ol><li><p>首先发了一个请求过来</p></li><li><p>那么就要看这个请求能不能发给在web.xml配置的SpringDispatcherServlet，若能够发过来到SpringDispatcherServlet，那么此时这个请求就跟SpringDispatcherServlet的url-pattern相对应。</p></li><li><p>然后再看SpringMVC里面有没有对应的映射？也即有没有使用@RequestMapping注解映射过，如果要是没有映射过的话，那么就还要来看有没有配置&lt;mvc:default-servlet-handler/&gt;</p></li><li><p>如果也没有配置&lt;mvc:default-servlet-handler/&gt;的话，控制台就会有一个报错，报错将提示没有对应的映射，同时将会给一个404页面。</p></li><li><p>如果有配置&lt;mvc:default-servlet-handler/&gt;的话，就会去找目标资源，若目标资源没有的话可能也会给一个404页面，而控制台不会显示：没有对应的映射这样的报错信息。</p></li><li><p>如果此时要是有对应的@RequestMapping注解映射过，那么这个时候会由HandlerMapping获取一个HandlerExecutionChain对象。</p></li><li><p>然后再获取一个HandlerAdapter对象。</p></li><li><p>再调拦截器的PreHandle方法</p></li><li><p>再调用目标Handler的目标方法得到ModelAndView对象，再调用拦截器的PostHandle方法。</p></li><li><p>这个时候查看在调用目标方法的过程中是否存在异常，要是有异常的话，将使用异常解析器(HandlerExceptionResolver)去解析这个异常，得到一个新的ModelAndView对象。</p></li><li><p>然后再由ViewResolver组件根据ModelAndView对象得到实际的View对象</p></li><li><p>然后去渲染视图。</p></li><li><p>渲染视图后响应就会得到，然后再调用拦截器的afterCompletion方法。</p></li></ol><p>以上就是整个SpringMVC的运行流程。</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><h3 id="1-SpringBoot自动配置原理"><a href="#1-SpringBoot自动配置原理" class="headerlink" title="1.SpringBoot自动配置原理:"></a>1.SpringBoot自动配置原理:</h3><p>1、当SpringBoot应用启动的时候，就从主方法里面进行启动的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot02ConfigAutoconfigApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBoot02ConfigAutoconfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它主要加载了@SpringBootApplication注解主配置类，这个@SpringBootApplication注解主配置类里边最主要的功能就是SpringBoot开启了一个@EnableAutoConfiguration注解的自动配置功能。</p><p>2、@EnableAutoConfiguration作用：</p><p>它主要利用了一个EnableAutoConfigurationImportSelector选择器给Spring容器中来导入一些组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Import(EnableAutoConfigurationImportSelector.class)</span><br><span class="line">public @interface EnableAutoConfiguration</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、那导入了什么组件呢？</p><ol><li>来看EnableAutoConfigurationImportSelector这个类的父类selectImports。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">             <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>父类里面规定了一个方法叫selectImports这个方法，查看了selectImports这个方法里面的代码内容就能知道导入了哪些组件了。</p></li><li><p>在selectImports这个方法里面主要有个configurations，并且这个configurations最终会被返回。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">             <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">                      .loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">             AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">             List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span><br><span class="line">                      attributes);</span><br><span class="line">             configurations = removeDuplicates(configurations);</span><br><span class="line">             configurations = sort(configurations, autoConfigurationMetadata);</span><br><span class="line">             Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">             checkExcludedClasses(configurations, exclusions);</span><br><span class="line">             configurations.removeAll(exclusions);</span><br><span class="line">             configurations = filter(configurations, autoConfigurationMetadata);</span><br><span class="line">             fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">             <span class="keyword">return</span> configurations.toArray(<span class="keyword">new</span> String[configurations.size()]);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>这个configurations它是获取候选的配置。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,attributes);</span><br></pre></td></tr></table></figure><ol start="5"><li>这个configurations方法的作用就是利用SpringFactoriesLoader.loadFactoryNames从类路径下得到一个资源。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">         String factoryClassName = factoryClass.getName();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                      ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、那得到了哪些资源呢？</p><ol><li>它是扫描javajar包类路径下的“META-INF/spring.factories”这个文件。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The location to look for factories.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Can be present in multiple JAR files.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">&quot;META-INF/spring.factories&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>那么扫描到的这些文件作用：是把这个文件的urls拿到之后并把这些urls每一个遍历，最终把这些文件整成一个properties对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">         String factoryClassName = factoryClass.getName();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                      ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">             List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">             <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                 URL url = urls.nextElement();</span><br><span class="line">                 Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</span><br><span class="line">                 String factoryClassNames = properties.getProperty(factoryClassName);</span><br><span class="line">                 result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>然后它从properties对象里边获取一些值，把这些获取到的值来加载我们最终要返回的这个结果，这个结果就是我们要交给Spring容器中的所有组件，这相当于这factoryClassName就是我们传过来的Class的这个类名。</p></li><li><p>而传过来的Class是调用这个getSpringFactoriesLoaderFactoryClass()这个方法得到从properties中获取到EnableAutoConfiguration.class类名对应的值。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">         <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>然后把它们添加在容器中</li></ol><p>5、按照它的这个意思，来到第二个Springjar包的META-INF下的spring.factories这个文件找到配置所有EnableAutoConfiguration的值加入到Spring容器中</p><ol><li><p>所以说我们容器中最终会添加很多的类</p></li><li><p>比如：</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">。。。</span></span><br><span class="line"><span class="string">。。。</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>每一个xxxAutoConfiguration类都是容器中的一个组件，并都加入到容器中。</p></li><li><p>加入到容器中之后的作用就是用它们来做自动配置</p></li><li><p>这就是Springboot自动配置之源，也就是自动配置的开始</p></li><li><p>只有这些自动配置类进入到容器中以后，接下来这个自动配置类才开始进行启动</p></li></ol><p>6、每一个自动配置类进行自动配置功能</p><ol><li><p>以一个自动配置类HttpEncodingAutoConfiguration（HTTP的编码自动配置）为例子来解释SpringBoot的自动配置之原理：</p></li><li><p>这个HttpEncodingAutoConfiguration类上面标注了一大堆的注解：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>   <span class="comment">//表示这是一个配置类，类似于以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span> <span class="comment">//启用ConfigurationProperties功能：</span></span><br><span class="line"><span class="comment">//这个ConfigurationProperties里面引入了一个类，这个类就是启用指定类的ConfigurationProperties功能</span></span><br><span class="line"><span class="comment">//有了这个@EnableConfigurationPropertie注解以后相当于把配置文件中对应值就和这个HttpEncodingProperties.class类绑定起来了。</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//这个注解的意思就是判断当前是不是web应用，@Conditional是spring底层，意思就是根据不同的条件，来进行自己不同的条件判断，如果满足指定的条件，那么整个配置类里边的配置才会生效。</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span><span class="comment">//看这个类里边有没有这个过滤器，就是判断当前项目里边有没有CharacterEncodingFilter这个类，这个CharacterEncodingFilter类是Springmvc中乱码解决的过滤器。</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span><span class="comment">//@ConditionalOnProperty注解是来判断配置文件中是否存在某个配置，就是是否存在spring.http.encoding.enabled这个配置，matchIfMissing的意思就是如果不存在也认为这个判断是正确的</span></span><br><span class="line"><span class="comment">//即使配置文件中不配置spring.http.encoding.enabled=true这个属性，也是默认生效的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><ol start="3"><li>点进去HttpEncodingProperties这个类，发现这个HttpEncodingProperties类上面标注了@ConfigurationProperties注解。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span> <span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>所以说配置文件中该配置什么，我们就按照它的这个旨意，它要配spring.http.encoding这个属性，这个属性里边能配置什么值，就对应HttpEncodingProperties这个类来配置，所有的配置文件中能配置的属性都是在xxx.Properties类中封装着。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingProperties</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not</span></span><br><span class="line"><span class="comment">     * set explicitly.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Charset charset = DEFAULT_CHARSET;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Force the encoding to the configured charset on HTTP requests and responses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean force;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Force the encoding to the configured charset on HTTP requests. Defaults to true</span></span><br><span class="line"><span class="comment">     * when &quot;force&quot; has not been specified.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean forceRequest;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Force the encoding to the configured charset on HTTP responses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean forceResponse;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locale to Encoding mapping.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Locale, Charset&gt; mapping;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Charset <span class="title">getCharset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.charset;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharset</span><span class="params">(Charset charset)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.charset = charset;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Boolean.TRUE.equals(<span class="keyword">this</span>.force);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForce</span><span class="params">(<span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.force = force;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForceRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Boolean.TRUE.equals(<span class="keyword">this</span>.forceRequest);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceRequest</span><span class="params">(<span class="keyword">boolean</span> forceRequest)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.forceRequest = forceRequest;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForceResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> Boolean.TRUE.equals(<span class="keyword">this</span>.forceResponse);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceResponse</span><span class="params">(<span class="keyword">boolean</span> forceResponse)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.forceResponse = forceResponse;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Locale, Charset&gt; <span class="title">getMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.mapping;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMapping</span><span class="params">(Map&lt;Locale, Charset&gt; mapping)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.mapping = mapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>所以说配置文件能配置什么就可以参照某一个功能对应的这个属性类</li></ol><p>7、这个HttpEncodingProperties类就是根据当前不同的条件判断，决定这个配置类是否生效。</p><ol><li>如果一旦生效了，所有的配置类都成功了，就给容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，而这properties类里边的每一个属性又是和配置文件绑定的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//给容器中添加一个组件。</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="comment">//添加一个我们自己来new这个</span></span><br></pre></td></tr></table></figure><p>CharacterEncodingFilter，把这个filter添加过去，但是注意这个filter里边要获取字符集的名字（filter.setEncoding(this.properties.getCharset().name());)，你是UTF8编码还是什么编码，它要从properties中进行获取，意思就是这个组件的某些值需要从properties中获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">       filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">       filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">       filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">       <span class="keyword">return</span> filter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>我们再深入的看一下properties。</li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties; <span class="comment">//它已经和SpringBoot配置文件进行映射了。</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>我们看到properties是HttpEncodingProperties，也就是说HttpEncodingProperties这个对象的值它是获取配置文件的值的，所以我们在配置这个filter到底要用什么编码的时候是从properties获取的。</p></li><li><p>而且值得注意的是：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpEncodingProperties properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpEncodingProperties properties)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>这个HttpEncodingAutoConfiguration只有一个有参构造器，在只有一个有参构造器的情况下，参数的值就会从容器中拿</li></ol><p>8、而容器中它怎么去拿到呢？</p><ol><li><p>相当于是前面的这个@EnableConfigurationProperties(HttpEncodingProperties.class) 注解，这个@EnableConfigurationProperties注解的作用就是把HttpEncodingProperties.class和配置文件进行绑定起来并把HttpEncodingProperties加入到容器中。</p></li><li><p>接下来这个自动配置类，通过一个有参构造器把这个属性拿到，而这个属性已经和SpringBoot映射了，接下来要用什么编码，就是拿到HttpEncodingProperties这个类里边的属性。</p></li><li><p>所以SpringBoot能配置什么，它要设置编码，它是获取properties里边getCharset里边的name值。</p></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br></pre></td></tr></table></figure><ol start="4"><li><p>所以就以此类推，配置一个Spring配置，就可以照着HttpEncodingProperties这里边的来配置。</p></li><li><p>比如在application.properties配置文件下配置一个http.encoding.enabled属性：</p></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.http.encoding.enabled=<span class="keyword">true</span>  <span class="comment">//能配置这个就相当于是我们之前的判断属性</span></span><br></pre></td></tr></table></figure><ol start="6"><li>还能配置其他的一些属性。比如：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.http.encoding.charset</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>所以我们能够配置哪些属性，都是来源于这个功能的properties类</p></li><li><p>有了这个自动配置类，自动配置类就给容器中添加这个filter，然后这个filter就会起作用了。</p></li><li><p>用好SpringBoot只要把握这几点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1）.SpringBoot启动会加载大量的自动配置类</span><br><span class="line">2）.所要做的就是我们需要的功能SpringBoot有没有帮我们写好的自动配置类：</span><br><span class="line">3）.如果有就再来看这个自动配置类中到底配置了哪些组件，Springboot自动配置类里边只要我们要用的组件有，我们就不需要再来配置了，但是如果说没有我们所需要的组件，那么我们就需要自己来写一个配置类来把我们相应的组件配置起来。</span><br><span class="line">4）.给容器中自动配置类添加组件的时候，会从properties类中获取某些属性，而这些属性我们就可以在配置文件指定这些属性的值</span><br></pre></td></tr></table></figure></li><li><p>以上内容就是SpringBoot自动配置原理的整个精髓，只要掌握了SpringBoot的原理，我们才能随心所欲的运用。</p></li></ol><h3 id="2-SpringBoot创建及运行原理"><a href="#2-SpringBoot创建及运行原理" class="headerlink" title="2.SpringBoot创建及运行原理:"></a>2.SpringBoot创建及运行原理:</h3><h1 id="12、2020谷粒商城项目复习"><a href="#12、2020谷粒商城项目复习" class="headerlink" title="12、2020谷粒商城项目复习"></a>12、2020谷粒商城项目复习</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h3 id="分布式Session不共享不同步的问题"><a href="#分布式Session不共享不同步的问题" class="headerlink" title="分布式Session不共享不同步的问题"></a>分布式Session不共享不同步的问题</h3><p>1、你是如何在这个电商系统当中解决Session不共享不同步的问题的？</p><p>·     1、如何解决多台同个服务在不同机器上运行的session不同步之问题</p><p>第一种解决方案：可以使用session复制来解决Session不同步的问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">其优点是：Tomcat原生是支持的，只需要修改一下配置文件即可</span><br><span class="line"></span><br><span class="line">其缺点是：session复制需要数据的传输，可能会有延迟问题，也会占用大量的网络带宽，降级了服务器群的业务处理的能力。在比较大型的分布式集群下，每一个tomcat可能都会全量保存相应的session数据，所以此方案是不可取的。</span><br></pre></td></tr></table></figure><p>第二种解决方案：可以让客户端进行存储session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">优点：服务器不需存储session，浏览器自己保存session信息到cookie当中，这样能够节省服务器端的资源</span><br><span class="line"></span><br><span class="line">缺点：每次的HTTP请求，携带用户在cookie中的完整信息，会浪费网络的带宽。而且全部session数据都放在cookie当中，cookie只能限制保存4K，不能保存大量的信息，并且session放在cookie当中也会有不安全的隐患。所以这个方案也不可用</span><br></pre></td></tr></table></figure><p>第三种解决方案：可以使用ip的hash一致性，主要是来源于同一个IP访问的，那么就给他永远访问一台服务器就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">优点：只需要改nginx的相应配置，不需要去修改应用的代码，也可以支持web-server的水平扩展，但session同步就不行了，因为受内存的限制</span><br><span class="line"></span><br><span class="line">缺点：session其实还是存在了web-server中，如果web-server重启，也就会导致大量的session丢失。如果web-server进行水平的扩展，hash后session重新分布，也会导致一部分用户路由不到正确的session。</span><br></pre></td></tr></table></figure><p>不过以上缺点问题都不是很大，因为session本来都是有效期的</p><p>第四种解决方案：统一存储session</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">全部session都存到数据库或者是缓存当中</span><br><span class="line"></span><br><span class="line">优点：没有安全的隐患，还可以水平扩展，web-server重启也都不会丢失数据</span><br><span class="line"></span><br><span class="line">缺点：又增加了一次网络的调用，并且可能还需要修改后端的代码</span><br><span class="line"></span><br><span class="line">不过以上统一存储session的缺点，都可以使用SpringSession进行解决</span><br></pre></td></tr></table></figure><p>2、如何不同域名的情况下，session不共享的问题</p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">放大session的作用域，不能只是属于某个服务的，将其放大，使其能够在不同子域都能获得这个session</span><br></pre></td></tr></table></figure><p>3、使用SpringSession和redis来解决Session的共享问题</p><p>4、SpringSession的官网：<a href="https://docs.spring.io/spring-session/docs/2.2.1.RELEASE/reference/html5/#httpsession-redis-jc">https://docs.spring.io/spring-session/docs/2.2.1.RELEASE/reference/html5/#httpsession-redis-jc</a></p><h3 id="电商登录后session共享的整个过程"><a href="#电商登录后session共享的整个过程" class="headerlink" title="电商登录后session共享的整个过程"></a>电商登录后session共享的整个过程</h3><p>1、所有登录后的状态信息是存到session里面的，而任何一个服务都整合了Spring Session，并且将Session统一存储到redis里面</p><p>2、让session第一次存储数据的时候，会给浏览器进行发卡，这个卡就标识了session的id是什么，而发的这个卡也放大了整个作用域，让某一个服务发的卡，这个卡可以让全系统服务通用，也即夸整个父子域，不论是父域系统旗下的所有域名，都可以全使用这个session的id，这就是整合Spring Session达到的效果</p><p>3、但是在更大的系统里面也会出现一些问题</p><p>·     1、一家公司旗下的多个不同网站系统的session共享同步问题，该如何解决？也即在多个系统里面，一旦一个用户已经登录一个网站，那么其他不同系统的网站是否还需要重新登录或者注册？</p><p>·     2、在多系统里面，能够希望达到一个效果，只要是一家公司旗下的不同网站系统，在某个网站系统注册和登录过了，就其他网站系统直接能全部自动登录并显示该用户的登录信息，而无需到了其他网站系统还需要重新登录注册。</p><p>·     3、解决这问题：可以抽取一个登录注册的认证中心，专门处理不同系统的登录以及注册请求的。一旦用户想要在某个网站系统登录成功了，那么任何其他的网站系统都能使用。但是SpringSession是实现不了这个功能的</p><p>·     4、举个例子，在某个电商系统里面登录，如果都用session，那么在发卡的时候，放大了该卡的作用域，也最多放大到该卡的一级域名。但不能放大到更大的域名，比如.com，所以只能放大到一个系统里面服务的域名，那么相当于如果浏览器要访问其他网站，就带不上在电商系统里面发的卡，所以就不能通过简单的SpringSession来解决多系统的单点登录问题</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816145506013.png" alt="image-20210816145506013"></p><h3 id="单点登录。怎么实现在不同域名当中其一次登录，处处可用？"><a href="#单点登录。怎么实现在不同域名当中其一次登录，处处可用？" class="headerlink" title="单点登录。怎么实现在不同域名当中其一次登录，处处可用？"></a>单点登录。怎么实现在不同域名当中其一次登录，处处可用？</h3><h5 id="有一个核心服务器"><a href="#有一个核心服务器" class="headerlink" title="有一个核心服务器"></a>有一个核心服务器</h5><p>1.中央认证服务器</p><p>所有的登录请求都应该发给中央认证服务器</p><p>其他客户端</p><p>2.想要登录，都会先去中央认证服务器进行登录，而且登录成功以后跳转回来客户端系统</p><p>3.客户端系统只要有一个登录了，那么其他的都不用登录，会自动登录成功</p><p>4.在全局任何系统，都统一了一个cookie的唯一标识，这样才能标识哪个用户登录成功的了，这样的话无论是其他系统还是中央认证服务器都不是相同域名旗下的，所以所有系统域名都不相同</p><h4 id="怎么解决所有系统域名都不相同，还能达到一处登录，处处自动登录呢？"><a href="#怎么解决所有系统域名都不相同，还能达到一处登录，处处自动登录呢？" class="headerlink" title="怎么解决所有系统域名都不相同，还能达到一处登录，处处自动登录呢？"></a>怎么解决所有系统域名都不相同，还能达到一处登录，处处自动登录呢？</h4><p>单点登录流程</p><p>1、浏览器第一次访问到客户端中受保护的请求资源以后</p><p>2、客户端就来判断浏览器是否已经登录过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、按照以往常规的流程也即判断session里面有没有这个用户的会话信息，如果有就说明登录了，没有就说明没有登录，没有登录就去登录中心认证服务器登录</span><br><span class="line">2、如果客户端去中心认证服务器登录成功了就要跳转回来，也即从哪跳过来的就从哪跳回去</span><br><span class="line">3、如果当前系统没有保存当前登录的用户，也即客户端没有人登录，如果没有登录就要去访问登陆服务器进行登录</span><br><span class="line">4、由于没登录就给浏览器重定向到登录服务器的登录页面进行登录</span><br><span class="line">5、如果在登录的认证服务器中登录页面登录成功了，就得跳回去</span><br><span class="line">6、那么一旦登录成功以后，怎么跳回去？</span><br><span class="line"> 1、可以跳到登录页的时候，在页面路径后面加一个原来的地址</span><br><span class="line">这样相当于重定向到登录页的时候，也告诉登录服务器之前原来的地址是哪个地址，这样的话登录服务器，登录成功也就知道跳回哪了</span><br><span class="line">2、所以为了能登录成功后，能跳回原来的页面，可以在客户端的跳转登录页的控制器请求那加一个重定向原来的地址</span><br><span class="line">3、这样登录服务器登录成功以后。想要重新跳回客户端以前的页面，就把请求地址那后面的参数地址拿过来就行了，也即客户端得告诉登录服务器，我登录以后想要跳转到哪里</span><br><span class="line">4、此时登录服务器就能感知到客户端发过来的重定向地址</span><br></pre></td></tr></table></figure><p>3、登录认证服务器开始处理登录功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、首先登录服务器展示它的登录页面，而且输入相应的帐号密码登录成功以后还要跳回去</span><br><span class="line">2、为了能跳回去，在方面登录页的时候，登录页是能取到客户端给的登录成功后的URL地址</span><br><span class="line">3、但是我们再来登录，那么上一步的地址就会丢失，所以为了防止这个客户端给的跳转地址丢失，在登录的控制器中将URL地址放到请求域中，可以在登录页面里面可以添加一个隐藏的input输入框，让它自己取出请求域的地址就行了</span><br><span class="line">4、用户在浏览器的登录页面中输入帐号密码进行登录，并且这个登录页也有重定向的地址，也即登录成功以后跳转到客户端给的地址，当登录以后，就会提交登录请求（含用户名，密码，客户端给的登录成功后要重定向跳转的url地址）给登录认证服务器</span><br><span class="line">5、登录认证服务器，就开始处理登录请求</span><br><span class="line">6、登录成功后，就会跳转到客户端在登录请求发来的URL地址</span><br><span class="line">7、登录成功后，无法跳转到客户端指定的URL地址</span><br></pre></td></tr></table></figure><ul><li>```<br>1、访问客户端指定的URL地址，又要遵循上面的逻辑，也即访问这个客户端的时候，又要看有没有登录，因为客户端总是显示没登录，所以这块就算登录成功后也无法跳转到指定的页面，这就导致了死循环<br>2、如何解决上面这个问题：在认证服务器登录成功以后，重定向跳转回去以后的时候客户端指定地址的时候，客户端要能感知到是已经登录成功以后跳转回来的，而不是直接访问的<br>3、那么能让客户端感知已经登录的业务代码怎么写？<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  1、用redis或者session来存储已经登录的用户信息，在本系统当中我们就用了redis来存储的登录成功的用户信息</span><br><span class="line">  2、那么如果是用session来存储已经登录的用户信息，那么就要发一个卡，类似于银行卡的卡号。</span><br><span class="line">  3、若是在redis存的话key，因为redis会存好多登录的用户，所以要为每一个用户生成一个唯一的key来进行存储，比如可以用UUID来存储key，值就存用户信息</span><br><span class="line">  4、把登录成功后的用户信息存到redis，但是得让其他客户端知道这个用户已经登录过的了</span><br><span class="line">  5、在登录页，登录成功后返回客户端给的重定向URL地址后面再加上一个用户的URL参数（类似于token令牌，token令牌就是UUID）使其能够告诉客户端这个用户已经登录过的了，然后跳转到客户端指定的URL地址</span><br><span class="line">  6、只要登录成功后，带了token令牌，就认为它是已经登录了的。</span><br><span class="line">  7、那么在客户端，只要你登录成功了，返回了客户端指定的URL地址，这URL地址当中还带了token令牌，那么就给你跳转回客户端指定的页面地址</span><br><span class="line">  8、但是token是不一定带的，因为第一次进来访问，就是没有带token的，只有去登录服务器登录回来以后才会有token</span><br><span class="line">  9、登录成功不成功，有两个判断，第一个是先看看session里面有没有用户信息如果有就说明已经登录成功，第二个只要是登录成功后跳回来客户端指定的页面的还带了token的，就说明也是登录成功</span><br><span class="line">  10、有了token，那么登录成功的用户再放到session里面，session的值放的是认证服务器登录后的用户信息，也即在客户端获取认证服务器当前token真正对应的用户信息，拿到了用户信息了，才能说明是成功的。</span><br><span class="line">  11、就成功跳转到客户端指定的URL页面地址</span><br><span class="line">  12、那么在下一次再访问客户端指定的URL页面地址就不用再跳转到认证服务器进行登录了，也是直接能访问到想要访问的资源了</span><br><span class="line">  13、不用登录的原因就是由于在认证服务器登录成功以后跳回去，带了这个token，有了这个token以后，客户端就会去拿到这个token，来证明是登录过的用户</span><br><span class="line">  14、最大的一个问题就是，如果访问其他的客户端域名，会有域名不同的情况，就说明一个客户端登录了，不代表另外一个客户端域名就直接不用登录了</span><br><span class="line">  15、就应该一个客户端登录了，其他客户端就不用再登录了。</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8、一个客户端已经成功登录了，但是怎么能让其他客户端就不用再登录，而直接去访问想要访问的受保护资源？</span><br></pre></td></tr></table></figure><ul><li><p>```<br>1、由于某一个客户端已经在认证服务器登录过了，那么其他的客户端是互相授信的系统，彼此是信任的，那么就希望第二个客户端系统不用去登录就直接能够访问想要访问的受保护的资源<br>2、访问第二个客户端，默认访问第二个客户端是需要重新登录的，但是第一个客户端已经登录了，就想希望第二个客户端能通过第一个客户端已经登录完成的状态进行免登录<br>3、第二个客户端需要重新登录的原因就是在认证服务器这一块，认证服务器它并没有记住哪些用户已经登录了。<br>4、认证服务器需要保存哪些用户已经登录了的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  1、只要登录成功以后，就会去客户端提供的页面地址重定向过去，还会把当前用户保存过来，也就是重定向的时候带上这个令牌信息</span><br><span class="line">  2、为了下一次别的客户端系统想要登录，得知道上一个客户端系统已经登录过了，就只有一种做法</span><br></pre></td></tr></table></figure><ul><li><p>```<br>1、客户端访问认证服务器会带上认证服务器的所有的cookie<br>2、假设只要有了登录了，就搞一个cookie，来保存上一个用户登录的用户令牌信息<br>3、所以无论是第一个客户端还是其他多个客户端没有登录，只要能跳到认证服务器的登录页面，浏览器就会带上这个认证服务器下的所有cookie。<br>4、也就是说为了能记住登录的状态信息，即使是上一个人登录，就应该给我们登录服务器留一个痕迹，这个痕迹就是留给客户端浏览器的，告诉客户端浏览器之前这个在认证服务器已经登录过了，痕迹就是cookie<br>5、所以唯一要做的一件事就是处理登录请求和用户状态信息的token返回出去外，还要给当前系统留一个记号，这个记号可以是一个cookie来表示曾经登录过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">   3、单点登录的整个令牌是在登录认证服务器保存的</span><br></pre></td></tr></table></figure></li><li><p>```<br>1、登录服务器只要有任何的客户端浏览器登录成功了，那么就给这个客户端浏览器留一个令牌<br>2、登录后的用户信息是在redis当中存起来的，但是为了有标识，认证服务器就命令客户端浏览器保存一个cookie，这个cookie的键是自己定义，值是用户信息的唯一id。<br>3、此时客户端浏览器就应该将认证服务器发过来的cookie保存在认证服务器当中<br>4、只要访问认证服务器，那么认证服务器就会有相应的cookie<br>5、也即某个客户端浏览器没有登录，就会跳转到登录认证服务器进行登录，只要在登录服务器做了登录请求，那么登录服务器关键的一步就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  1、只要进行登录的请求，它会做两件事，把用户信息存到redis里面，并且给当前服务器留一个cookie标识</span><br><span class="line">  2、登录成功就会做两件事</span><br></pre></td></tr></table></figure><ul><li><p>```<br>1、不止要执行浏览器指定的重定向到地址，并且重定向的时候，还带了token<br>2、登录成功以后，还给当前认证服务器保存了一个用户信息的cookie<br>3、此时又重定向到受保护的资源页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  6、客户端浏览器去认证服务器登录，登录后不仅重定向到浏览器指定的页面，但在重定向之前，客户端浏览器要给认证服务器的域名下保存一个cookie。因为这个登录请求是发给认证服务器的</span><br><span class="line">  7、客户端浏览器在认证服务器登录后，还留了一个cookie的在认证服务器，这个cookie的作用？</span><br></pre></td></tr></table></figure></li><li><p>```<br>1、保存cookie的作用就是，客户端浏览器只要以后访问认证服务器的域名，都会带上这个域名下的所有cookie。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  8、目前看到的效果就是：不仅登录成功，跳回客户端浏览器指定的页面地址，还在请求路径上带了一个token，并在域名下面留了一个cookie，cookie和token的值都是一样的</span><br><span class="line">  9、接下来第二个客户端浏览器去访问，显示没有登录，就会重定向跳转到了认证服务器的登录页进行登录</span><br></pre></td></tr></table></figure></li><li><p>```<br>1、但是已经有一个客户端浏览器登录过了，登录了以后还给认证服务器留了一个用户的cookie信息<br>2、所以其他客户端浏览器下一次再来访问登录页的时候，就显示没有登录，浏览器就命令去访问登录页。<br>3、但是在访问登录页的时候，这个请求还带上了之前保存的Cookie，这个Cookie就是上一个客户端浏览器登录成功后在认证服务器留下的cookie，所以其他客户端浏览器请求的时候都会带上这个cookie<br>4、登录页的重新处理应该就是：如果客户端浏览器带了这个Cookie，就说明是上一个客户端浏览器留下来的痕迹，那么就可以说明新来的客户端浏览器可以不用登录了<br>5、也即在后台代码的登录页的控制器当中拿到这个Cookie的值<br>6、核心就是：在展示登录页面的时候判断这个客户端浏览器是否已经登录过，判断是否有关键的cookie，如果没有这个cookie，那就展示登录页，如果有就直接免登录，跳回受保护的资源页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  10、为了让客户端浏览器知道，访问认证服务器登录成功以后，那么重定向跳回来的时候就会加一个token，如果有token就认为是登录回来的，就把登录后的信息放到session里面，否则就是直接访问的，那么就要拒绝，并要求它跳回到认证服务器的登录页进行登录</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>```<br>5、此时已经达到了一个客户端浏览器去认证服务器登录后，其他客户端浏览器就已经不用再登录了，直接免登录跳回指定的页面资源地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  1、其他客户端访问资源地址，先判断是否已经登录过，此时客户端浏览器会重定向到认证服务器的登录页面去登录，当然还带着一个cookie。</span><br><span class="line">  2、客户端浏览器就去访问认证服务器的登录页面</span><br><span class="line">  3、其他客户端浏览器访问登录页面的时候，结果登录页面，其他客户端浏览器只要带了这个cookie，因为可能上一次有其他客户端浏览器登录过，那么其他客户端浏览器访问认证服务器就会带上以前浏览器留下的cookie。</span><br><span class="line">  4、如果客户端浏览器带了这个cookie就拿着，直接可以跳回客户端浏览器指定的页面。</span><br><span class="line">  5、那么一旦跳回到客户端浏览器指定的页面</span><br></pre></td></tr></table></figure></li></ul><p>4、整个单点登录流程图</p><p><img src="/2021/08/01/java-2021-08-15-faceQuestions2/image-20210816145535517.png" alt="image-20210816145535517"></p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p>1、购物车数据存储在redis中</p><p>2、购物车数据存在redis的好处是什么？</p><p>·     1、购物车是一个读写都是高并发的操作，那么如果使用Mysql数据库，那么读写都高并发的情况下，就会让mysql数据库都承担非常大的压力</p><p>·     2、所以可以选择一些nosql来存储购物车的数据，比如可以使用mongodb，但是使用mongodb的话，它的性能也并不能带来很大的提升</p><p>·     3、所以选择了Nosql的redis来存储购物车的数据</p><p>·     4、放在redis的好处就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、数据结构好组织</span><br><span class="line">2、redis拥有极高的读写并发性能</span><br></pre></td></tr></table></figure><p>·     5、不过存在redis里面也会出现一个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、也就是登录以后的购物车是需要持久化保存的</span><br><span class="line">2、但是redis默认是内存数据库，所有数据是存在内存的，一旦redis宕机了，那么所有的数据就丢失了</span><br><span class="line">3、但是mysql就不一样了，只要保存了，即使宕机了也还在</span><br><span class="line">4、不过这种问题也可以得到解决</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、在安装redis的时候，可以指定好redis的持久化策略</span><br><span class="line">2、那么在redis的每一条数据，都能持久化到磁盘里面，即使redis宕机，下次重新启动，数据还会在。</span><br><span class="line">3、这样虽然能损失一定的性能，就相当于没有那么高的吞吐量了，但是即使redis的数据存在磁盘里面，也会比mysql快很多。</span><br><span class="line">4、所以用户登录以后，那么在购物车当中的数据存在redis里面</span><br><span class="line">5、如果用户没登录，没有登录的购物车，最大的特点就是一个临时的购物车，其关闭了浏览器，下次打开浏览器还是会有以前保存的临时购物车的数据</span><br><span class="line">6、那么临时购物车，也用redis来存储</span><br><span class="line">7、当然临时购物车也可以存到很多的地方。比如放到cookie当中</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、但是如果放在cookie当中，那么也就是浏览器存储，后台不存，那么这样的话。在大数据的时代下，想统计一些用户购买了哪些商品，甚至是做一些用户购买的热度高的商品推荐，都是没有办法做到的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8、最终无论用户登录了的购物车还是没有登录的购物车，都统一存在redis当中</span><br></pre></td></tr></table></figure><p>·     6、购物车存在redis的数据应该以什么数据类型来进行存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、一个用户等于两个购物车，一个登录后的购物车，一个是没登录的临时购物车</span><br><span class="line">2、但是不管是哪个购物车，购物车里面数据应该都是有非常多的购物项，也就是添加的那些商品</span><br><span class="line">3、每一个购物项都应该有当期商品的id,因为添加商品都是按照sku销售属性来进行添加的</span><br><span class="line">4、包括每一个购物项是被选中还是没有选中，这个状态也要进行存储</span><br><span class="line">5、保存商品的标题信息和商品的默认图片等信息也要进行存储</span><br><span class="line">6、购物车有很多的购物项，那么使用redis的五种数据类型的哪一种进行一个购物车的存储呢？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、一个购物车里面就应该是一个数组，数组里面都是一个个的购物项，也就是一个个的对象</span><br><span class="line">2、但是redis里面保存的数据都是以键值对的结构进行存储</span><br><span class="line">3、那么假设用redis的list类型来存储的话，key应该是存用户的标识，代表哪个用户的购物车</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、这个用户的购物车应该是一个数组类型，数组里面放一个个的购物项</span><br><span class="line">2、也即value值存购物车里面的购物项，就是存具体的商品信息</span><br><span class="line">3、如果按照list的数据类型来存储购物车的信息，会有缺点</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、如果来修改某个购物车里面的购物项</span><br><span class="line">2、那么就相当于redis里面存储的购物项也得修改</span><br><span class="line">3、那么就得去redis里面在list数据类型下找这个页面被修改的购物项数据</span><br><span class="line">4、因为是用list来存储购物项，那么问题可能会添加了很多的购物项，在某个购物项修改了相关的信息，那么怎么知道要改购物车里面的哪个商品？</span><br><span class="line">5、可能会有两种办法：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、得先知道选的是第几个购物项修改的商品信息，在list中来找相应被修改的元素，前提是页面跟后台redis存储的数据顺序是一模一样的，那么就比较容易找到</span><br><span class="line">2、但是会非常的麻烦。所以为了后来的方便快速找购物项的数据并且进行修改</span><br><span class="line">3、可以把购物车里面的list类型存储的购物项改为hash进行存储</span><br><span class="line">4、使用redis的hash进行存储购物车当中的购物项</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、key还是代表某个用户的购物车，这样方便定位到具体的用户的购物车</span><br><span class="line">2、那么hash的value值是有两个值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、第一个值存储商品的id</span><br><span class="line">2、第二个值存储商品的具体信息</span><br><span class="line">3、那么hash结构的数据类型最终的存储结构应该是这样</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1号用户的购物车里面，存了每一个购物项，数据值是某个商品的id，它的信息是具体的商品信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4、那么在修改购物项就直接去redis里面找到相应用户的购物车，也不用挨个去遍历来去修改，也可以不用按照其索引来找，因为这样很麻烦，只需要类似于map的方式，按照某个商品的id来修改具体的商品信息。</span><br><span class="line">5、所以在redis里面存购物车的商品不能直接用list方式来存储，因为list来找商品得遍历循环，看是哪个商品</span><br><span class="line">6、但是用于redis的hash结构来存储购物车的商品，也就是map的方式，那么找商品，直接拿key商品的id就能找到</span><br><span class="line">7、最终就应该是以类似于Map 这样的方式来进行存储购物车里面的数据</span><br></pre></td></tr></table></figure><p>数据格式：Map&lt;String,Map&lt;String,CartItem&gt;&gt; 有两个key，这个最前面的key是String类型，是存储每一个用户的购物车标识，而Map就是存储整个购物车，这个购物车里面存储每一个的购物项，为了方便找购物项，这个Map的key也是String类型,这个String类型用来存储购物项的商品id，而Map的CartItem对象类型就是存储购物车的详情信息</p><p>所以真正的购物车信息应该是以Map&lt;String,Map&lt;String,CartItem&gt;&gt;这样的Hash方式进行存储的</p><h4 id="3、离线购物车"><a href="#3、离线购物车" class="headerlink" title="3、离线购物车"></a>3、离线购物车</h4><h4 id="4、在线购物车"><a href="#4、在线购物车" class="headerlink" title="4、在线购物车"></a>4、在线购物车</h4><p>目前整个2020谷粒商城我已经学习和开发完毕，但是我只分享以上三个技术点的笔记，剩下的暂不分享，谢谢理解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4、GitHub&quot;&gt;&lt;a href=&quot;#4、GitHub&quot; class=&quot;headerlink&quot; title=&quot;4、GitHub&quot;&gt;&lt;/a&gt;4、GitHub&lt;/h1&gt;&lt;h2 id=&quot;常用词含义&quot;&gt;&lt;a href=&quot;#常用词含义&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="面试" scheme="http://stary2020.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://stary2020.gitee.io/2021/07/31/java-2021-07-31-SpringCloud/"/>
    <id>http://stary2020.gitee.io/2021/07/31/java-2021-07-31-SpringCloud/</id>
    <published>2021-07-31T10:59:30.000Z</published>
    <updated>2021-08-19T02:35:10.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-概述"><a href="#一、-概述" class="headerlink" title="一、 概述"></a>一、 概述</h1><p>1.微服务架构零基础理论入门（小白必看）<br>    零基础小白，2020.1春节期间预习过第一季的，理解微服务概念的可以不看</p><p>2.理论介绍见&lt;&lt;微服务架构2020.pptx&gt;&gt;</p><p>3.回顾2018年第一季SpringCloud版本<br>        别再用了</p><p>4.副主题</p><h1 id="二、从2-2-x和H版开始说起"><a href="#二、从2-2-x和H版开始说起" class="headerlink" title="二、从2.2.x和H版开始说起"></a>二、从2.2.x和H版开始说起</h1><h2 id="1-1-本次的SpringCloud第二季分为上半场和下半场"><a href="#1-1-本次的SpringCloud第二季分为上半场和下半场" class="headerlink" title="1.1.    本次的SpringCloud第二季分为上半场和下半场"></a>1.1.    本次的SpringCloud第二季分为上半场和下半场</h2><p>1.1.1.    上篇</p><p>·     SpringBoot2.X版和SpringCloud H版</p><p>1.1.2.    下篇</p><p>·     SpringCloud Alibaba</p><p>1.1.3.    大纲</p><h2 id="1-2-Springboot版本选择"><a href="#1-2-Springboot版本选择" class="headerlink" title="1.2.    Springboot版本选择"></a>1.2.    Springboot版本选择</h2><p>1.2.1.    git源码地址：</p><p>·     <a href="https://github.com/spring-projects/spring-boot/releases/">https://github.com/spring-projects/spring-boot/releases/</a></p><p>1.2.2.    SpringBoot2.0新特性：</p><p>·     <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Release-Notes</a></p><p>1.2.3.    通过上面官网发现，Boot官方强烈建议你升级到2.X以上版本</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004.gif" alt="graphic"></p><p>1.2.4.    官网看Boot版本</p><p>·      springboot(截至2019.10.26)</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006.gif" alt="graphic"></p><p>·     springboot(截至2020.2.15)</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008.gif" alt="graphic"></p><h2 id="1-3-SpringCloud版本选择"><a href="#1-3-SpringCloud版本选择" class="headerlink" title="1.3.    SpringCloud版本选择"></a>1.3.    SpringCloud版本选择</h2><p>1.3.1.    git源码地址</p><p>·     <a href="https://github.com/spring-projects/spring-cloud/wiki">https://github.com/spring-projects/spring-cloud/wiki</a></p><p>1.3.2.    官网：</p><p>·     <a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><p>1.3.3.    官网看Cloud版本</p><p>·     Cloud命名规则</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012.gif" alt="graphic"></p><p>​                             SpringCloud的多版本</p><p>​     <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014.gif" alt="graphic"></p><p>​     </p><p>·     springcloud(截至2019.10.26)</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016.gif" alt="graphic"></p><p>·     springboot(截至2020.2.15)</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018.gif" alt="graphic"></p><h2 id="1-4-SpringCloud和Springboot之间的依赖关系如何看"><a href="#1-4-SpringCloud和Springboot之间的依赖关系如何看" class="headerlink" title="1.4.    SpringCloud和Springboot之间的依赖关系如何看"></a>1.4.    SpringCloud和Springboot之间的依赖关系如何看</h2><p>1.4.1.    <a href="https://spring.io/projects/spring-cloud#overview">https://spring.io/projects/spring-cloud#overview</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image019.gif" alt="graphic"></p><p>1.4.2.    依赖</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image021.gif" alt="graphic"></p><p>1.4.3.    更详细的版本对应查看方法</p><p>·     <a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a></p><p>·     结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image023.gif" alt="graphic"></p><p>·     查看json串返回结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image025.gif" alt="graphic"></p><h2 id="1-5-SpringCloud第二季定稿版（截止2020-2-15）"><a href="#1-5-SpringCloud第二季定稿版（截止2020-2-15）" class="headerlink" title="1.5.    SpringCloud第二季定稿版（截止2020.2.15）"></a>1.5.    SpringCloud第二季定稿版（截止2020.2.15）</h2><p>1.5.1.    cloud</p><p>·     Hoxton.SR1</p><p>1.5.2.    boot</p><p>·     2.2.2.RELEASE</p><p>1.5.3.    cloud Alibaba</p><p>·     2.1.0.RELEASE</p><p>1.5.4.    java</p><p>·     JAVA8</p><p>1.5.5.    maven</p><p>·     3.5及以上</p><p>1.5.6.    mysql</p><p>·     5.7及以上</p><p>1.5.7.    不许捣蛋，上述全部版本必须和阳哥一致</p><p>1.5.8.    题外话</p><p>·     boot版已经到2.2.4为最新，为什么选2.2.2？</p><p>·     只用boot，直接用最新</p><p>·     同时用boot和cloud，需要照顾cloud，由cloud决定boot版本</p><p>·     结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image027.gif" alt="graphic"></p><p>·     SpringCloud和SpringBoot版本对应关系</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image029.gif" alt="graphic"></p><p>·     2.X版本常用的组件pom</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image031.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image033.gif" alt="graphic"></p><h1 id="三、关于Cloud各种组件的停更-升级-替换"><a href="#三、关于Cloud各种组件的停更-升级-替换" class="headerlink" title="三、关于Cloud各种组件的停更/升级/替换"></a>三、关于Cloud各种组件的停更/升级/替换</h1><h2 id="1-1-由停更引发的“升级惨案”"><a href="#1-1-由停更引发的“升级惨案”" class="headerlink" title="1.1.    由停更引发的“升级惨案”"></a>1.1.    由停更引发的“升级惨案”</h2><p>1.1.1.    停更不停用</p><p>·     被动修复bugs</p><p>·     不再接受合并请求</p><p>·     不再发布新版本</p><p>1.1.2.    补充，哈哈</p><p>·     停课不停学</p><p>1.1.3.    明细条目</p><p>·     以前</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627781470843.gif" alt="graphic"></p><p>·     now2020</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627781470844.gif" alt="graphic"></p><h2 id="1-2-参考资料见官网"><a href="#1-2-参考资料见官网" class="headerlink" title="1.2.    参考资料见官网"></a>1.2.    参考资料见官网</h2><p>1.2.1.    Spring Cloud</p><p>·     <a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/</a></p><p>·     Spring Cloud中文文档</p><p>·     <a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a></p><p>1.2.2.    Spring Boot</p><p>·     <a href="https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/">https://docs.spring.io/spring-boot/docs/2.2.2.RELEASE/reference/htmlsingle/</a></p><h1 id="四、微服务架构编码构建"><a href="#四、微服务架构编码构建" class="headerlink" title="四、微服务架构编码构建"></a>四、微服务架构编码构建</h1><p>4.微服务架构编码构建<br>    约定 &gt; 配置 &gt; 编码<br>    IDEA新建project工作空间<br>        微服务cloud整体聚合父工程Project<br>            父工程步骤<br>                1.New Project<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193432321.png" alt="image-20210731193432321"><br>                2.聚合总工程名字<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193446760.png" alt="image-20210731193446760"><br>                3.Maven选版本<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193456117.png" alt="image-20210731193456117"><br>                4.工程名字<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193505217.png" alt="image-20210731193505217"><br>                5.字符编码<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193514154.png" alt="image-20210731193514154"><br>                6.注解生效激活<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193525666.png" alt="image-20210731193525666"><br>                7.java编译版本选8<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193537623.png" alt="image-20210731193537623"><br>                8.File Type过滤<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193552754.png" alt="image-20210731193552754"><br>        父工程POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        解决maven下载不了jar的问题请复制这个链接到浏览器自行解决：<br>​            <a href="https://blog.csdn.net/HeyWeCome/article/details/104543411">https://blog.csdn.net/HeyWeCome/article/details/104543411</a><br>​        Maven工程落地细节复习<br>​            Maven中的dependencyManagement和dependencies<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731193659630.png" alt="image-20210731193659630"><br>​            maven中跳过单元测试<br>​        父工程创建完成执行mvn:install将父工程发布到仓库方便子工程继承<br>​    Rest微服务工程构建<br>​        构建步骤<br>​            1.cloud-provider-payment8001微服务提供者支付Module模块<br>​                建cloud-provider-payment8001<br>​                    创建完成后请回到父工程查看pom文件变化<br>​                改POM文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                写YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span></span><br></pre></td></tr></table></figure><p>​                主启动<br>​                业务类<br>​                    1.建表SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> payment (</span><br><span class="line"> id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT ID,</span><br><span class="line"> <span class="string">&#x27;serial&#x27;</span> <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                    2.entitles<br>​                        主实体Payment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                        Json封装体CommonResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                    3.dao<br>​                        接口PaymentDao<br>​                        mybatis的映射文件PaymentMapper.xml<br>​                            路径<br>​                                src\main\resources\mapper\PaymentMapper.xml<br>​                                文件头</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                            PaymentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            insert into payment(serial) values($&#123;serial&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.entities.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">            select * from payment where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                    4.service<br>​                        接口PaymentService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>; <span class="comment">//写</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;  <span class="comment">//读取</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                        实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.dao.PaymentDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">( Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                    5.controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">       log.info(<span class="string">&quot;*****插入结果：&quot;</span>+result);</span><br><span class="line">       <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;  <span class="comment">//成功</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;插入数据库成功&quot;</span>,result);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入数据库失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****查询结果：&quot;</span>+payment);</span><br><span class="line">        <span class="keyword">if</span> (payment!=<span class="keyword">null</span>)&#123;  <span class="comment">//说明有数据，能查询成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;查询成功&quot;</span>,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;没有对应记录，查询ID：&quot;</span>+id,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                测试<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194113163.png" alt="image-20210731194113163"><br>​                    <a href="http://localhost:8001/payment/get/31">http://localhost:8001/payment/get/31</a><br>​                    postman模拟post<br>​                    运行<br>​                        通过修改idea的workpace.xml的方式来快速打开Run DashBoard窗口<br>​                        开启Run DashBoard</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">填入以下内容：</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                        部分同学可能由于idea版本不同，需要关闭重启<br>​                小总结<br>​                    1.建module<br>​                    2.改POM<br>​                    3.写YML<br>​                    4.主启动<br>​                    5.业务类<br>​            2.热部署Devtools<br>​                1.Adding devtools to your project</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                2.Adding plugin to your pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">下一段配置黏贴到父工程当中的pom里</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                3.Enabling automatic build<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194252086.png" alt="image-20210731194252086">                4.Update the value of<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194408847.png" alt="image-20210731194408847"><br><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194432142.png" alt="image-20210731194432142"></p><p>​                5.重启IDEA<br>​            3.cloud-consumer-order80微服务消费者订单Module模块<br>​                建cloud-consumer-order80<br>​                改POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                写YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                业务类<br>​                    创建entities(将cloud-provider-payment8001工程下的entities包下的两个实体类复制过来)<br>​                    首说RestTemplate<br>​                        是什么<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194554613.png" alt="image-20210731194554613"><br>​                        官网及使用：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194708842.png" alt="image-20210731194708842">                    config配置类<br>                        ApplicationContextConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                    创建controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt;   <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);  <span class="comment">//写操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                测试<br>​                    先启动cloud-provider-payment8001<br>​                    再启动cloud-consumer-order80<br>​                    <a href="http://localhost/consumer/payment/get/32">http://localhost/consumer/payment/get/32</a><br>​<br>不要忘记@RequestBody注解<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194805711.png" alt="image-20210731194805711"><br>​            4.工程重构<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194827366.png" alt="image-20210731194827366"><br>​                观察问题<br>​                    系统中有重复部分，重构<br>​                新建<br>​                    cloud-api-commons<br>​                POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/cn.hutool/hutool-all --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                entities<br>​                    Payment实体<br>​                    CommonResult通用封装类<br>​                maven命令clean install<br>​                订单80和支付8001分别改造<br>​                    删除各自的原先有过的entities文件夹<br>​                    各自黏贴POM内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                        80<br>​                        8001<br>​        目前工程样图<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731194929407.png" alt="image-20210731194929407"></p><h1 id="五、Eureka服务注册与发现"><a href="#五、Eureka服务注册与发现" class="headerlink" title="五、Eureka服务注册与发现"></a>五、Eureka服务注册与发现</h1><p>5.Eureka服务注册与发现<br>    Eureka基础知识<br>        什么是服务治理<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195005022.png" alt="image-20210731195005022"><br>        什么是服务注册<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195012719.png" alt="image-20210731195012719"><br>        Eureka两组件<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195020321.png" alt="image-20210731195020321"><br>    单机Eureka构建步骤<br>        IDEA生成eurekaServer端服务注册中心类似物业公司<br>            建Module<br>                cloud-eureka-server7001<br>            改POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                1.X和2.X的对比说明<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195054362.png" alt="image-20210731195054362"><br>​            写YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>  <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">     <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span>    <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                @EnableEurekaServer<br>​            测试<br>​                <a href="http://localhost:7001/">http://localhost:7001/</a><br>​                结果页面<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195156671.png" alt="image-20210731195156671"><br>​        EurekaClient端cloud-provider-payment8001将注册进EurekaServer成为服务提供者provider，类似尚硅谷学校对外提供授课服务<br>​            cloud-provider-payment8001<br>​            改POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                1.X和2.X的对比说明<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195241189.png" alt="image-20210731195241189"><br>​            写YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                @EnableEurekaClient<br>​            测试<br>​                先要启动EurekaServer<br>​                <a href="http://localhost:7001/![image-20210731195338345](2021-07-31-SpringCloud/image-20210731195338345.png)">http://localhost:7001/![image-20210731195338345](2021-07-31-SpringCloud/image-20210731195338345.png)</a><br>​                微服务注册名配置说明<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195352771.png" alt="image-20210731195352771"><br>​            自我保护机制<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195359444.png" alt="image-20210731195359444"><br>​        EurekaClient端cloud-consumer-order80将注册进EurekaServer成为服务消费者consumer,类似来尚硅谷上课消费的各位同学<br>​            cloud-consumer-order80<br>​            POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            写YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                @EnableEurekaClient<br>​            测试<br>​                先要启动EurekaServer，7001服务<br>​                再要启动服务提供者provider，8001服务<br>​                eureka服务器<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195524230.png" alt="image-20210731195524230"><br>​                <a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a><br>​        bug<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195536843.png" alt="image-20210731195536843"><br>​    集群Eureka构建步骤<br>​        Eureka集群原理说明<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195607058.png" alt="image-20210731195607058"></p><p>解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错</p><p>​        EurekaServer集群环境构建步骤<br>​            参考cloud-eureka-server7001<br>​            新建cloud-eureka-server7002<br>​            改POM<br>​            修改映射配置<br>​                找到C:\Windows\System32\drivers\etc路径下的hosts文件<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195703224.png" alt="image-20210731195703224"><br>​                    Subtopic<br>​                修改映射配置添加进hosts文件<br>​                    127.0.0.1  eureka7001.com<br>​                    127.0.0.1  eureka7002.com<br>​            写YML（以前单机）<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195732557.png" alt="image-20210731195732557"></p><p>​                7001<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731195742439.png" alt="image-20210731195742439"><br>​                7002</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span>     <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动(复制cloud-eureka-server7001的主启动类到7002即可)<br>​        将支付服务8001微服务发布到上面2台Eureka集群配置中</p><p>​            YML</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service-url:</span><br><span class="line">  defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka  #集群版</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>​        将订单服务80微服务发布到上面2台Eureka集群配置中<br>​            YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>  <span class="comment">#集群版</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        测试01<br>​            先要启动EurekaServer，7001/7002服务<br>​            再要启动服务提供者provider，8001服务<br>​            再要启动消费者，80<br>​            <a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a><br>​        支付服务提供者8001集群环境构建<br>​            参考cloud-provider-payment8001<br>​            新建cloud-provider-payment8002<br>​            改POM<br>​            写YML<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200015731.png" alt="image-20210731200015731"></p><p>​                7001</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>    <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span>    <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                7002</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名字</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span>     <span class="comment">#设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动类<br>​                找到C:\Windows\System32\drivers\etc路径下的hosts文件</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200130451.png" alt="image-20210731200130451">                    Subtopic<br>                修改映射配置添加进hosts文件<br>                    127.0.0.1  eureka7001.com<br>                    127.0.0.1  eureka7002.com<br>            修改8001/8002的Controller<br>                8001<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200148798.png" alt="image-20210731200148798"><br>                8002<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200159323.png" alt="image-20210731200159323"><br>        负载均衡<br>            bug<br>                订单服务访问地址不能写死</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="string">改为这个：</span></span><br><span class="line"> </span><br><span class="line"><span class="string">public</span> <span class="string">static</span> <span class="string">final</span> <span class="string">String</span> <span class="string">PAYMENT_URL</span> <span class="string">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span><span class="string">;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            使用@LoadBalanced注解赋予RestTemplate负载均衡的能力<br>​            ApplicationContextBean<br>​                提前说一下Ribbon的负载均衡功能<br>​        测试02<br>​            先要启动EurekaServer，7001/7002服务<br>​            再要启动服务提供者provider，8001/8002服务<br>​            <a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a><br>​            结果<br>​                负载均衡效果达到<br>​                8001/8002端口交替出现<br>​            Ribbon和Eureka整合后Consumer可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能了<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200311527.png" alt="image-20210731200311527"><br>​    actuator微服务信息完善<br>​        主机名称：服务名称修改<br>​            当前问题<br>​            修改cloud-provider-payment8001<br>​                YML<br>​                    修改部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                    完整部分<br>​            修改之后<br>​        访问信息有ip信息提示<br>​            当前问题<br>​                没有ip提示<br>​            修改cloud-provider-payment8001<br>​                YML<br>​                    修改部分</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>​                    完整内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>  <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            修改之后<br>​    服务发现Discovery<br>​        对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息<br>​        修改cloud-provider-payment8001的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;***** element:&quot;</span>+element);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        8001主启动类<br>​            @EnableDiscoveryClient<br>​        自测<br>​            先要启动EurekaServer，7001/7002服务<br>​            再启动8001主启动类，需要稍等一会<br>​            <a href="http://localhost:8001/payment/discovery">http://localhost:8001/payment/discovery</a><br>​    Eureka自我保护<br>​        故障现象<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200557218.png" alt="image-20210731200557218"><br>​        导致原因<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200632750.png" alt="image-20210731200632750"><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200644388.png" alt="image-20210731200644388"><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200702389.png" alt="image-20210731200702389"><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200731364.png" alt="image-20210731200731364">            一句话：某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存<br>​            属于CAP里面的AP分支<br>​        怎么禁止自我保护（一般生产环境中不会禁止自我保护）<br>​            注册中心eureakeServer端7001<br>​                出厂默认，自我保护机制是开启的<br>​                    eureka.server.enable-self-preservation = true<br>​                使用eureka.server.enable-self-preservation = false可以禁用自我保护模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                关闭效果<br>​                在eurekaServer端7001处设置关闭自我保护机制<br>​            生产者客户端eureakeClient端8001<br>​                默认<br>​                    eureka.instance.lease-renewal-interval-in-seconds=30<br>​                        单位为秒（默认是30秒）<br>​                    eureka.instance.lease-expiration-duration-in-seconds=90<br>​                        单位为秒（默认是90秒)<br>​                配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span>  <span class="number">1</span></span><br><span class="line">   <span class="attr">lease-expiration-duration-in-seconds:</span>  <span class="number">2</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731200912055.png" alt="image-20210731200912055">                测试<br>                    7001和8001都配置完成<br>                    先启动7001再启动8001<br>                    先关闭8001<br>                        马上被删除了</p><h1 id="六、Zookeeper服务注册与发现"><a href="#六、Zookeeper服务注册与发现" class="headerlink" title="六、Zookeeper服务注册与发现"></a>六、Zookeeper服务注册与发现</h1><p>6.Zookeeper服务注册与发现<br>    Eureka停止更新了你怎么办<br>        <a href="https://github.com/Netflix/eureka/wiki">https://github.com/Netflix/eureka/wiki</a><br>    SpringCloud整合Zookeeper代替Eureka<br>        注册中心Zookeeper<br>            zookeeper是一个分布式协调工具，可以实现注册中心功能<br>            关闭Linux服务器防火墙后启动zookeeper服务器<br>            zookeeper服务器取代Eureka服务器，zk作为服务注册中心<br>        服务提供者<br>            新建cloud-provider-payment8004<br>            POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.140</span><span class="string">:2181</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper:&quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            启动8004注册进zookeeper<br>​                启动后问题<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201114147.png" alt="image-20210731201114147"><br>​                why<br>​                    解决zookeeper版本jar包冲突问题<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201128721.png" alt="image-20210731201128721"><br>​                    排出zk冲突后的新POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除zk3.5.3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zk 3.4,9版本--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            验证测试<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201205137.png" alt="image-20210731201205137"><br>​                <a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a><br>​            验证测试2<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201219231.png" alt="image-20210731201219231"><br>​                获得json串后用在线工具查看试试<br>​            思考<br>​                服务节点是临时节点还是持久节点::::是临时节点<br>​        服务消费者<br>​            新建cloud-consumerzk-order80<br>​            POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.140</span><span class="string">:2181</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper:&quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                配置Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​                Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOME_URL = <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      String result = restTemplate.getForObject(INVOME_URL+<span class="string">&quot;/payment/zk&quot;</span>,String.class);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            启动8004注册进zookeeper<br>​                启动后问题<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201425317.png" alt="image-20210731201425317"><br>​                why<br>​                    解决zookeeper版本jar包冲突问题<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201439382.png" alt="image-20210731201439382"><br>​                    排出zk冲突后的新POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除zk3.5.3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zk 3.4,9版本--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​            验证测试<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201511816.png" alt="image-20210731201511816"><br>​                <a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a><br>​            访问测试地址<br>​                <a href="http://localhost/consumer/payment/zk">http://localhost/consumer/payment/zk</a></p><h1 id="七、Consul服务注册与发现"><a href="#七、Consul服务注册与发现" class="headerlink" title="七、Consul服务注册与发现"></a>七、Consul服务注册与发现</h1><p>7.Consul服务注册与发现<br>    Consul简介<br>        是什么<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201541117.png" alt="image-20210731201541117"><br>            <a href="https://www.consul.io/intro/index.html">https://www.consul.io/intro/index.html</a><br>        能干嘛<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201555617.png" alt="image-20210731201555617"><br>            服务发现<br>                提供HTTP和DNS两种发现方式<br>            健康监测<br>                支持多种协议，HTTP、TCP、Docker、Shell脚本定制化<br>            KV存储<br>                key , Value的存储方式<br>            多数据中心<br>                Consul支持多数据中心<br>            可视化Web界面<br>        去哪下<br>            <a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a><br>        怎么玩<br>            <a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a><br>    安装并运行Consul<br>        官网安装说明<br>            <a href="https://learn.hashicorp.com/consul/getting-started/install.html">https://learn.hashicorp.com/consul/getting-started/install.html</a><br>        下载完成后只有一个consul.exe文件，硬盘路径下双击运行，查看版本信息<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201638085.png" alt="image-20210731201638085"><br>        使用开发模式启动<br>            consul agent -dev<br>            通过以下地址可以访问Consul的首页：http;//localhost:8500<br>            结果页面<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201659439.png" alt="image-20210731201659439"><br>    服务提供者<br>        新建Module支付服务provider8006<br>            cloud-providerconsul-payment8006<br>        POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-providerconsul-payment8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-consul-discovery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        业务类Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        验证测试<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731201826986.png" alt="image-20210731201826986"><br>​            <a href="http://localhost:8006/payment/consul">http://localhost:8006/payment/consul</a><br>​    服务消费者<br>​        新建Module消费服务order8006<br>​            cloud-consumerconsul-order80<br>​        POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumerconsul-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-consul-discovery --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderConsulMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        配置Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOME_URL = <span class="string">&quot;http://consul-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      String result = restTemplate.getForObject(INVOME_URL+<span class="string">&quot;/payment/consul&quot;</span>,String.class);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        验证测试<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731202028381.png" alt="image-20210731202028381"><br>​        访问测试地址<br>​            <a href="http://localhost/consumer/payment/consul">http://localhost/consumer/payment/consul</a><br>​    三个注册中心异同点<br>​        CAP<br>​            C:Consistency(强一致性)<br>​            A:Availability(可用性)<br>​            P:Partition tolerance(分区容错)<br>​            CAP理论关注粒度是数据，而不是整体系统设计的策略<br>​        经典CAP图<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731202048536.png" alt="image-20210731202048536"><br>​            AP(Eureka)<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731202101139.png" alt="image-20210731202101139"><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731202207336.png" alt="image-20210731202207336"><br>​            CP(Zookeeper/Consul)<img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731202228153.png" alt="image-20210731202228153"><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210731202246097.png" alt="image-20210731202246097"></p><h1 id="八、Ribbon负载均衡服务调用"><a href="#八、Ribbon负载均衡服务调用" class="headerlink" title="八、Ribbon负载均衡服务调用"></a>八、Ribbon负载均衡服务调用</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1.    概述"></a>1.1.    概述</h2><p>1.1.1.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627781602686.gif" alt="graphic"></p><p>1.1.2.    官网资料</p><p>·     <a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">https://github.com/Netflix/ribbon/wiki/Getting-Started</a></p><p>·     Ribbon目前也进入维护模式</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627781602686.gif" alt="graphic"></p><p>·     未来替换方案</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627781602687.gif" alt="graphic"></p><p>1.1.3.    能干嘛</p><p>·     LB（负载均衡）</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627781602687.gif" alt="graphic"></p><p>·     集中式LB</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627781602687.gif" alt="graphic"></p><p>·     进程内LB</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627781602687.gif" alt="graphic"></p><p>·     前面我们讲解过了80通过轮询负载访问8001/8002</p><p>·     一句话</p><p>·     负载均衡+RestTemplate调用</p><h2 id="1-2-Ribbon负载均衡演示"><a href="#1-2-Ribbon负载均衡演示" class="headerlink" title="1.2.    Ribbon负载均衡演示"></a>1.2.    Ribbon负载均衡演示</h2><p>1.2.1.    架构说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627781602687.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627781602687.gif" alt="graphic"></p><p>·     总结：Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和eureka结合只是其中的一个实例。</p><p>1.2.2.    POM</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022.gif" alt="graphic"></p><p>1.2.3.    二说RestTemplate的使用</p><p>·     官网</p><p><a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024.gif" alt="graphic"></p><p>·     getForObject方法/getForEntity方法</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026.gif" alt="graphic"></p><p>·     postForObject/postForEntity</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028.gif" alt="graphic"></p><p>·     GET请求方法</p><p>·     POST请求方法</p><h2 id="1-3-Ribbon核心组件IRule"><a href="#1-3-Ribbon核心组件IRule" class="headerlink" title="1.3.    Ribbon核心组件IRule"></a>1.3.    Ribbon核心组件IRule</h2><p>1.3.1.    IRule:根据特定算法从服务列表中选取一个要访问的服务</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030.gif" alt="graphic"></p><p>·     com.netflix.loadbalancer.RoundRobinRule</p><p>·     轮询</p><p>·     com.netflix.loadbalancer.RandomRule</p><p>·     随机</p><p>·     com.netflix.loadbalancer.RetryRule</p><p>·     先按照RoundRobinRule的策略获取服务，如果获取服务失败则在指定时间内会进行重试</p><p>·     WeightedResponseTimeRule</p><p>·     对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择</p><p>·     BestAvailableRule</p><p>·     会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</p><p>·     AvailabilityFilteringRule</p><p>·     先过滤掉故障实例，再选择并发较小的实例</p><p>·     ZoneAvoidanceRule</p><p>·     默认规则，复合判断server所在区域的性能和server的可用性选择服务器</p><p>1.3.2.    如何替换</p><p>·     修改cloud-consumer-order80</p><p>·     注意配置细节</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034.gif" alt="graphic"></p><p>·     新建package</p><p>·     com.atguigu.myrule</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036.gif" alt="graphic"></p><p>·     上面包下新建MySelfRule规则类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.myrule;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"> <span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//定义为随机</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>·     主启动类添加@RibbonClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.myrule.MySelfRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.ribbon.RibbonClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     <a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a></p><p>1.4.    Ribbon负载均衡算法</p><p>1.4.1.    原理</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038.gif" alt="graphic"></p><p>1.4.2.    RoundRobinRule源码</p><p>1.4.3.    手写</p><p>·     自己试着写一个本地负载均衡器试试</p><p>·     7001/7002集群启动</p><p>·     8001/8002微服务改造</p><p>·     controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     80订单微服务改造</p><p>·     1.ApplicationContextBean去掉@LoadBalanced</p><p>·     2.LoadBalancer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.lb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line">     <span class="comment">//收集服务器总共有多少台能够提供服务的机器，并放到list里面</span></span><br><span class="line">    <span class="function">ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     3.MyLB</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.lb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLB</span> <span class="keyword">implements</span> <span class="title">LoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//坐标</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.atomicInteger.get();</span><br><span class="line">            next = current &gt;= <span class="number">2147483647</span> ? <span class="number">0</span> : current + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="keyword">this</span>.atomicInteger.compareAndSet(current,next));  <span class="comment">//第一个参数是期望值，第二个参数是修改值是</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*******第几次访问，次数next: &quot;</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;  <span class="comment">//得到机器的列表</span></span><br><span class="line">       <span class="keyword">int</span> index = getAndIncrement() % serviceInstances.size(); <span class="comment">//得到服务器的下标位置</span></span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     4.OrderController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.lb.LoadBalancer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancer loadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt;   <span class="title">create</span><span class="params">( Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);  <span class="comment">//写操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/getForEntity/&#123;id&#125;&quot;)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">        <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful())&#123;</span><br><span class="line">          <span class="comment">//  log.info(entity.getStatusCode()+&quot;\t&quot;+entity.getHeaders());</span></span><br><span class="line">            <span class="keyword">return</span> entity.getBody();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/lb&quot;)</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (instances == <span class="keyword">null</span> || instances.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancer.instances(instances);</span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri+<span class="string">&quot;/payment/lb&quot;</span>,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     5.测试</p><p>·     <a href="http://localhost/consumer/payment/lb">http://localhost/consumer/payment/lb</a></p><h1 id="九、OpenFeign服务接口调用"><a href="#九、OpenFeign服务接口调用" class="headerlink" title="九、OpenFeign服务接口调用"></a>九、OpenFeign服务接口调用</h1><h2 id="1-1-概述-1"><a href="#1-1-概述-1" class="headerlink" title="1.1.    概述"></a>1.1.    概述</h2><p>1.1.1.    OpenFeign是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627782060787.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627782060787.gif" alt="graphic"></p><p>·     Feign是一个声明式的web服务客户端，让编写web服务客户端变得非常容易，只需创建一个接口并在接口上添加注解即可</p><p>·     GitHub</p><p>·     <a href="https://github.com/spring-cloud/spring-cloud-openfeign">https://github.com/spring-cloud/spring-cloud-openfeign</a></p><p>1.1.2.    能干嘛</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627782060787.gif" alt="graphic"></p><p>1.1.3.    Feign和OpenFeign两者区别</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627782060787.gif" alt="graphic"></p><h2 id="1-2-OpenFeign使用步骤"><a href="#1-2-OpenFeign使用步骤" class="headerlink" title="1.2.    OpenFeign使用步骤"></a>1.2.    OpenFeign使用步骤</h2><p>1.2.1.    接口+注解</p><p>·     微服务调用接口+@FeignClient</p><p>1.2.2.    新建cloud-consumer-feign-order80</p><p>·     Feign在消费端使用</p><p>1.2.3.    POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>     <span class="tag">&lt;<span class="name">parent</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>     <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>     <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>       <span class="comment">&lt;!--openfeign--&gt;</span>     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>             <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>          <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>             <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.4.    YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"> <span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">   <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">   <span class="attr">service-url:</span></span><br><span class="line">    <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,</span> <span class="string">http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><p>1.2.5.    主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·      @EnableFeignClients</p><p>1.2.6.    业务类</p><p>·     业务逻辑接口+@FeignClient配置调用provider服务</p><p>·     新建PaymentFeignService接口并新增注解@FeignClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> feign.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     控制层Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentFeignService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2.7.    测试</p><p>·     先启动2个eureka集群7001/7002</p><p>·     再启动2个微服务8001/8002</p><p>·     启动OpenFeign启动</p><p>·     <a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a></p><p>·     Feign自带负载均衡配置项</p><p>1.2.8.    小总结</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627782060787.gif" alt="graphic"></p><h2 id="1-3-OpenFeign超时控制"><a href="#1-3-OpenFeign超时控制" class="headerlink" title="1.3.    OpenFeign超时控制"></a>1.3.    OpenFeign超时控制</h2><p>1.3.1.    超时设置，故意设置超时演示出错情况</p><p>·     服务提供方8001故意写暂停程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     服务消费方80添加超时方法PaymentFeignService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     服务消费方80添加超时方法OrderFeignController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     <a href="http://localhost/consumer/payment/feign/timeout">http://localhost/consumer/payment/feign/timeout</a></p><p>·     错误页面</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627782060787.gif" alt="graphic"></p><p>1.3.2.    OpenFeign默认等待一秒钟，超过后报错</p><p>1.3.3.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627782060788.gif" alt="graphic"></p><p>·     OpenFeign默认支持Ribbon</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627782060788.gif" alt="graphic"></p><p>1.3.4.    YML文件里需要开启OpenFeign客户端超时控制</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span>  <span class="number">5000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p>1.4.    OpenFeign日志打印功能</p><p>1.4.1.    日志打印功能</p><p>1.4.2.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627782060789.gif" alt="graphic"></p><p>1.4.3.    日志级别</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627782060789.gif" alt="graphic"></p><p>1.4.4.    配置日志bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.4.5.    YML文件里需要开启日志的Feign客户端</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">   <span class="attr">com.atguigu.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>1.4.6.    后台日志查看</p><h1 id="十、Hystrix断路器"><a href="#十、Hystrix断路器" class="headerlink" title="十、Hystrix断路器"></a>十、Hystrix断路器</h1><h2 id="1-1-概述-2"><a href="#1-1-概述-2" class="headerlink" title="1.1.    概述"></a>1.1.    概述</h2><p>1.1.1.    分布式系统面临的问题</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627782424223.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627782424223.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627782424223.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627782424223.gif" alt="graphic"></p><p>1.1.2.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627782424223.gif" alt="graphic"></p><p>1.1.3.    能干嘛</p><p>·     服务降级</p><p>·     服务熔断</p><p>·     接近实时的监控</p><p>·     。。。。。</p><p>1.1.4.    官网资料</p><p>·     <a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p><p>1.1.5.    Hystrix官宣，停更进维</p><p>·     <a href="https://github.com/Netflix/Hystrix">https://github.com/Netflix/Hystrix</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627782424223.gif" alt="graphic"></p><p>·     被动修复bugs</p><p>·     不再接受合并请求</p><p>·     不再发布新版本</p><h2 id="1-2-Hystrix重要概念"><a href="#1-2-Hystrix重要概念" class="headerlink" title="1.2.    Hystrix重要概念"></a>1.2.    Hystrix重要概念</h2><p>1.2.1.    服务降级</p><p>·     服务器忙，请稍候再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p>·     哪些情况会触发降级</p><p>·     程序运行异常</p><p>·     超时</p><p>·     服务熔断触发服务降级</p><p>·     线程池/信号量打满也会导致服务降级</p><p>1.2.2.    服务熔断</p><p>·     类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示</p><p>·     就是保险丝</p><p>·     服务的降级-&gt;进而熔断-&gt;恢复调用链路</p><p>1.2.3.    服务限流</p><p>·     秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p><p>1.3.    hystrix案例</p><p>1.3.1.    构建</p><p>·     新建cloud-provider-hystrix-payment8001</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-hystrix-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://eureka7002.com:7002/eureka/    #设置与eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"><span class="comment">#  server:</span></span><br><span class="line"><span class="comment">#    enable-self-preservation: false</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"><span class="comment">#    eviction-interval-timer-in-ms: 2000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类</p><p>·     service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   paymentInfo_OK,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;哈哈哈&quot;</span>  ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(timeNumber); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   paymentInfo_TimeOut,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;呜呜呜&quot;</span>+<span class="string">&quot; 耗时(秒)&quot;</span>+timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     正常测试</p><p>·     启动eureka7001</p><p>·     启动cloud-provider-hystrix-payment8001</p><p>·     访问</p><p>·     访问</p><p>·     <a href="http://localhost:8001/payment/hystrix/ok/31">http://localhost:8001/payment/hystrix/ok/31</a></p><p>·     每次调用耗费5秒钟</p><p>·     <a href="http://localhost:8001/payment/hystrix/timeout/31">http://localhost:8001/payment/hystrix/timeout/31</a></p><p>·     上述module均OK</p><p>·     以上述为根基平台，从正确-&gt;错误-&gt;降级熔断-&gt;恢复</p><p>1.3.2.    高并发测试</p><p>·     上述在非高并发情形下，还能勉强满足  but…..</p><p>·     Jmeter压测测试</p><p>·     开启Jmeter，来20000个并发压死8001，20000个请求都去访问paymentInfo_TimeOut服务</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627782424223.gif" alt="graphic"></p><p>·     再来一个访问</p><p>·     <a href="http://localhost:8001/payment/hystrix/ok/31">http://localhost:8001/payment/hystrix/ok/31</a></p><p>·     <a href="http://localhost:8001/payment/hystrix/timeout/31">http://localhost:8001/payment/hystrix/timeout/31</a></p><p>·     看演示结果</p><p>·     两个都在自己转圈圈</p><p>·     为什么会被卡死</p><p>tomcat的默认的工作线程数被打满了，没有多余的线程来分解压力和处理。</p><p>·     Jmeter压测结论</p><p>·     上面还是服务提供者8001自己测试，假如此时外部的消费者80也来访问，那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死</p><p>·     看热闹不嫌弃事大，80新建加入</p><p>·     cloud-consumer-feign-hystrix-order80</p><p>·     新建</p><p>·     cloud-consumer-feign-hystrix-order80</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-hystrix-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span>    <span class="comment">#表识不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span>   <span class="comment">#表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">             <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     业务类</p><p>·     PaymentHystrixService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   paymentInfo_OK,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;哈哈哈&quot;</span>  ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(timeNumber); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   paymentInfo_TimeOut,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;呜呜呜&quot;</span>+<span class="string">&quot; 耗时(秒)&quot;</span>+timeNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     OrderHystrixController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     正常测试</p><p>·     <a href="http://localhost/consumer/payment/hystrix/ok/31">http://localhost/consumer/payment/hystrix/ok/31</a></p><p>·     高并发测试</p><p>·     2W个线程压8001</p><p>·     消费端80微服务再去访问正常的OK微服务8001地址</p><p>·     <a href="http://localhost/consumer/payment/hystrix/timeout/31">http://localhost/consumer/payment/hystrix/timeout/31</a></p><p>·     消费者80，呜呜呜</p><p>·     要么转圈圈等待</p><p>·     要么消费端报超时错误</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627782424223.gif" alt="graphic"></p><p>1.3.3.    故障现象和导致原因</p><p>·     8001同一层次的其他接口服务被困死，因为tomcat线程里面的工作线程已经被挤占完毕</p><p>·     80此时调用8001，客户端访问响应缓慢，转圈圈</p><p>1.3.4.    上诉结论</p><p>·     正因为有上述故障或不佳表现，才有我们的降级/容错/限流等技术诞生</p><p>1.3.5.    如何解决？解决的要求</p><p>·     超时导致服务器变慢（转圈）</p><p>·     超时不再等待</p><p>·     出错（宕机或程序运行出错）</p><p>·     出错要有兜底</p><p>·     解决</p><p>·     对方服务（8001）超时了，调用者（80）不能一直卡死等待，必须有服务降级</p><p>·     对方服务（8001）down机了，调用者（80）不能一直卡死等待，必须有服务降级</p><p>·     对方服务（8001）OK，调用者（80）自己出故障或有自我要求（自己的等待时间小于服务提供者），自己处理降级</p><p>1.3.6.    服务降级</p><p>·     降低配置</p><p>·     @HystrixCommand</p><p>·     8001先从自身找问题</p><p>·     设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级fallback</p><p>·     8001fallback</p><p>·     业务类启用</p><p>·     @HystrixCommand报异常后如何处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   paymentInfo_OK,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;哈哈哈&quot;</span>  ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)  //3秒钟以内就是正常的业务逻辑</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">       <span class="comment">// int timeNumber = 5;</span></span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">       <span class="comment">// try &#123; TimeUnit.SECONDS.sleep(timeNumber); &#125;catch (Exception e) &#123;e.printStackTrace();&#125;</span></span><br><span class="line">        <span class="comment">//return &quot;线程池：&quot;+Thread.currentThread().getName()+&quot;   paymentInfo_TimeOut,id：  &quot;+id+&quot;\t&quot;+&quot;呜呜呜&quot;+&quot; 耗时(秒)&quot;+timeNumber;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   paymentInfo_TimeOut,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;呜呜呜&quot;</span>+<span class="string">&quot; 耗时(秒)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//兜底方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;   系统繁忙, 请稍候再试  ,id：  &quot;</span>+id+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;哭了哇呜&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     一旦调用服务方法失败并抛出了错误信息后，会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法</p><p>·     图示</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627782424223.gif" alt="graphic"></p><p>·     主启动类激活</p><p>·     添加新注解@EnableCircuitBreaker</p><p>·     80fallback</p><p>·     80订单微服务，也可以更好的保护自己，自己也依样画葫芦进行客户端降级保护</p><p>·     题外话，切记</p><p>·     我们自己配置过的热部署方式对java代码的改动明显，但对@HystrixCommand内属性的修改建议重启微服务</p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">feign</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#如果处理自身的容错就开启。开启方式与生产端不一样。</span></span><br></pre></td></tr></table></figure><p>·     主启动</p><p>·     @EnableHystrix</p><p>·     业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)  //3秒钟以内就是正常的业务逻辑</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是消费者80，对付支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,(┬＿┬)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     目前问题</p><p>·     每个业务方法对应一个兜底的方法，代码膨胀</p><p>·     统一和自定义的分开</p><p>·     解决问题</p><p>·     每个方法配置一个？？？膨胀</p><p>·     feign接口系列</p><p>·     @DefaultProperties(defaultFallback = “”)</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627782424224.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627782424224.gif" alt="graphic"></p><p>·     说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627782424224.gif" alt="graphic"></p><p>·     controller配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentHystrixService;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.DefaultProperties;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span>  <span class="comment">//全局的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    public String paymentInfo_TimeOut(@PathVariable(&quot;id&quot;) Integer id)&#123;</span></span><br><span class="line"><span class="comment">//        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span></span><br><span class="line"><span class="comment">//        return result;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//    @HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)  //1.5秒钟以内就是正常的业务逻辑</span></span><br><span class="line"><span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        String result = paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//兜底方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是消费者80，对付支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,(┬＿┬)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面是全局fallback方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息，请稍后再试,(┬＿┬)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     和业务逻辑混一起？？？混乱</p><p>·     服务降级，客户端去调用服务端，碰上服务端宕机或关闭</p><p>·     本次案例服务降级处理是在客户端80实现完成的，与服务端8001没有关系，只需要为Feign客户端定义的接口添加一个服务降级处理的实现类即可实现解耦</p><p>·     未来我们要面对的异常</p><p>·     运行</p><p>·     超时</p><p>·     宕机</p><p>·     再看我们的业务类PaymentController</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627782424224.gif" alt="graphic"></p><p>·     修改cloud-consumer-feign-hystrix-order80</p><p>·     根据cloud-consumer-feign-hystrix-order80已经有的PaymentHystrixService接口，重新新建一个类（PaymentFallbackService）实现该接口，统一为接口里面的方法进行异常处理</p><p>·     PaymentFallbackService类实现PaymentFeignClientService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-paymentInfo_OK , (┬＿┬)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-paymentInfo_TimeOut , (┬＿┬)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·    YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#如果处理自身的容错就开启。开启方式与生产端不一样。</span></span><br></pre></td></tr></table></figure><p>·    PaymentFeignClientService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     单个eureka先启动7001</p><p>·      PaymentHystrixMain8001启动</p><p>·     正常访问测试</p><p>·     <a href="http://localhost/consumer/payment/hystrix/ok/31">http://localhost/consumer/payment/hystrix/ok/31</a></p><p>·     故意关闭微服务8001</p><p>·     客户端自己调用提升</p><p>·     此时服务端provider已经down了，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器</p><p>1.3.7.    服务熔断</p><p>·     断路器</p><p>·     一句话就是家里保险丝</p><p>·     熔断是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627782424224.gif" alt="graphic"></p><p>·     大神论文</p><p>·     <a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a></p><p>·     实操</p><p>·     修改cloud-provider-hystrix-payment8001</p><p>·     PaymentService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务熔断</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),  //是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),   //请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),  //时间范围</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;), //失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;*****id 不能负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;调用成功,流水号：&quot;</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍候再试,(┬＿┬)/~~     id: &quot;</span> +id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     why配置这些参数</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627782424224.gif" alt="graphic"></p><p>·     PaymentController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;*******result:&quot;</span>+result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     自测cloud-provider-hystrix-payment8001</p><p>·     正确</p><p>·     <a href="http://localhost:8001/payment/circuit/31">http://localhost:8001/payment/circuit/31</a></p><p>·     错误</p><p>·     <a href="http://localhost:8001/payment/circuit/-31">http://localhost:8001/payment/circuit/-31</a></p><p>·     一次正确一次错误trytry</p><p>·     重点测试</p><p>·     多次错误,然后慢慢正确，发现刚开始不满足条件，就算是正确的访问地址也不能进行访问，需要慢慢的恢复链路</p><p>·     原理（小总结）</p><p>·     大神结论</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034-1627782424224.gif" alt="graphic"></p><p>·     熔断类型</p><p>·     熔断打开</p><p>·     请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入熔断状态</p><p>·     熔断关闭</p><p>·     熔断关闭不会对服务进行熔断</p><p>·     熔断半开</p><p>·     部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p><p>·     官网断路器流程图</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036-1627782424224.gif" alt="graphic"></p><p>·     官网步骤</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038-1627782424224.gif" alt="graphic"></p><p>·     断路器在什么情况下开始起作用</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image040.gif" alt="graphic"></p><p>·     断路器开启或者关闭的条件</p><p>·     当满足一定阀值的时候（默认10秒内超过20个请求次数）</p><p>·     当失败率达到一定的时候（默认10秒内超过50%请求失败）</p><p>·     到达以上阀值，断路器将会开启</p><p>·     当开启的时候，所有请求都不会进行转发</p><p>·     一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。重复4和5</p><p>·     断路器打开之后</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image042.gif" alt="graphic"></p><p>·     All配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image044.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image046.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image048.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image050.gif" alt="graphic"></p><p>1.3.8.    服务限流</p><p>·     后面高级篇讲解alibaba的Sentinel说明</p><h2 id="1-4-hystrix工作流程"><a href="#1-4-hystrix工作流程" class="headerlink" title="1.4.    hystrix工作流程"></a>1.4.    hystrix工作流程</h2><p>1.4.1.    <a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p><p>1.4.2.    hystrix工作流程</p><p>·     官网图例</p><p>·     步骤说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image052.gif" alt="graphic"></p><h2 id="1-5-服务监控hystrixDashboard"><a href="#1-5-服务监控hystrixDashboard" class="headerlink" title="1.5.    服务监控hystrixDashboard"></a>1.5.    服务监控hystrixDashboard</h2><p>1.5.1.    概述</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image054.gif" alt="graphic"></p><p>1.5.2.    仪表盘9001</p><p>·     新建cloud-consumer-hystrix-dashboard9001</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增hystrix dashboard--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><p>·     HystrixDashboardMain9001+新注解@EnableHystrixDashboard</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     所有Provider微服务提供类（8001/8002/8003）都需要监控依赖配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     启动cloud-consumer-hystrix-dashboard9001该微服务后续将监控微服务8001</p><p>·     <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p>1.5.3.    断路器演示</p><p>·     修改cloud-provider-hystrix-payment8001</p><p>·     注意：新版本Hystrix需要在主启动类MainAppHystrix8001中指定监控路径</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     Unable to connect to Command Metric Stream</p><p>·     404</p><p>·     监控测试</p><p>·     启动1个eureka或者3个eureka集群均可</p><p>·     观察监控窗口</p><p>·     9001监控8001</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image056.gif" alt="graphic"></p><p>·     填写监控地址</p><p>·     <a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p><p>·     测试地址</p><p>·     <a href="http://localhost:8001/payment/circuit/31">http://localhost:8001/payment/circuit/31</a></p><p>·     <a href="http://localhost:8001/payment/circuit/-31">http://localhost:8001/payment/circuit/-31</a></p><p>·     上述测试通过</p><p>·     ok</p><p>·     先访问正确地址，再访问错误地址，再正确地址，会发现图示断路器都是慢慢放开的</p><p>·     监控结果，成功</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image058.gif" alt="graphic"></p><p>·     监控结果，失败</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image060.gif" alt="graphic"></p><p>·     如何看</p><p>·     7色</p><p>·     1圈</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image062.gif" alt="graphic"></p><p>·     1线</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image064.gif" alt="graphic"></p><p>·     整图说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image066.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image068.gif" alt="graphic"></p><p>·     整图说明2</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image070.gif" alt="graphic"></p><p>·     搞懂一个才能看懂复杂的</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image072.gif" alt="graphic"></p><h1 id="十一、zuul路由网关-没讲"><a href="#十一、zuul路由网关-没讲" class="headerlink" title="十一、zuul路由网关(没讲)"></a>十一、zuul路由网关(没讲)</h1><p>11.zuul路由网关（没讲）</p><h1 id="十二、Gateway新一代网关"><a href="#十二、Gateway新一代网关" class="headerlink" title="十二、Gateway新一代网关"></a>十二、Gateway新一代网关</h1><h2 id="1-1-概述简介"><a href="#1-1-概述简介" class="headerlink" title="1.1.    概述简介"></a>1.1.    概述简介</h2><p>1.1.1.    官网</p><p>·     上一代zuul 1.X</p><p>·     <a href="https://github.com/Netflix/zuul/wiki">https://github.com/Netflix/zuul/wiki</a></p><p>·     当前gateway</p><p>·     <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/</a></p><p>1.1.2.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783504931.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783504932.gif" alt="graphic"></p><p>·     概述</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783504932.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783504932.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783504932.gif" alt="graphic"></p><p>·     一句话</p><p>·     Spring Cloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架</p><p>·     源码架构</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783504932.gif" alt="graphic"></p><p>1.1.3.    能干嘛</p><p>·     反向代理</p><p>·     鉴权</p><p>·     流量控制</p><p>·     熔断</p><p>·     日志监控</p><p>·     。。。。。。</p><p>1.1.4.    微服务架构中网关在哪里</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783504932.gif" alt="graphic"></p><p>1.1.5.    有了Zuul了怎么又出来了gateway</p><p>·     我们为什么选择Gatway?</p><p>·     1.neflix不太靠谱，zuul2.0一直跳票,迟迟不发布</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783504932.gif" alt="graphic"></p><p>·     2.SpringCloud Gateway具有如下特性</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783504932.gif" alt="graphic"></p><p>·     3.SpringCloud Gateway与Zuul的区别</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783504932.gif" alt="graphic"></p><p>·     Zuul1.x模型</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783504932.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783504932.gif" alt="graphic"></p><p>·     GateWay模型</p><p>·     WebFlux是什么？</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627783504932.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627783504932.gif" alt="graphic"></p><p>·     说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627783504932.gif" alt="graphic"></p><h2 id="1-2-三大核心概念"><a href="#1-2-三大核心概念" class="headerlink" title="1.2.    三大核心概念"></a>1.2.    三大核心概念</h2><p>1.2.1.    Route(路由)</p><p>·     路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p><p>1.2.2.    Predicate（断言）</p><p>·     参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</p><p>1.2.3.    Filter(过滤)</p><p>·     指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p><p>1.2.4.    总体</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034-1627783504932.gif" alt="graphic"></p><h2 id="1-3-Gateway工作流程"><a href="#1-3-Gateway工作流程" class="headerlink" title="1.3.    Gateway工作流程"></a>1.3.    Gateway工作流程</h2><p>1.3.1.    官网总结</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036-1627783504932.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038-1627783504933.gif" alt="graphic"></p><p>1.3.2.    核心逻辑</p><p>·     路由转发+执行过滤器链</p><p>1.4.    入门配置</p><p>1.4.1.    新建Module</p><p>·     cloud-gateway-gateway9527</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>·     业务类</p><p>·     无</p><p>·     主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run( GateWayMain9527.class,args);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     9527网关如何做路由映射那？？？</p><p>·     cloud-provider-payment8001看看controller的访问地址</p><p>·     get</p><p>·     lb</p><p>·     我们目前不想暴露8001端口，希望在8001外面套一层9527</p><p>·     YML新增网关配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">      <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">      <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     启动7001</p><p>·     启动8001</p><p>·     cloud-provider-payment8001</p><p>·     启动9527网关</p><p>·     访问说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image040-1627783504933.gif" alt="graphic"></p><p>·     添加网关前</p><p>·     <a href="http://localhost:8001/payment/get/31">http://localhost:8001/payment/get/31</a></p><p>·     添加网关后</p><p>·     <a href="http://localhost:9527/payment/get/31">http://localhost:9527/payment/get/31</a></p><p>·     YML配置说明</p><p>·     Gateway网关路由有两种配置方式</p><p>·     在配置文件yml中配置</p><p>·     见前面步骤</p><p>·     代码中注入RouteLocator的Bean</p><p>·     官网案例</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image042-1627783504933.gif" alt="graphic"></p><p>·     百度国内新闻网址，需要外网</p><p>·     <a href="http://news.baidu.com/guoji">http://news.baidu.com/guoji</a></p><p>·     自己写一个</p><p>·     百度新闻</p><p>·     业务需求</p><p>·     通过9527网关访问到外网的百度新闻网址</p><p>·     编码</p><p>·     cloud-gateway-gateway9527</p><p>·     实现业务</p><p>·     config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span> </span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_rote_atguigu&quot;</span>, r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>).uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image044-1627783504933.gif" alt="graphic"></p><h2 id="1-5-通过微服务名实现动态路由"><a href="#1-5-通过微服务名实现动态路由" class="headerlink" title="1.5.    通过微服务名实现动态路由"></a>1.5.    通过微服务名实现动态路由</h2><p>1.5.1.    默认情况下Gateway会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p><p>1.5.2.    启动</p><p>·     一个eureka7001+两个服务提供者8001/8002</p><p>1.5.3.    POM</p><p>1.5.4.    YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     需要注意的是uri的协议为lb，表示启用Gateway的负载均衡功能。</p><p>·     lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri</p><p>1.5.5.    测试</p><p>·     <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p>·     8001/8002两个端口切换</p><h2 id="1-6-Predicate的使用"><a href="#1-6-Predicate的使用" class="headerlink" title="1.6.    Predicate的使用"></a>1.6.    Predicate的使用</h2><p>1.6.1.    是什么</p><p>·     启动我们的gatewat9527</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image046-1627783504933.gif" alt="graphic"></p><p>1.6.2.    Route Predicate Factories这个是什么东东？</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image048-1627783504933.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image050-1627783504933.gif" alt="graphic"></p><p>1.6.3.    常用的Route Predicate</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image052-1627783504934.gif" alt="graphic"></p><p>·     1.After Route Predicate</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image054-1627783504934.gif" alt="graphic"></p><p>​     ZonedDateTime zonedDateTime = ZonedDateTime.now();</p><p>​    System.out.println(zonedDateTime);</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image056-1627783504934.gif" alt="graphic"></p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">After=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>·     2.Before Route Predicate</p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">After=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Before=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>·     3.Between Route Predicate</p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Between=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]</span> <span class="string">,</span> <span class="number">2020-03-08T10:59:34.102+08:00</span>[<span class="string">Asia/Shanghai</span>]</span><br></pre></td></tr></table></figure><p>·     4. Cookie Route Predicate</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image058-1627783504934.gif" alt="graphic"></p><p>·     不带cookies访问</p><p>·     带上cookies访问</p><p>·     加入curl返回中文乱码</p><p><a href="https://blog.csdn.net/leedee/article/details/82685636">https://blog.csdn.net/leedee/article/details/82685636</a></p><p>·     YML</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Cookie=username,atguigu</span>   <span class="comment">#并且Cookie是username=zhangshuai才能访问</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image060-1627783504934.gif" alt="graphic"></p><p>·     5. Header Route Predicate</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image062-1627783504934.gif" alt="graphic"></p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span>   <span class="comment">#请求头中要有X-Request-Id属性并且值为整数的正则表达式</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image064-1627783504934.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image066-1627783504934.gif" alt="graphic"></p><p>·     6.Host Route Predicate</p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Host=**.atguigu.com</span></span><br></pre></td></tr></table></figure><p>·     7.Method Route Predicate</p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Method=GET</span></span><br></pre></td></tr></table></figure><p>·     8.Path Route Predicate</p><p>·     YML</p><p>·     9. Query Route Predicate</p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Query=username,</span> <span class="string">\d+</span> <span class="comment">#要有参数名称并且是正整数才能路由</span></span><br></pre></td></tr></table></figure><p>·     10.小总结</p><p>·     All</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line"> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="comment">#uri: http://localhost:8001   #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span>   <span class="comment">#断言,路径相匹配的进行路由</span></span><br><span class="line">            <span class="comment">#- After=2020-03-08T10:59:34.102+08:00[Asia/Shanghai]</span></span><br><span class="line">            <span class="comment">#- Cookie=username,zhangshuai #并且Cookie是username=zhangshuai才能访问</span></span><br><span class="line">            <span class="comment">#- Header=X-Request-Id, \d+ #请求头中要有X-Request-Id属性并且值为整数的正则表达式</span></span><br><span class="line">            <span class="comment">#- Host=**.atguigu.com</span></span><br><span class="line">            <span class="comment">#- Method=GET</span></span><br><span class="line">            <span class="comment">#- Query=username, \d+ #要有参数名称并且是正整数才能路由</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     说白了，Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理</p><h2 id="1-7-Filter的使用"><a href="#1-7-Filter的使用" class="headerlink" title="1.7.    Filter的使用"></a>1.7.    Filter的使用</h2><p>1.7.1.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image068-1627783504934.gif" alt="graphic"></p><p>1.7.2.    Spring Cloud Gateway的Filter</p><p>·     生命周期，Only Two</p><p>·     pre</p><p>·     在业务逻辑之前</p><p>·     post</p><p>·     在业务逻辑之后</p><p>·     种类，Only Two</p><p>·     GatewayFilter</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image070-1627783504934.gif" alt="graphic"></p><p>·     单一</p><p>·     GlobalFilter</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image072-1627783504934.gif" alt="graphic"></p><p>·     全局</p><p>1.7.3.    常用的GatewayFilter</p><p>·     AddRequestParameter</p><p>·     YML</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image074.gif" alt="graphic"></p><p>·     省略</p><p>1.7.4.    自定义过滤器</p><p>·     自定义全局GlobalFilter</p><p>·     两个主要接口介绍</p><p>·     impiemerts  GlobalFilter ，Ordered</p><p>·     能干嘛</p><p>·     全局日志记录</p><p>·     统一网关鉴权</p><p>·     。。。。。。</p><p>·     案例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>,<span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;*********come in MyLogGateWayFilter: &quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(username))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****用户名为Null 非法用户,(┬＿┬)&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);<span class="comment">//给人家一个回应</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     启动</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image076.gif" alt="graphic"></p><p>·     正确</p><p>·     <a href="http://localhost:9527/payment/lb?uname=z3">http://localhost:9527/payment/lb?uname=z3</a></p><p>·     错误</p><h1 id="十三、SpringCloud-config分布式配置中心"><a href="#十三、SpringCloud-config分布式配置中心" class="headerlink" title="十三、SpringCloud config分布式配置中心"></a>十三、SpringCloud config分布式配置中心</h1><h2 id="1-1-概述-3"><a href="#1-1-概述-3" class="headerlink" title="1.1.    概述"></a>1.1.    概述</h2><p>1.1.1.    分布式系统面临的配置问题</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783515495.gif" alt="graphic"></p><p>1.1.2.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783515495.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783515495.gif" alt="graphic"></p><p>1.1.3.    能干嘛</p><p>·     集中管理配置文件</p><p>·     不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</p><p>·     运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</p><p>·     当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</p><p>·     将配置信息以REST接口的形式暴露</p><p>·     post、curl访问刷新均可….</p><p>1.1.4.    与Github整合配置</p><p>·     由于SpringCloud Config默认使用Git来存储配置文件（也有其它方式，比如支持svn和本地文件，但最推荐的还是Git，而且使用的是http/https访问的形式）</p><p>1.1.5.    官网</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783515495.gif" alt="graphic"></p><p>·     <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/</a></p><h2 id="1-2-Config服务端配置与测试"><a href="#1-2-Config服务端配置与测试" class="headerlink" title="1.2.    Config服务端配置与测试"></a>1.2.    Config服务端配置与测试</h2><p>1.2.1.    用你自己的账号在Github上新建一个名为sprincloud-config的新Repository</p><p>1.2.2.    由上一步获得刚新建的git地址</p><p>·     写你自己的仓库地址</p><p>1.2.3.    本地硬盘上新建git仓库并clone</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783515495.gif" alt="graphic"></p><p>·     本地地址：D:\44\SpringCloud2020</p><p>·     git命令</p><p>·     git clone xxx</p><p>1.2.4.    此时在本地D盘符下D:\44\SpringCloud2020\springcloud-config</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783515495.gif" alt="graphic"></p><p>·     表示多个环境的配置文件</p><p>·     保存格式必须为UTF-8</p><p>·     如果需要修改，此处模拟运维人员操作git和github</p><p>·     git add</p><p>·     git commit -m “init yml”</p><p>·     git push origin master</p><p>1.2.5.    新建Module模块cloud-config-center-3344它既为Cloud的配置中心模块cloudConfig Center</p><p>1.2.6.    POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2.7.    YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span>  <span class="string">填写你自己的github路径</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span>  <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2.8.    主启动类</p><p>·     ConfigCenterMain3344</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(ConfigCenterMain3344 .class,args);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     @EnableConfigServer</p><p>1.2.9.    windows下修改hosts文件，增加映射</p><p>·     127.0.0.1 config-3344.com</p><p>1.2.10.   测试通过Config微服务是否可以从Github上获取配置内容</p><p>·     启动微服务3344</p><p>·     <a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p>1.2.11.   配置读取规则</p><p>·     官网</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783515495.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783515495.gif" alt="graphic"></p><p>·     /{label}/{application}-{profile}.yml（最推荐使用这种方式）</p><p>·     master分支</p><p>·     <a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p>·     <a href="http://config-3344.com:3344/master/config-test.yml">http://config-3344.com:3344/master/config-test.yml</a></p><p>·     <a href="http://config-3344.com:3344/master/config-prod.yml">http://config-3344.com:3344/master/config-prod.yml</a></p><p>·     dev分支</p><p>·     <a href="http://config-3344.com:3344/dev/config-dev.yml">http://config-3344.com:3344/dev/config-dev.yml</a></p><p>·     <a href="http://config-3344.com:3344/dev/config-test.yml">http://config-3344.com:3344/dev/config-test.yml</a></p><p>·     <a href="http://config-3344.com:3344/dev/config-prod.yml">http://config-3344.com:3344/dev/config-prod.yml</a></p><p>·     /{application}-{profile}.yml</p><p>·     <a href="http://config-3344.com:3344/config-dev.yml">http://config-3344.com:3344/config-dev.yml</a></p><p>·     <a href="http://config-3344.com:3344/config-test.yml">http://config-3344.com:3344/config-test.yml</a></p><p>·     <a href="http://config-3344.com:3344/config-prod.yml">http://config-3344.com:3344/config-prod.yml</a></p><p>·     <a href="http://config-3344.com:3344/config-xxxx.yml(%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E9%85%8D%E7%BD%AE)">http://config-3344.com:3344/config-xxxx.yml(不存在的配置)</a></p><p>·     /{application}-{profile}[/{label}]</p><p>·     <a href="http://config-3344.com:3344/config/dev/master">http://config-3344.com:3344/config/dev/master</a></p><p>·     <a href="http://config-3344.com:3344/config/test/master">http://config-3344.com:3344/config/test/master</a></p><p>·     <a href="http://config-3344.com:3344/config/prod/master">http://config-3344.com:3344/config/prod/master</a></p><p>·     重要配置细节总结</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783515495.gif" alt="graphic"></p><p>1.2.12.   成功实现了用SpringCloud Config 通过GitHub获取配置信息</p><h2 id="1-3-Config客户端配置与测试"><a href="#1-3-Config客户端配置与测试" class="headerlink" title="1.3.    Config客户端配置与测试"></a>1.3.    Config客户端配置与测试</h2><p>1.3.1.    新建cloud-config-client-3355</p><p>1.3.2.    POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.3.    bootstap.yml</p><p>·     是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783515495.gif" alt="graphic"></p><p>·     内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783515495.gif" alt="graphic"></p><p>1.3.4.    修改config-dev.yml配置并提交到GitHub中，比如加个变量age或者版本号version</p><p>1.3.5.    主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run( ConfigClientMain3355.class,args);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     类ConfigClientMain3355</p><p>1.3.6.    业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.7.    测试</p><p>·     启动Config配置中心3344微服务并自测</p><p>·     <a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p>·     <a href="http://config-3344.com:3344/master/config-test.yml">http://config-3344.com:3344/master/config-test.yml</a></p><p>·     启动3355作为Client准备访问</p><p>·     <a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p>1.3.8.    成功实现了客户端3355访问SpringCloud Config3344通过GitHub获取配置信息</p><p>1.3.9.    问题随时而来，分布式配置的动态刷新</p><p>·     Linux运维修改GitHub上的配置文件内容做调整</p><p>·     刷新3344，发现ConfigServer配置中心立刻响应</p><p>·     刷新3355，发现ConfigServer客户端没有任何响应</p><p>·     3355没有变化除非自己重启或者重新加载</p><p>·     难道每次运维修改配置文件，客户端都需要重启？？噩梦</p><h2 id="1-4-Config客户端之动态刷新"><a href="#1-4-Config客户端之动态刷新" class="headerlink" title="1.4.    Config客户端之动态刷新"></a>1.4.    Config客户端之动态刷新</h2><p>1.4.1.    避免每次更新配置都要重启客户端微服务3355</p><p>1.4.2.    动态刷新</p><p>·     步骤</p><p>·     修改3355模块</p><p>·     POM引入actuator监控</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     修改YML，暴露监控端口</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     @RefreshScope业务类Controller修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     此时修改github—&gt; 3344 —&gt; 3355</p><p>·     <a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p>·     3355改变了没有？？？</p><p>·     没有改变，(┬＿┬)</p><p>·     How</p><p>·     需要运维人员发送Post请求刷新3355</p><p>·     必须是Post请求</p><p>·     curl -X POST “<a href="http://localhost:3355/actuator/refresh&quot;">http://localhost:3355/actuator/refresh&quot;</a></p><p>·     再次</p><p>·     <a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p>·     OK</p><p>·     成功实现了客户端3355刷新到最新配置内容</p><p>·     避免了服务的重启</p><p>1.4.3.    想想还有什么问题？</p><p>·     假如有多个微服务客户端3355/3366/3377。。。。</p><p>·     每个微服务都要执行一次post请求，手动刷新？</p><p>·     可否广播，一次通知，处处生效？</p><p>·     我们想大范围的自动刷新，求方法</p><h1 id="十四、SpringCloud-Bus消息总线"><a href="#十四、SpringCloud-Bus消息总线" class="headerlink" title="十四、SpringCloud Bus消息总线"></a>十四、SpringCloud Bus消息总线</h1><h2 id="1-1-概述-4"><a href="#1-1-概述-4" class="headerlink" title="1.1.    概述"></a>1.1.    概述</h2><p>1.1.1.    上一讲解的加深和扩充，一言以蔽之</p><p>·     分布式自动刷新配置功能</p><p>·     Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新</p><p>1.1.2.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783529698.gif" alt="graphic"></p><p>·     Bus支持两种消息代理：RabbitMQ和Kafka</p><p>1.1.3.    能干嘛</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783529698.gif" alt="graphic"></p><p>1.1.4.    为何被称为总线</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783529698.gif" alt="graphic"></p><h2 id="1-2-RabbitMQ环境配置"><a href="#1-2-RabbitMQ环境配置" class="headerlink" title="1.2.    RabbitMQ环境配置"></a>1.2.    RabbitMQ环境配置</h2><p>1.2.1.    安装Erlang，下载地址：</p><p>·     <a href="http://erlang.org/download/otp_win64_21.3.exe">http://erlang.org/download/otp_win64_21.3.exe</a></p><p>·     步骤</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783529698.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783529698.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783529698.gif" alt="graphic"></p><p>1.2.2.    安装RabbitMQ，下载地址</p><p>·     <a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe</a></p><p>·     步骤</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783529698.gif" alt="graphic"></p><p>1.2.3.    进入RabbitMQ安装目录下的sbin目录</p><p>·     如例我自己本机</p><p>·     D:\scmq\rabbitmq_server-3.7.14\sbin</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783529698.gif" alt="graphic"></p><p>1.2.4.    输入以下命令启动管理功能</p><p>·     rabbitmq-plugins enable rabbitmq_management</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783529698.gif" alt="graphic"></p><p>·     可视化插件</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783529698.gif" alt="graphic"></p><p>1.2.5.    访问地址查看是否安装成功</p><p>·     <a href="http://localhost:15672/">http://localhost:15672/</a></p><p>1.2.6.    输入账号密码并登录: guest guest</p><h2 id="1-3-SpringCloud-Bus动态刷新全局广播"><a href="#1-3-SpringCloud-Bus动态刷新全局广播" class="headerlink" title="1.3.    SpringCloud Bus动态刷新全局广播"></a>1.3.    SpringCloud Bus动态刷新全局广播</h2><p>1.3.1.    必须先具备良好的RabbitMQ环境先</p><p>1.3.2.    演示广播效果，增加复杂度，再以3355为模板再制作一个3366</p><p>·     新建</p><p>·     cloud-config-client-3366</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3366</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run( ConfigClientMain3366.class,args);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;serverPort:&quot;</span>+serverPort+<span class="string">&quot;\t\n\n configInfo: &quot;</span>+configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.3.3.    设计思想</p><p>·     1) 利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783529699.gif" alt="graphic"></p><p>​                                                               <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783529699.gif" alt="graphic"></p><p>·     2) 利用消息总线触发一个服务端ConfigServer的/bus/refresh端点,而刷新所有客户端的配置（更加推荐）</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627783529699.gif" alt="graphic"></p><p>​                                       <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783529699.gif" alt="graphic"></p><p>·     图二的架构显然更加合适，图一不适合的原因如下</p><p>·     打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新职责</p><p>·     破坏了微服务各节点的对等性</p><p>·     有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</p><p>1.3.4.    给cloud-config-center-3344配置中心服务端添加消息总线支持</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span>  <span class="string">https://github.com/hhf19906/springcloud-config.git</span>  <span class="comment">#git@github.com:hhf19906/springcloud-config.git</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span>  <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.5.    给cloud-config-center-3355客户端添加消息总线支持</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.6.    给cloud-config-center-3366客户端添加消息总线支持</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span>  <span class="string">https://github.com/hhf19906/springcloud-config.git</span>  <span class="comment">#git@github.com:hhf19906/springcloud-config.git</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span>  <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><p>1.3.7.    测试</p><p>·     运维工程师</p><p>·     修改Github上配置文件增加版本号</p><p>·     发送Post请求</p><p>·     curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh&quot;">http://localhost:3344/actuator/bus-refresh&quot;</a></p><p>·     一次发送，处处生效</p><p>·     配置中心</p><p>·     <a href="http://config-3344.com/config-dev.yml">http://config-3344.com/config-dev.yml</a></p><p>·     客户端</p><p>·     <a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p>·     <a href="http://localhost:3366/configInfo">http://localhost:3366/configInfo</a></p><p>·     获取配置信息，发现都已经刷新了</p><p>1.3.8.    一次修改，广播通知，处处生效</p><h2 id="1-4-SpringCloud-Bus动态刷新定点通知"><a href="#1-4-SpringCloud-Bus动态刷新定点通知" class="headerlink" title="1.4.    SpringCloud Bus动态刷新定点通知"></a>1.4.    SpringCloud Bus动态刷新定点通知</h2><p>1.4.1.    不想全部通知，只想定点通知</p><p>·     只通知3355</p><p>·     不通知3366</p><p>1.4.2.    简单一句话</p><p>·     指定具体某一个实例生效而不是全部</p><p>·     公式：<a href="http://localhost:配置中心的端口号/actuator/bus-refresh/{destination}">http://localhost:配置中心的端口号/actuator/bus-refresh/{destination}</a></p><p>·     /bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例</p><p>1.4.3.    案例</p><p>·     我们这里以刷新运行在3355端口上的config-client为例</p><p>·     只通知3355</p><p>·     不通知3366</p><p>·     curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;">http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627783529699.gif" alt="graphic"></p><p>1.4.4.    通知总结All</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627783529699.gif" alt="graphic"></p><h1 id="十五、SpringCloud-Stream-消息驱动"><a href="#十五、SpringCloud-Stream-消息驱动" class="headerlink" title="十五、SpringCloud Stream 消息驱动"></a>十五、SpringCloud Stream 消息驱动</h1><h2 id="1-1-消息驱动概述"><a href="#1-1-消息驱动概述" class="headerlink" title="1.1.    消息驱动概述"></a>1.1.    消息驱动概述</h2><p>1.1.1.    是什么</p><p>·     一句话</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783540120.gif" alt="graphic"></p><p>·     屏蔽底层消息中间件的差异，降低切换版本，统一消息的编程模型</p><p>·     官网</p><p>·     <a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783540121.gif" alt="graphic"></p><p>·     <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.1.RELEASE/reference/html/</a></p><p>·     Spring Cloud Stream中文指导手册</p><p>·     <a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p><p>1.1.2.    设计思想</p><p>·     标准MQ</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783540121.gif" alt="graphic"></p><p>·     生产者/消费者之间靠消息媒介传递信息内容</p><p>·     Message</p><p>·     消息必须走特定的通道</p><p>·     消息通道MessageChannel</p><p>·     消息通道里的消息如何被消费呢，谁负责收发处理</p><p>·     消息通道MessageChannel的子接口SubscribableChannel,由MessageHandler消息处理器订阅</p><p>·     为什么用Cloud Stream</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783540121.gif" alt="graphic"></p><p>·     stream凭什么可以统一底层差异</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783540121.gif" alt="graphic"></p><p>·     Binder</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022.jpg" alt="graphic">     </p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783540121.gif" alt="graphic"></p><p>·     INPUT对应于消费者</p><p>·     OUTPUT对应于生产者</p><p>·     Stream中的消息通信方式遵循了发布-订阅模式</p><p>·     Topic主题进行广播</p><p>·     在RabbitMQ就是Exchange</p><p>·     在kafka中就是Topic</p><p>1.1.3.    Spring Cloud Stream标准流程套路</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627783540121.gif" alt="graphic"></p><p>·     Binder</p><p>·     很方便的连接中间件，屏蔽差异</p><p>·     Channel</p><p>·     通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置</p><p>·     Source和Sink</p><p>·     简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</p><p>1.1.4.    编码API和常用注解</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627783540121.gif" alt="graphic"></p><h2 id="1-2-案例说明"><a href="#1-2-案例说明" class="headerlink" title="1.2.    案例说明"></a>1.2.    案例说明</h2><p>1.2.1.    RabbitMQ环境已经OK</p><p>1.2.2.    工程中新建三个子模块</p><p>·     cloud-stream-rabbitmq-provider8801,作为生产者进行发消息模块</p><p>·     cloud-stream-rabbitmq-consumer8802,作为消息接收模块</p><p>·     cloud-stream-rabbitmq-consumer8803,作为消息接收模块</p><h2 id="1-3-消息驱动之生产者"><a href="#1-3-消息驱动之生产者" class="headerlink" title="1.3.    消息驱动之生产者"></a>1.3.    消息驱动之生产者</h2><p>1.3.1.    新建Module</p><p>·     cloud-stream-rabbitmq-provider8801</p><p>1.3.2.    POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.3.    YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span>  <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><p>1.3.4.    主启动类StreamMQMain8801</p><p>1.3.5.    业务类</p><p>·     发送消息接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     发送消息接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Source;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span> <span class="comment">//定义消息的推送管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">// 消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;*****serial: &quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.6.    测试</p><p>·     启动7001eureka</p><p>·     启动rabbitmq</p><p>·     rabbitmq-plugins enable rabbitmq_management</p><p>·     <a href="http://localhost:15672/">http://localhost:15672/</a></p><p>·     启动8801</p><p>·     访问</p><p>·     <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p><h2 id="1-4-消息驱动之消费者"><a href="#1-4-消息驱动之消费者" class="headerlink" title="1.4.    消息驱动之消费者"></a>1.4.    消息驱动之消费者</h2><p>1.4.1.    新建Module</p><p>·     cloud-stream-rabbitmq-consumer8802</p><p>1.4.2.    POM</p><p>1.4.3.    YML</p><p>1.4.4.    主启动类StreamMQMain8802</p><p>1.4.5.    业务类</p><p>1.4.6.    测试8801发送8802接收消息</p><p>·     <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p><h2 id="1-5-分组消费与持久化"><a href="#1-5-分组消费与持久化" class="headerlink" title="1.5.    分组消费与持久化"></a>1.5.    分组消费与持久化</h2><p>1.5.1.    依照8802，clone出来一份运行8803</p><p>·     cloud-stream-rabbitmq-consumer8803</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8803<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--基础配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8803</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">      <span class="attr">stream:</span></span><br><span class="line">        <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">          <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">            <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">              <span class="attr">spring:</span></span><br><span class="line">                <span class="attr">rabbitmq:</span></span><br><span class="line">                  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">                  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                  <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                  <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">        <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">          <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">            <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">            <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">            <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">atguiguA</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8803.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><p>·     主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8803</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8803.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListenerController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者2号,-----&gt;接受到的消息: &quot;</span>+message.getPayload()+<span class="string">&quot;\t  port: &quot;</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.5.2.    启动</p><p>·     RabbitMQ</p><p>·     7001</p><p>·     服务注册</p><p>·     8801</p><p>·     消息生产</p><p>·     8802</p><p>·     消息消费</p><p>·     8803</p><p>·     消息消费</p><p>1.5.3.    运行后两个问题</p><p>·     有重复消费问题</p><p>·     消息持久化问题</p><p>1.5.4.    消费</p><p>·     目前是8802/8803同时都收到了，存在重复消费问题</p><p>·     <a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p><p>·     如何解决</p><p>·     分组和持久化属性group</p><p>·     重要</p><p>·     生产实际案例</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034-1627783540121.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036-1627783540121.gif" alt="graphic"></p><p>1.5.5.    分组</p><p>·     原理</p><p>·     微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费。</p><p>·     8802/8803都变成不同组，group两个不同</p><p>·     group: atguiguA、atguiguB</p><p>·     8802修改YML</p><p>group:  atguiguA</p><p>·     8803修改YML</p><p>group:  atguiguB</p><p>·     我们自己配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038-1627783540121.gif" alt="graphic"></p><p>·     结论</p><p>·     还是重复消费</p><p>·     8802/8803实现了轮询分组，每次只有一个消费者 8801模块的发的消息只能被8802或8803其中一个接收到，这样避免了重复消费</p><p>·     8802/8803都变成相同组，group两个相同</p><p>·     group: atguiguA</p><p>·     8802修改YML</p><p>group:  atguiguA</p><p>·     8803修改YML</p><p>group:  atguiguA</p><p>·     结论</p><p>·     同一个组的多个微服务实例，每次只会有一个拿到</p><p>1.5.6.    持久化</p><p>·     通过上述，解决了重复消费问题，再看看持久化</p><p>·     停止8802/8803并去除掉8802的分组group:atguiguA</p><p>·     8803的分组group:atguiguA没有去掉</p><p>·     8801先发送4条信息到rabbitmq</p><p>·     先启动8802，无分组属性配置，后台没有打出来消息</p><p>·     先启动8803，有分组属性配置，后台打出来了MQ上的消息</p><h1 id="十六、SpringCloud-Sleuth-分布式请求链路追踪"><a href="#十六、SpringCloud-Sleuth-分布式请求链路追踪" class="headerlink" title="十六、SpringCloud Sleuth 分布式请求链路追踪"></a>十六、SpringCloud Sleuth 分布式请求链路追踪</h1><h2 id="1-1-概述-5"><a href="#1-1-概述-5" class="headerlink" title="1.1.    概述"></a>1.1.    概述</h2><p>1.1.1.    为什么会出现这个技术？需要解决哪些问题？</p><p>·     问题</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004.jpg" alt="graphic"></p><p>​                          <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783550282.gif" alt="graphic"></p><p>1.1.2.    是什么</p><p>·     <a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth</a></p><p>·     Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案</p><p>·     在分布式系统中提供追踪解决方案并且兼容支持了zipkin</p><p>1.1.3.    解决</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783550282.gif" alt="graphic"></p><h2 id="1-2-搭建链路监控步骤"><a href="#1-2-搭建链路监控步骤" class="headerlink" title="1.2.    搭建链路监控步骤"></a>1.2.    搭建链路监控步骤</h2><p>1.2.1.    1.zipkin</p><p>·     下载</p><p>·     SpringCloud从F版起已不需要自己构建Zipkin server了，只需要调用jar包即可</p><p>·     <a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><p>·     zipkin-server-2.12.9.exec.jar</p><p>·     运行jar</p><p>java -jar zipkin-server-2.12.9-exec.jar</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783550282.gif" alt="graphic"></p><p>·     运行控制台</p><p>·     <a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></p><p>·     术语</p><p>·     完整的调用链路</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783550282.gif" alt="graphic"></p><p>·     上图what</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783550282.gif" alt="graphic"></p><p>·     名词解释</p><p>·     Trace:类似于树结构的Span集合，表示一条调用链路，存在唯一标识</p><p>·     span:表示调用链路来源，通俗的理解span就是一次请求信息</p><p>1.2.2.    2.服务提供者</p><p>·     cloud-provider-payment8001</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span></span><br><span class="line">    <span class="attr">url:</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>  <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类PaymentController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果：&quot;</span>+result);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;插入数据库成功,serverPort: &quot;</span>+serverPort,result);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入数据库失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(payment != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;查询成功,serverPort:  &quot;</span>+serverPort,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;没有对应记录,查询ID: &quot;</span>+id,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****element: &quot;</span>+element);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/lb&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverPort;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑处理正确，但是需要耗费3秒钟</span></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        <span class="keyword">return</span> serverPort;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi ,i&#x27;am paymentzipkin server fall back，welcome to atguigu，O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2.3.    3.服务消费者（调用方）</p><p>·     cloud-consumer-order80</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line">    <span class="attr">zipkin:</span></span><br><span class="line">      <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">    <span class="attr">sleuth:</span></span><br><span class="line">      <span class="attr">sampler:</span></span><br><span class="line">        <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="comment"># 集群</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span>  <span class="comment"># 集群版</span></span><br></pre></td></tr></table></figure><p>·     业务类PaymentController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ====================&gt; zipkin+sleuth</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       String result = restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span>+<span class="string">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2.4.    4.依次启动eureka7001/8001/80</p><p>·     80调用8001几次测试下</p><p>1.2.5.    5.打开浏览器访问:http:localhost:9411</p><p>·     会出现以下界面</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016.jpg" alt="graphic"></p><p>·     查看</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018.jpg" alt="graphic"></p><p>·     查看依赖关系</p><p>·     原理</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020.jpg" alt="graphic"></p><h1 id="十七、SpringCloud-Alibaba入门简介"><a href="#十七、SpringCloud-Alibaba入门简介" class="headerlink" title="十七、SpringCloud Alibaba入门简介"></a>十七、SpringCloud Alibaba入门简介</h1><h2 id="1-1-why会出现SpringCloud-alibaba"><a href="#1-1-why会出现SpringCloud-alibaba" class="headerlink" title="1.1.    why会出现SpringCloud alibaba"></a>1.1.    why会出现SpringCloud alibaba</h2><p>1.1.1.    Spring Cloud Netflix项目进入维护模式</p><p>·     <a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now">https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783560343.gif" alt="graphic"></p><p>·     说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783560343.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008.jpg" alt="graphic"></p><p>1.1.2.    SpringCloud NetFlix Projects Entering Maintenance Mode</p><p>·     什么是维护模式</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783560344.gif" alt="graphic"></p><p>·     进入维护模式意味着什么呢？</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783560344.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783560344.gif" alt="graphic"></p><h2 id="1-2-SpringCloud-alibaba带来了什么？"><a href="#1-2-SpringCloud-alibaba带来了什么？" class="headerlink" title="1.2.    SpringCloud alibaba带来了什么？"></a>1.2.    SpringCloud alibaba带来了什么？</h2><p>1.2.1.    是什么</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783560344.gif" alt="graphic"></p><p>1.2.2.    能干嘛</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783560344.gif" alt="graphic"></p><p>1.2.3.    去哪下</p><p>·     <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><p>1.2.4.    怎么玩</p><p>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p>Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p><p>RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p><p>Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p><p>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p><p>Alibaba Cloud ACM：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</p><p>Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><p>Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p><p>Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h2 id="1-3-SpringCloud-alibaba学习资料获取"><a href="#1-3-SpringCloud-alibaba学习资料获取" class="headerlink" title="1.3.    SpringCloud alibaba学习资料获取"></a>1.3.    SpringCloud alibaba学习资料获取</h2><p>1.3.1.    官网</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783560344.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783560344.gif" alt="graphic"></p><p>·     <a href="https://spring.io/projects/spring-cloud-alibaba#overview">https://spring.io/projects/spring-cloud-alibaba#overview</a></p><p>1.3.2.    英文</p><p>·     <a href="https://github.com/alibaba/spring-cloud-alibaba">https://github.com/alibaba/spring-cloud-alibaba</a></p><p>·     <a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p><p>1.3.3.    中文</p><p>·     <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p><h1 id="十八、SpringCloud-Alibaba-Nacos-服务注册和配置中心"><a href="#十八、SpringCloud-Alibaba-Nacos-服务注册和配置中心" class="headerlink" title="十八、SpringCloud Alibaba Nacos 服务注册和配置中心"></a>十八、SpringCloud Alibaba Nacos 服务注册和配置中心</h1><h2 id="1-1-Nacos简介"><a href="#1-1-Nacos简介" class="headerlink" title="1.1.    Nacos简介"></a>1.1.    Nacos简介</h2><p>1.1.1.    为什么叫Nacos</p><p>·     前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service</p><p>1.1.2.    是什么</p><p>·     一个更易于构建云原生应用的动态服务发现，配置管理和服务管理中心</p><p>·     Nacos：Dynamic Naming and Configuration Service</p><p>·     Nacos就是注册中心+配置中心的组合</p><p>·     等价于</p><p>·     Nacos = Eureka+Config+Bus</p><p>1.1.3.    能干嘛</p><p>·     替代Eureka做服务注册中心</p><p>·     替代Config做服务配置中心</p><p>1.1.4.    去哪下</p><p>·     <a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p><p>·     官网文档</p><p>·     <a href="https://nacos.io/zh-cn/index.html">https://nacos.io/zh-cn/index.html</a></p><p>·     <a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_nacos_discovery</a></p><p>1.1.5.    各种注册中心比较</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783572567.gif" alt="graphic"></p><h2 id="1-2-安装并运行Nacos"><a href="#1-2-安装并运行Nacos" class="headerlink" title="1.2.    安装并运行Nacos"></a>1.2.    安装并运行Nacos</h2><p>1.2.1.    本地Java8+Maven环境已经OK</p><p>1.2.2.    先从官网下载Nacos</p><p>·     <a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p><p>1.2.3.    解压安装包，直接运行bin目录下的startup.cmd</p><p>1.2.4.    命令运行成功后直接访问<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p><p>·     默认账号密码都是nacos</p><p>1.2.5.    结果页面</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783572567.gif" alt="graphic"></p><h2 id="1-3-Nacos作为服务注册中心演示"><a href="#1-3-Nacos作为服务注册中心演示" class="headerlink" title="1.3.    Nacos作为服务注册中心演示"></a>1.3.    Nacos作为服务注册中心演示</h2><p>1.3.1.    官网文档</p><p>1.3.2.    基于Nacos的服务提供者</p><p>·     新建Module</p><p>·     cloudalibaba-provider-payment9001</p><p>·     POM</p><p>·     父POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     本模块POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverPort: &quot;</span>+ serverPort+<span class="string">&quot;\t id&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     <a href="http://lcoalhost:9001/payment/nacos/1">http://lcoalhost:9001/payment/nacos/1</a></p><p>·     nacos控制台</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783572567.gif" alt="graphic"></p><p>·     nacos服务注册中心+服务提供者9001都ok了</p><p>·     为了下一章节演示nacos的负载均衡，参照9001新建9002</p><p>·     新建cloudalibaba-provider-payment9002</p><p>·     9002其他步骤你懂的</p><p>·     或者取巧不想新建重复体力劳动，直接拷贝虚拟端口映射</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783572567.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783572567.gif" alt="graphic"></p><p>1.3.3.    基于Nacos的服务消费者</p><p>·     新建Module</p><p>·     cloudalibaba-consumer-nacos-order83</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     为什么nacos支持负载均衡</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783572567.gif" alt="graphic"></p><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>·     业务类</p><p>·     ApplicationContextBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     OrderNacosController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     测试</p><p>·     nacos控制台</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783572567.gif" alt="graphic"></p><p>·     <a href="http://localhost:83/consumer/payment/nacos/13">http://localhost:83/consumer/payment/nacos/13</a></p><p>·     83访问9001/9002，轮询负载OK</p><p>1.3.4.    服务注册中心对比</p><p>·     各种注册中心对比</p><p>·     Nacos全景图所示</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783572567.jpg" alt="graphic"></p><p>·     Nacos和CAP</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783572568.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783572568.gif" alt="graphic"></p><p>·     切换</p><p>·     Nacos支持AP和CP模式的切换</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783572568.gif" alt="graphic"></p><h2 id="1-4-Nacos作为服务配置中心演示"><a href="#1-4-Nacos作为服务配置中心演示" class="headerlink" title="1.4.    Nacos作为服务配置中心演示"></a>1.4.    Nacos作为服务配置中心演示</h2><p>1.4.1.    Nacos作为配置中心-基础配置</p><p>·     cloudalibaba-config-nacos-client3377</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一般基础配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><p>·     why配置两个</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783572568.gif" alt="graphic"></p><p>·     YML</p><p>·     bootstrap</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     application</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">   <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     ConfigClientController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     @RefreshScope</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/image-20210801105929699.png" alt="image-20210801105929699"></p><p>·     在Nacos中添加配置信息</p><p>·     Nacos中的匹配规则</p><p>·     理论</p><p>·     Nacos中的dataid的组成格式与SpringBoot配置文件中的匹配规则</p><p>·     官网</p><p> <a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627783572568.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627783572568.gif" alt="graphic"></p><p>·     实操</p><p>·     配置新增</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627783572568.gif" alt="graphic"></p><p>nacos-config-client-dev</p><p>·     Nacos界面配置对应</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config:</span><br><span class="line">    info: nacos config center,version = 1</span><br><span class="line">from nacos config center, nacos-config-client-dev.yaml, version=1</span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034-1627783572568.gif" alt="graphic"></p><p>·     设置DataId</p><p>·     公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure><p>·     prefix默认为spring.application.name的值</p><p>·     spring.profile.active既为当前环境对应的profile,可以通过配置项spring.profile.active 来配置</p><p>·     file-exetension为配置内容的数据格式，可以通过配置项spring.cloud.nacos.config.file-extension配置</p><p>·     小总结说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036-1627783572568.gif" alt="graphic"></p><p>·     历史配置</p><p>·     测试</p><p>·     启动前需要在nacos客户端-配置管理-配置管理栏目下有没有对应的yaml配置文件</p><p>·     运行cloud-config-nacos-client3377的主启动类</p><p>·     调用接口查看配置信息</p><p>·     <a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p>·     自带动态刷新</p><p>·     修改下Nacos中的yaml配置文件，再次调用查看配置的接口，就会发现配置已经刷新</p><p>1.4.2.    Nacos作为配置中心-分类配置</p><p>·     问题</p><p>·     多环境多项目管理</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038-1627783572568.gif" alt="graphic"></p><p>·     Nacos的图形化管理界面</p><p>·     配置管理</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image040-1627783572568.gif" alt="graphic"></p><p>·     命名空间</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image042-1627783572568.gif" alt="graphic"></p><p>·     Namespace+Group+Data ID三者关系？为什么这么设计？</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image044-1627783572568.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image046-1627783572568.gif" alt="graphic"></p><p>·     Case</p><p>·     DataID方案</p><p>·     指定spring.profile.active和配置文件的DataID来使不同环境下读取不同的配置</p><p>·     默认空间+默认分组+新建dev和test两个DataID</p><p>·     新建dev配置DataID</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image048-1627783572568.gif" alt="graphic"></p><p>·     新建test配置DataID</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image050-1627783572568.gif" alt="graphic"></p><p>·     通过spring.profile.active属性就能进行多环境下配置文件的读取</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image052-1627783572568.gif" alt="graphic"></p><p>·     测试</p><p>·     <a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p>·     配置是什么就加载什么</p><p>·     test</p><p>·     Group方案</p><p>·     通过Group实现环境区分</p><p>·     新建Group</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image054-1627783572568.gif" alt="graphic"></p><p>·     在nacos图形界面控制台上面新建配置文件DataID</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image056-1627783572569.gif" alt="graphic"></p><p>·     bootstrap+application</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image058-1627783572569.gif" alt="graphic"></p><p>·     在config下增加一条group的配置即可。可配置为DEV_GROUP或TEST_GROUP</p><p>·     Namespace方案</p><p>·     新建dev/test的Namespace</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image060-1627783572569.gif" alt="graphic"></p><p>·     回到服务管理-服务列表查看</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image062-1627783572569.gif" alt="graphic"></p><p>·     按照域名配置填写</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image064-1627783572569.gif" alt="graphic"></p><p>·     YML</p><p>·     bootstrap</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">namespace:</span> </span><br></pre></td></tr></table></figure><p>·     application</p><p>1.5.    Nacos集群和持久化配置（重要）</p><p>1.5.1.    官网说明</p><p>·     <a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><p>·     官网架构图（写的(┬＿┬)）</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image066.jpg" alt="graphic"></p><p>·     上图官网翻译，真实情况</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image068-1627783572569.gif" alt="graphic"></p><p>​        <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image070-1627783572569.gif" alt="graphic"></p><p>·     说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image072-1627783572569.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image074-1627783572569.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image076-1627783572569.gif" alt="graphic"></p><p>·     按照上述，我们需要mysql数据库</p><p>·     官网说明</p><p>·     <a href="https://nacos.io/zh-cn/docs/deployment.html">https://nacos.io/zh-cn/docs/deployment.html</a></p><p>·     重点说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image078.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image080.gif" alt="graphic"></p><p>1.5.2.    Nacos持久化配置解释</p><p>·     Nacos默认自带的是嵌入式数据库derby</p><p>·     <a href="https://github.com/alibaba/nacos/blob/develop/config/pom.xml">https://github.com/alibaba/nacos/blob/develop/config/pom.xml</a></p><p>·     derby到mysql切换配置步骤</p><p>·     nacos-server-1.1.4\nacos\conf目录下找到sql脚本</p><p>·     nacos-mysql.sql</p><p>·     执行脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nacos_config;</span><br><span class="line">USE nacos_config;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    enabled <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> roles (</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    role <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     nacos-server-1.1.4\nacos\conf目录下找到application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">nacos_devtest</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">youdontknow</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     启动nacos，可以看到是个全新的空记录界面，以前是记录进derby</p><p>1.5.3.    Linux版Nacos+MySQL生产环境配置</p><p>·     预计需要，1个nginx+3个nacos注册中心+1个mysql</p><p>·     Nacos下载linux版本</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image082.gif" alt="graphic"></p><p>·     <a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p><p>·     nacos-server-1.1.4.tar.gz</p><p>·     解压后安装</p><p>·     集群配置步骤（重点）</p><p>·     1.Linux服务器上mysql数据库配置</p><p>·     SQL脚本在哪里</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image084.gif" alt="graphic"></p><p>·     sql语句源文件</p><p>·     nacos-mysql.sql</p><p>·     自己Linux机器上的Mysql数据库黏贴</p><p>·     执行后结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image086.gif" alt="graphic"></p><p>·     2.application.properties配置</p><p>·     位置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image088.gif" alt="graphic"></p><p>·     内容</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://1.7.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">HF_mysql_654321</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image090.gif" alt="graphic"></p><p>·     3.Linux服务器上nacos的集群配置cluster.conf</p><p>·     梳理出3台nacos机器的不同服务端口号</p><p>·     复制出cluster.conf</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image092.gif" alt="graphic"></p><p>·     内容</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image094.gif" alt="graphic"></p><p>·     这个IP不能写127.0.0.1,必须是Linux命令hostname -i能够识别的IP</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image096.gif" alt="graphic"></p><p>·     4.编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端</p><p>·     /mynacos/nacos/bin目录下有startup.sh</p><p>·     在什么地方，修改什么，怎么修改</p><p>·     思考</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image098.gif" alt="graphic"></p><p>·     修改内容</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image100.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image102.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image104.gif" alt="graphic"></p><p>·     执行方式</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image106.gif" alt="graphic"></p><p>·     5.Nginx的配置，由它作为负载均衡器</p><p>·     修改nginx的配置文件</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image108.gif" alt="graphic"></p><p>·     nginx.conf</p><table><thead><tr><th>upstream cluster{                                    server  127.0.0.1:3333;    server  127.0.0.1:4444;    server  127.0.0.1:5555;  }</th><th>server{                   listen 1111;    server_name  localhost;    location /{       proxy_pass  <a href="http://cluster/">http://cluster</a>;                                  }  ….省略</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image110.gif" alt="graphic"></p><p>·     按照指定启动</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image112.gif" alt="graphic"></p><p>·     6.截止到此处，1个Nginx+3个nacos注册中心+1个mysql</p><p>·     测试通过nginx访问nacos</p><p>·     https://写你自己虚拟机的ip:1111/nacos/#/login</p><p>·     新建一个配置测试</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image114.gif" alt="graphic"></p><p>·     linux服务器的mysql插入一条记录</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image116.gif" alt="graphic"></p><p>·     测试</p><p>·     微服务cloudalibaba-provider-payment9002启动注册进nacos集群</p><p>·     yml</p><p>server-addr: 写你自己的虚拟机ip:1111</p><p>·     结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image118.jpg" alt="graphic"></p><p>·     高可用小总结</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image120.gif" alt="graphic"></p><h1 id="十九、SpringCloud-Alibaba-Sentinel"><a href="#十九、SpringCloud-Alibaba-Sentinel" class="headerlink" title="十九、SpringCloud Alibaba Sentinel"></a>十九、SpringCloud Alibaba Sentinel</h1><h2 id="1-1-Sentinel"><a href="#1-1-Sentinel" class="headerlink" title="1.1.    Sentinel"></a>1.1.    Sentinel</h2><p>1.1.1.    官网</p><p>·     <a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p><p>·     中文</p><p>·     <a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><p>1.1.2.    是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783588808.gif" alt="graphic"></p><p>·     一句话解释，之前我们讲解过的Hystrix</p><p>1.1.3.    去哪下</p><p>·     <a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783588808.gif" alt="graphic"></p><p>1.1.4.    能干嘛</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783588808.gif" alt="graphic"></p><p>1.1.5.    怎么玩</p><p>·     <a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_spring_cloud_alibaba_sentinel</a></p><p>·     服务使用中的各种问题</p><p>·     服务雪崩</p><p>·     服务降级</p><p>·     服务熔断</p><p>·     服务限流</p><h2 id="1-2-安装Sentinel控制台"><a href="#1-2-安装Sentinel控制台" class="headerlink" title="1.2.    安装Sentinel控制台"></a>1.2.    安装Sentinel控制台</h2><p>1.2.1.    sentinel组件由2部分组成</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783588808.gif" alt="graphic"></p><p>·     后台</p><p>·     前台8080</p><p>1.2.2.    安装步骤</p><p>·     下载</p><p>·     <a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783588808.gif" alt="graphic"></p><p>·     下载到本地sentinel-dashboard-1.7.0.jar</p><p>·     运行命令</p><p>·     前提</p><p>·     java8环境OK</p><p>·     8080端口不能被占用</p><p>·     命令</p><p>·     java -jar sentinel-dashboard-1.7.0.jar</p><p>·     访问sentinel管理界面</p><p>·     <a href="http://localhost:8080/">http://localhost:8080</a></p><p>·     登录账号密码均为sentinel</p><h2 id="1-3-初始化演示工程"><a href="#1-3-初始化演示工程" class="headerlink" title="1.3.    初始化演示工程"></a>1.3.    初始化演示工程</h2><p>1.3.1.    启动Nacos8848成功</p><p>·     <a href="http://localhost:8848/nacos/#/login">http://localhost:8848/nacos/#/login</a></p><p>1.3.2.    Module</p><p>·     cloudalibaba-sentinel-service8401</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-sentinel-service8401<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span>  <span class="comment">#默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类FlowLimitController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.3.    启动Sentinel8080</p><p>·     java -jar sentinel-dashboard-1.7.0</p><p>1.3.4.    启动微服务8401</p><p>1.3.5.    启动8401微服务后查看sentienl控制台</p><p>·     空空如也，啥都没有</p><p>·     Sentinel采用的懒加载说明</p><p>·     执行一次访问即可</p><p>·     <a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p>·     <a href="http://localhost:8401/testB">http://localhost:8401/testB</a></p><p>·     效果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783588808.gif" alt="graphic"></p><p>·     结论</p><p>·     sentinel8080正在监控微服务8401</p><p>1.4.    流控规则</p><p>1.4.1.    基本介绍</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783588808.jpg" alt="graphic"></p><p>·     进一步解释说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783588808.jpg" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783588808.jpg" alt="graphic"></p><p>1.4.2.    流控模式</p><p>·     直接（默认）</p><p>·     直接-&gt;快速失败</p><p>·     系统默认</p><p>·     配置及说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783588808.gif" alt="graphic"></p><p>·     测试</p><p>·     快速点击访问<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p>·     结果</p><p>·     Blocked by Sentinel (flow limiting)</p><p>·     思考？？？</p><p>·     直接调用默认报错信息，技术方面OK but，是否应该有我们自己的后续处理？</p><p>·     类似有一个fallback的兜底方法？</p><p>·     关联</p><p>·     是什么？</p><p>·     当关联的资源达到阈值时，就限流自己</p><p>·     当与A关联的资源B达到阈值后，就限流自己</p><p>·     B惹事，A挂了</p><p>·     配置A</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783588808.gif" alt="graphic"></p><p>·     postman模拟并发密集访问testB</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783588808.gif" alt="graphic"></p><p>·     访问testB成功</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627783588808.gif" alt="graphic"></p><p>·     postman里新建多线程集合组</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627783588808.gif" alt="graphic"></p><p>·     将访问地址添加进新线程组</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627783588809.gif" alt="graphic"></p><p>·     Run</p><p>·     大批量线程高并发访问B，导致A失效了</p><p>·     运行后发现testA挂了</p><p>·     点击访问<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p>·     结果</p><p>·     Blocked by Sentinel (flow limiting)</p><p>·     链路</p><p>·     多个请求调用了同一个微服务</p><p>·     家庭作业试试</p><p>1.4.3.    流控效果</p><p>·     直接-&gt;快速失败（默认的流控处理）</p><p>·     直接失败，抛出异常</p><p>·     Blocked by Sentinel (flow limiting)</p><p>·     源码</p><p>·     com.alibaba.csp.sentinel.slots.block.flow.controller.DefaultController</p><p>·     预热</p><p>·     说明</p><p>·     公式：阈值除以coldFactor（默认值为3），经过预热时长后才会达到阈值</p><p>·     官网</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034-1627783588809.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036-1627783588809.gif" alt="graphic"></p><p>·     默认coldFactor为3，即请求QPS从threshold/3开始，经预热时长逐渐升至设定的QPS阈值。</p><p>·     限流 冷启动</p><p>·     <a href="https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8">https://github.com/alibaba/Sentinel/wiki/%E9%99%90%E6%B5%81---%E5%86%B7%E5%90%AF%E5%8A%A8</a></p><p>·     源码</p><p>·     com.alibaba.csp.sentinel.slots.block.flow.controller.WarmUpController</p><p>·     Warmup配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038-1627783588809.gif" alt="graphic"></p><p>·     多次点击<a href="http://localhost:8401/testB">http://localhost:8401/testB</a></p><p>·     刚开始不行，后续慢慢OK</p><p>·     应用场景</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image040-1627783588809.gif" alt="graphic"></p><p>·     排队等待</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image042-1627783588809.gif" alt="graphic"></p><p>·     匀速排队，阈值必须设置为QPS</p><p>·     官网</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image044-1627783588809.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image046-1627783588809.gif" alt="graphic"></p><p>·     源码</p><p>·     com.alibaba.csp.sentinel.slots.block.flow.controller.RateLimiterController</p><p>·     测试</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image048-1627783588809.gif" alt="graphic"></p><h2 id="1-5-降级规则"><a href="#1-5-降级规则" class="headerlink" title="1.5.    降级规则"></a>1.5.    降级规则</h2><p>1.5.1.    官网</p><p>1.5.2.    基本介绍</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image050-1627783588809.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image052-1627783588809.gif" alt="graphic"></p><p>·     进一步说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image054-1627783588809.gif" alt="graphic"></p><p>·     Sentinel的断路器是没有半开状态的</p><p>·     半开的状态系统自动去检测是否请求有异常，没有异常就关闭断路器恢复使用，有异常则继续打开断路器不可用。具体可以参考Hystrix</p><p>·     复习Hystrix</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image056-1627783588809.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image058-1627783588809.gif" alt="graphic"></p><p>1.5.3.    降级策略实战</p><p>·     RT</p><p>·     是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image060-1627783588809.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image062-1627783588809.gif" alt="graphic"></p><p>·     测试</p><p>·     代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">    log.info(<span class="string">&quot;testD 测试RT&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image064-1627783588809.gif" alt="graphic"></p><p>·     jmeter压测</p><p>·     结论</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image066-1627783588810.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image068-1627783588810.gif" alt="graphic"></p><p>·     异常比例</p><p>·     是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image070-1627783588810.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image072-1627783588810.gif" alt="graphic"></p><p>·     测试</p><p>·     代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;testD 测试RT&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testD&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>·     配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image074-1627783588810.gif" alt="graphic"></p><p>·     jmeter</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image076-1627783588810.gif" alt="graphic"></p><p>·     结论</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image078-1627783588810.gif" alt="graphic"></p><p>·     异常数</p><p>·     是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image080-1627783588810.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image082-1627783588810.gif" alt="graphic"></p><p>·     异常数是按照分钟统计的</p><p>·     测试</p><p>·     代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testE 测试异常数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testE 测试异常数&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     配置</p><p><a href="http://localhost:8401/testE">http://localhost:8401/testE</a></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image084-1627783588810.gif" alt="graphic"></p><p>·     jmeter</p><h2 id="1-6-热点key限流"><a href="#1-6-热点key限流" class="headerlink" title="1.6.    热点key限流"></a>1.6.    热点key限流</h2><p>1.6.1.    基本介绍</p><p>·     是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image086-1627783588810.gif" alt="graphic"></p><p>1.6.2.    官网</p><p>·     <a href="https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/热点参数限流</a></p><p>1.6.3.    承上启下复习start</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image088-1627783588810.gif" alt="graphic"></p><p>·     @SentinelResource</p><p>1.6.4.    代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int age = 10/0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>·     com.alibaba.csp.sentinel.slots.block.BlockException</p><p>1.6.5.    配置</p><p>·     配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image090-1627783588810.gif" alt="graphic"></p><p>·     1</p><p>·     @SentinelResource(value = “testHotKey”)</p><p>·     异常打到了前台用户界面看不到，不友好</p><p>·     2</p><p>·     @SentinelResource(value = “testHotKey”,blockHandler = “deal_testHotKey”)</p><p>·     方法testHostKey里面第一个参数只要QPS超过每秒1次，马上降级处理</p><p>·     用了我们自己定义的</p><p>1.6.6.    测试</p><p>·     error</p><table><thead><tr><th>Single Icons</th><th><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image092-1627783588810.gif" alt="img"> StockIcon-69; [“mmStockIconBrokenConnection”, “”]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>·     <a href="http://localhost:8401/testHotKey?p1=abc">http://localhost:8401/testHotKey?p1=abc</a></p><p>·     error</p><table><thead><tr><th>Single Icons</th><th><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image092-1627783588810.gif" alt="img"> StockIcon-69; [“mmStockIconBrokenConnection”, “”]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>·     <a href="http://localhost:8401/testHotKey?p1=abc&amp;p2=33">http://localhost:8401/testHotKey?p1=abc&amp;p2=33</a></p><p>·     right</p><table><thead><tr><th>Single Icons</th><th><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image094-1627783588810.gif" alt="img"> StockIcon-62; [“mmStockIconCheck”, “”]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>·     <a href="http://localhost:8401/testHotKey?p2=abc">http://localhost:8401/testHotKey?p2=abc</a></p><p>1.6.7.    参数例外项</p><p>·     上述案例演示了第一个参数p1,当QPS超过1秒1次点击后马上被限流</p><p>·     特殊情况</p><p>·     普通</p><p>·     超过1秒钟一个后，达到阈值1后马上被限流</p><p>·     我们期望p1参数当它是某个特殊值时，它的限流值和平时不一样</p><p>·     特例</p><p>·     假如当p1的值等于5时，它的阈值可以达到200</p><p>·     配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image096-1627783588811.gif" alt="graphic"></p><p>·     添加按钮不能忘</p><p>·     测试</p><p>·     <a href="http://localhost:8401/testHotKey?p1=5">http://localhost:8401/testHotKey?p1=5</a></p><table><thead><tr><th>Single Icons</th><th><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image094-1627783588810.gif" alt="img"> StockIcon-62; [“mmStockIconCheck”, “”]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>·     <a href="http://localhost:8401/testHotKey?p1=3">http://localhost:8401/testHotKey?p1=3</a></p><table><thead><tr><th>Single Icons</th><th><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image092-1627783588810.gif" alt="img"> StockIcon-69; [“mmStockIconBrokenConnection”, “”]</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>·     当p1等于5的时候，阈值变为200</p><p>·     当p1不等于5的时候，阈值就是平常的1</p><p>·     前提条件</p><p>·     热点参数的注意点，参数必须是基本类型或者String</p><p>1.6.8.    其他</p><p>·     手贱添加异常看看….</p><p>·     后面讲</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image098-1627783588811.gif" alt="graphic"></p><h2 id="1-7-系统规则"><a href="#1-7-系统规则" class="headerlink" title="1.7.    系统规则"></a>1.7.    系统规则</h2><p>1.7.1.    是什么</p><p>·     <a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p><p>1.7.2.    各项配置参数说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image100-1627783588811.gif" alt="graphic"></p><p>1.7.3.    配置全局QPS</p><h2 id="1-8-SentinelResource"><a href="#1-8-SentinelResource" class="headerlink" title="1.8.    @SentinelResource"></a>1.8.    @SentinelResource</h2><p>1.8.1.    按资源名称限流+后续处理</p><p>·     启动Nacos成功</p><p>·     启动Sentinel成功</p><p>·     Module</p><p>·     cloudalibaba-sentinel-service8401</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span>  <span class="comment">#默认8719，假如被占用了会自动从8719开始依次+1扫描。直至找到未被占用的端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>·     业务类RateLimitController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byResource&quot;,blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按资源名称限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,exception.getClass().getCanonicalName()+<span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     配置流控规则</p><p>·     配置步骤</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image102-1627783588811.gif" alt="graphic"></p><p>·     图形配置和代码关系</p><p>·     表示1秒钟内查询次数大于1，就跑到我们自定义的处流，限流</p><p>·     测试</p><p>·     1秒钟点击1下，OK</p><p>·     超过上述问题，疯狂点击，返回了自己定义的限流处理信息，限流发送</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image104-1627783588811.gif" alt="graphic"></p><p>·     额外问题</p><p>·     此时关闭微服务8401看看</p><p>·     Sentinel控制台，流控规则消失了？？？？？</p><p>·     临时/持久？</p><p>1.8.2.    按照Url地址限流+后续处理</p><p>·     通过访问的URL来限流，会返回Sentinel自带默认的限流处理信息</p><p>·     业务类RateLimitController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按url限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     访问一次</p><p>·     Sentinel控制台配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image106-1627783588811.gif" alt="graphic"></p><p>·     测试</p><p>·     疯狂点击<a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p><p>·     结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image108-1627783588811.gif" alt="graphic"></p><p>1.8.3.    上面兜底方法面临的问题</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image110-1627783588811.gif" alt="graphic"></p><p>1.8.4.    客户自定义限流处理逻辑</p><p>·     创建customerBlockHandler类用于自定义限流处理逻辑</p><p>·     自定义限流处理类</p><p>·     CustomerBlockHandler</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image112-1627783588811.gif" alt="graphic"></p><p>·     RateLimitController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;customerBlockHandler&quot;,</span></span><br><span class="line"><span class="meta">        blockHandlerClass = CustomerBlockHandler.class,</span></span><br><span class="line"><span class="meta">        blockHandler = &quot;handlerException2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按客戶自定义&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     启动微服务后先调用一次</p><p>·     <a href="http://localhost:8401/rateLimit/customerBlockHandler">http://localhost:8401/rateLimit/customerBlockHandler</a></p><p>·     Sentinel控制台配置</p><p>·     测试后我们自定义的出来了</p><p>·     进一步说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image114-1627783588811.gif" alt="graphic"></p><p>1.8.5.    更多注解属性说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image116-1627783588811.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image118.gif" alt="graphic"></p><p>·     多说一句</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image120-1627783588811.gif" alt="graphic"></p><p>·     Sentinel主要有三个核心API</p><p>·     SphU定义资源</p><p>·     Tracer定义统计</p><p>·     ContextUtil定义了上下文</p><h2 id="1-9-服务熔断功能"><a href="#1-9-服务熔断功能" class="headerlink" title="1.9.    服务熔断功能"></a>1.9.    服务熔断功能</h2><p>1.9.1.    sentinel整合ribbon+openFeign+fallback</p><p>1.9.2.    Ribbon系列</p><p>·     启动nacos和sentinel</p><p>·     提供者9003/9004</p><p>·     新建cloudalibaba-provider-payment9003/9004</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> </span><br></pre></td></tr></table></figure><p>·     记得修改不同的端口号</p><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9003</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9003.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Payment(<span class="number">1L</span>,<span class="string">&quot;28a8c1e3bc2742d8848569891fb42181&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Payment(<span class="number">2L</span>,<span class="string">&quot;bba8c1e3bc2742d8848569891ac32182&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Payment(<span class="number">3L</span>,<span class="string">&quot;6ua8c1e3bc2742d8848569891xt92183&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Payment payment = hashMap.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;from mysql,serverPort:  &quot;</span>+serverPort,payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>·     测试地址</p><p>·     <a href="http://localhost:9003/paymentSQL/1">http://localhost:9003/paymentSQL/1</a></p><p>·     消费者84</p><p>·     新建cloudalibaba-consumer-nacos-order84</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order84<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><p>·     主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类</p><p>·     ApplicationContextConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     CircleBreakerController的全部源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.annotation.SentinelResource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.PaymentService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;) //没有配置</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;) //fallback只负责业务异常</span></span><br><span class="line">    <span class="comment">//@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;) //blockHandler只负责sentinel控制台配置违规</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;,</span></span><br><span class="line"><span class="meta">            exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span>+id, CommonResult.class,id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span>  Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;兜底异常handlerFallback,exception内容  &quot;</span>+e.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//blockHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span>  Long id,BlockException blockException)</span> </span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">445</span>,<span class="string">&quot;blockHandler-sentinel限流,无此流水: blockException  &quot;</span>+blockException.getMessage(),payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     修改后请重启微服务</p><p>·     热部署对java代码级生效及时</p><p>·     对@SentinelResource注解内属性，有时效果不好</p><p>·     目的</p><p>·     fallback管运行异常</p><p>·     blockHandler管配置违规</p><p>·     测试地址</p><p>·     <a href="http://localhost:84/consumer/fallback/1">http://localhost:84/consumer/fallback/1</a></p><p>·     没有任何配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>·     给客户error页面，不友好</p><p>·     只配置fallback</p><p>·     编码（那个业务类下面的CircleBreakerController的全部源码）</p><p>·     只配置blockHandler</p><p>·     编码（那个业务类下面的CircleBreakerController的全部源码）</p><p>·     fallback和blockHandler都配置</p><p>·     结果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image122.gif" alt="graphic"></p><p>·     忽略属性…</p><p>·     编码（那个业务类下面的CircleBreakerController的全部源码）</p><p>·     图说</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image124.gif" alt="graphic"></p><p>1.9.3.    Feign系列</p><p>·     修改84模块</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     业务类</p><p>·     带@FeignClient注解的业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     fallback = PaymentFallbackService.class</p><p>·     PaymentFallbackService实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">44444</span>,<span class="string">&quot;服务降级返回,---PaymentFallbackService&quot;</span>,<span class="keyword">new</span> Payment(id,<span class="string">&quot;errorSerial&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OpenFeign</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     主启动</p><p>·     添加@EnableFeignClients启动Feign的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     <a href="http://lcoalhost:84/consumer/openfeign/1">http://lcoalhost:84/consumer/openfeign/1</a></p><p>·     <a href="http://lcoalhost:84/consumer/paymentSQL/1">http://lcoalhost:84/consumer/paymentSQL/1</a></p><p>·     测试84调用9003，此时故意关闭9003微服务提供者，看84消费侧自动降级，不会被耗死</p><p>1.9.4.    熔断框架比较</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image126.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image128.gif" alt="graphic"></p><h2 id="1-10-规则持久化"><a href="#1-10-规则持久化" class="headerlink" title="1.10.   规则持久化"></a>1.10.   规则持久化</h2><p>1.10.1.   是什么</p><p>·     一旦我们重启应用，Sentinel规则将消失，生产环境需要将配置规则进行持久化</p><p>1.10.2.   怎么玩</p><p>·     将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上Sentinel上的流控规则持续有效</p><p>1.10.3.   步骤</p><p>·     修改cloudalibaba-sentinel-service8401</p><p>·     POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     添加Nacos数据源配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">     <span class="attr">ds1:</span></span><br><span class="line">      <span class="attr">nacos:</span></span><br><span class="line">        <span class="string">server-addr:localhost:8848</span></span><br><span class="line">        <span class="string">dataid:$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="string">groupid:DEFAULT_GROUP</span></span><br><span class="line">        <span class="string">data-type:json</span></span><br><span class="line">            <span class="string">rule-type:flow</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     添加Nacos业务规则配置</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image130.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image132.gif" alt="graphic"></p><p>·     内容解析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;/retaLimit/byUrl&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;limitApp&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;grade&quot;</span>:   <span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;count&quot;</span>:   <span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;strategy&quot;</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;controlBehavior&quot;</span>: <span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;clusterMode&quot;</span>: <span class="literal">false</span>    </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image134.gif" alt="graphic"></p><p>·     启动8401后刷新sentinel发现业务规则有了</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image136.gif" alt="graphic"></p><p>·     快速访问测试接口</p><p>·     <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p><p>·     默认</p><p>·     停止8401再看sentinel</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image138.gif" alt="graphic"></p><p>·     重新启动8401再看sentinel</p><p>·     扎一看还是没有，稍等一会儿</p><p>·     多次调用</p><p>·     <a href="http://localhost:8401/rateLimit/byUrl">http://localhost:8401/rateLimit/byUrl</a></p><p>·     重新配置出现了，持久化验证通过</p><h1 id="二十、SpringCloud-Alibaba-Seata处理分布式事务"><a href="#二十、SpringCloud-Alibaba-Seata处理分布式事务" class="headerlink" title="二十、SpringCloud Alibaba Seata处理分布式事务"></a>二十、SpringCloud Alibaba Seata处理分布式事务</h1><h2 id="1-1-分布式事务问题"><a href="#1-1-分布式事务问题" class="headerlink" title="1.1.    分布式事务问题"></a>1.1.    分布式事务问题</h2><p>1.1.1.    分布式前</p><p>·     单机单库没这个问题</p><p>·     从1：1 -&gt; 1:N -&gt; N: N</p><p>1.1.2.    分布式之后</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image004-1627783601437.gif" alt="graphic"></p><p>​           <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image006-1627783601437.gif" alt="graphic"></p><p>1.1.3.    一句话</p><p>·     一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p><h2 id="1-2-Seata简介"><a href="#1-2-Seata简介" class="headerlink" title="1.2.    Seata简介"></a>1.2.    Seata简介</h2><p>1.2.1.    是什么</p><p>·     Seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务</p><p>·     官网地址</p><p>·     <a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p><p>1.2.2.    能干嘛</p><p>·     一个典型的分布式事务过程</p><p>·     分布式事务处理过程的-ID+三组件模型</p><p>·     Transaction ID XID</p><p>·     全局唯一的事务ID</p><p>·     3组件概念</p><p>·     Transaction Coordinator(TC)</p><p>·     事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚;</p><p>·     Transaction Manager(TM)</p><p>·      控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议;</p><p>·     Resource Manager(RM)</p><p>·     控制分支事务，负责分支注册，状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚；</p><p>·     处理过程</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image008-1627783601438.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image010-1627783601438.gif" alt="graphic"></p><p>1.2.3.    去哪下</p><p>·     发布说明:<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p><p>1.2.4.    怎么玩</p><p>·     本地@Transactional</p><p>·     全局@GlobalTransactional</p><p>·     SEATA的分布式交易解决方案</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image012-1627783601438.gif" alt="graphic"></p><h2 id="1-3-Seata-Server安装"><a href="#1-3-Seata-Server安装" class="headerlink" title="1.3.    Seata-Server安装"></a>1.3.    Seata-Server安装</h2><p>1.3.1.    1.官网地址</p><p>·     <a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p><p>1.3.2.    2.下载版本</p><p>1.3.3.    3.seata-server-0.9.0.zip解压到指定目录并修改conf目录下的file.conf配置文件</p><p>·     先备份原始file.conf文件</p><p>·     主要修改：自定义事务组名称+事务日志存储模式为db+数据库连接信息</p><p>·     file.conf</p><p>·     service模块</p><p>vgroup_mapping.my_test_tx_group = “fsp_tx_group”</p><p>·     store模块</p><p>mode = “db”</p><p> url = “jdbc:mysql://127.0.0.1:3306/seata”</p><p> user = “root”</p><p> password = “你自己的密码”</p><p>1.3.4.    4.mysql5.7数据库新建库seata</p><p>1.3.5.    5.在seata库里建表</p><p>·     建表db_store.sql在\seata-server-0.9.0\seata\conf目录里面</p><p>·     db_store.sql</p><p>·     SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- the table to store GlobalSession data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `global_table`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `global_table` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>)  <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `transaction_id` <span class="type">bigint</span>,</span><br><span class="line">  `status` tinyint <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `application_id` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `transaction_service_group` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `transaction_name` <span class="type">varchar</span>(<span class="number">128</span>),</span><br><span class="line">  `timeout` <span class="type">int</span>,</span><br><span class="line">  `begin_time` <span class="type">bigint</span>,</span><br><span class="line">  `application_data` <span class="type">varchar</span>(<span class="number">2000</span>),</span><br><span class="line">  `gmt_create` datetime,</span><br><span class="line">  `gmt_modified` datetime,</span><br><span class="line">  <span class="keyword">primary</span> key (`xid`),</span><br><span class="line">  key `idx_gmt_modified_status` (`gmt_modified`, `status`),</span><br><span class="line">  key `idx_transaction_id` (`transaction_id`)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- the table to store BranchSession data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `branch_table`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `branch_table` (</span><br><span class="line">  `branch_id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `transaction_id` <span class="type">bigint</span> ,</span><br><span class="line">  `resource_group_id` <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">  `resource_id` <span class="type">varchar</span>(<span class="number">256</span>) ,</span><br><span class="line">  `lock_key` <span class="type">varchar</span>(<span class="number">128</span>) ,</span><br><span class="line">  `branch_type` <span class="type">varchar</span>(<span class="number">8</span>) ,</span><br><span class="line">  `status` tinyint,</span><br><span class="line">  `client_id` <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">  `application_data` <span class="type">varchar</span>(<span class="number">2000</span>),</span><br><span class="line">  `gmt_create` datetime,</span><br><span class="line">  `gmt_modified` datetime,</span><br><span class="line">  <span class="keyword">primary</span> key (`branch_id`),</span><br><span class="line">  key `idx_xid` (`xid`)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- the table to store lock data</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> `lock_table`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `lock_table` (</span><br><span class="line">  `row_key` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">96</span>),</span><br><span class="line">  `transaction_id` long ,</span><br><span class="line">  `branch_id` long,</span><br><span class="line">  `resource_id` <span class="type">varchar</span>(<span class="number">256</span>) ,</span><br><span class="line">  `table_name` <span class="type">varchar</span>(<span class="number">32</span>) ,</span><br><span class="line">  `pk` <span class="type">varchar</span>(<span class="number">36</span>) ,</span><br><span class="line">  `gmt_create` datetime ,</span><br><span class="line">  `gmt_modified` datetime,</span><br><span class="line">  <span class="keyword">primary</span> key(`row_key`)</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3.6.    6.修改seata-server-0.9.0\seata\conf目录下的registry.conf配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目的是：指明注册中心为nacos，及修改nacos连接信息</p><p>1.3.7.    7.先启动Nacos端口号8848</p><p>1.3.8.    8.再启动seata-server</p><p>·     softs\seata-server-0.9.0\seata\bin</p><p>·     seata-server.bat</p><h2 id="1-4-订单-库存-账户业务数据库准备"><a href="#1-4-订单-库存-账户业务数据库准备" class="headerlink" title="1.4.    订单/库存/账户业务数据库准备"></a>1.4.    订单/库存/账户业务数据库准备</h2><p>1.4.1.    以下演示都需要先启动Nacos后启动Seata，保证两个都OK</p><p>·     Seata没启动报错no available server to connect</p><p>1.4.2.    分布式事务业务说明</p><p>·     业务说明</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image014-1627783601438.gif" alt="graphic"></p><p>·     下订单–&gt;扣库存–&gt;减账户（余额）</p><p>1.4.3.    创建业务数据库</p><p>·     seata_order: 存储订单的数据库</p><p>·     seata_storage:存储库存的数据库</p><p>·     seata_account: 存储账户信息的数据库</p><p>·     建表SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE seata_order；</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> DATABASE seata_storage；</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> DATABASE seata_account；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.4.4.    按照上述3库分别建对应业务表</p><p>·     seata_order库下建t_order表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;product_id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span> <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;money&#x27;</span> <span class="type">DECIMAL</span>(<span class="number">11</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;status&#x27;</span> <span class="type">INT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态：0：创建中; 1：已完结&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_order;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     seata_storage库下建t_storage表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_storage(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    <span class="string">&#x27;product_id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;total&#x27;</span> <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;总库存&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;used&#x27;</span> <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;已用库存&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;residue&#x27;</span> <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;剩余库存&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_storage.t_storage(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;product_id&#x27;</span>,<span class="string">&#x27;total&#x27;</span>,<span class="string">&#x27;used&#x27;</span>,<span class="string">&#x27;residue&#x27;</span>)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     seata_account库下建t_account表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_account(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span> <span class="type">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;total&#x27;</span> <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;总额度&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;used&#x27;</span> <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;已用余额&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;residue&#x27;</span> <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;剩余可用额度&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> seata_account.t_account(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;user_id&#x27;</span>,<span class="string">&#x27;total&#x27;</span>,<span class="string">&#x27;used&#x27;</span>,<span class="string">&#x27;residue&#x27;</span>) <span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_account;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.4.5.    按照上述3库分别建对应的回滚日志表</p><p>·     订单-库存-账户3个库下都需要建各自的回滚日志表</p><p>·     \seata-server-0.9.0\seata\conf目录下的db_undo_log.sql</p><p>·     建表SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> `undo_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.4.6.    最终效果</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image016-1627783601438.gif" alt="graphic"></p><h2 id="1-5-订单-库存-账户业务微服务准备"><a href="#1-5-订单-库存-账户业务微服务准备" class="headerlink" title="1.5.    订单/库存/账户业务微服务准备"></a>1.5.    订单/库存/账户业务微服务准备</h2><p>1.5.1.    业务需求</p><p>·     下订单-&gt;减库存-&gt;扣余额-&gt;改（订单）状态</p><p>1.5.2.    新建订单Order-Module</p><p>·     1.seata-order-service2001</p><p>·     2.POM</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web-actuator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql-druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>·     3.YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="comment">#自定义事务组名称需要与seata-server中的对应</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_order</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1111111</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     4.file.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type = &quot;TCP&quot;</span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server = &quot;NIO&quot;</span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat = true</span><br><span class="line">  #thread factory for netty</span><br><span class="line">  thread-factory &#123;</span><br><span class="line">    boss-thread-prefix = &quot;NettyBoss&quot;</span><br><span class="line">    worker-thread-prefix = &quot;NettyServerNIOWorker&quot;</span><br><span class="line">    server-executor-thread-prefix = &quot;NettyServerBizHandler&quot;</span><br><span class="line">    share-boss-worker = false</span><br><span class="line">    client-selector-thread-prefix = &quot;NettyClientSelector&quot;</span><br><span class="line">    client-selector-thread-size = 1</span><br><span class="line">    client-worker-thread-prefix = &quot;NettyClientWorkerThread&quot;</span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    boss-thread-size = 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    worker-thread-size = 8</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait = 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization = &quot;seata&quot;</span><br><span class="line">  compressor = &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">service &#123;</span><br><span class="line"> </span><br><span class="line">  vgroup_mapping.fsp_tx_group = &quot;default&quot; </span><br><span class="line"> </span><br><span class="line">  default.grouplist = &quot;127.0.0.1:8091&quot;</span><br><span class="line">  enableDegrade = false</span><br><span class="line">  disable = false</span><br><span class="line">  max.commit.retry.timeout = &quot;-1&quot;</span><br><span class="line">  max.rollback.retry.timeout = &quot;-1&quot;</span><br><span class="line">  disableGlobalTransaction = false</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">client &#123;</span><br><span class="line">  async.commit.buffer.limit = 10000</span><br><span class="line">  lock &#123;</span><br><span class="line">    retry.internal = 10</span><br><span class="line">    retry.times = 30</span><br><span class="line">  &#125;</span><br><span class="line">  report.retry.count = 5</span><br><span class="line">  tm.commit.retry.count = 1</span><br><span class="line">  tm.rollback.retry.count = 1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">## transaction log store</span><br><span class="line">store &#123;</span><br><span class="line">  ## store mode: file、db</span><br><span class="line">  mode = &quot;db&quot;</span><br><span class="line"> </span><br><span class="line">  ## file store</span><br><span class="line">  file &#123;</span><br><span class="line">    dir = &quot;sessionStore&quot;</span><br><span class="line"> </span><br><span class="line">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">    max-branch-session-size = 16384</span><br><span class="line">    # globe session size , if exceeded throws exceptions</span><br><span class="line">    max-global-session-size = 512</span><br><span class="line">    # file buffer size , if exceeded allocate new buffer</span><br><span class="line">    file-write-buffer-cache-size = 16384</span><br><span class="line">    # when recover batch read size</span><br><span class="line">    session.reload.read_size = 100</span><br><span class="line">    # async, sync</span><br><span class="line">    flush-disk-mode = async</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  ## database store</span><br><span class="line">  db &#123;</span><br><span class="line">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span><br><span class="line">    datasource = &quot;dbcp&quot;</span><br><span class="line">    ## mysql/oracle/h2/oceanbase etc.</span><br><span class="line">    db-type = &quot;mysql&quot;</span><br><span class="line">    driver-class-name = &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    url = &quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span><br><span class="line">    user = &quot;root&quot;</span><br><span class="line">    password = &quot;123456&quot;</span><br><span class="line">    min-conn = 1</span><br><span class="line">    max-conn = 3</span><br><span class="line">    global.table = &quot;global_table&quot;</span><br><span class="line">    branch.table = &quot;branch_table&quot;</span><br><span class="line">    lock-table = &quot;lock_table&quot;</span><br><span class="line">    query-limit = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">lock &#123;</span><br><span class="line">  ## the lock store mode: local、remote</span><br><span class="line">  mode = &quot;remote&quot;</span><br><span class="line"> </span><br><span class="line">  local &#123;</span><br><span class="line">    ## store locks in user&#x27;s database</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  remote &#123;</span><br><span class="line">    ## store locks in the seata&#x27;s server</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">recovery &#123;</span><br><span class="line">  #schedule committing retry period in milliseconds</span><br><span class="line">  committing-retry-period = 1000</span><br><span class="line">  #schedule asyn committing retry period in milliseconds</span><br><span class="line">  asyn-committing-retry-period = 1000</span><br><span class="line">  #schedule rollbacking retry period in milliseconds</span><br><span class="line">  rollbacking-retry-period = 1000</span><br><span class="line">  #schedule timeout retry period in milliseconds</span><br><span class="line">  timeout-retry-period = 1000</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">transaction &#123;</span><br><span class="line">  undo.data.validation = true</span><br><span class="line">  undo.log.serialization = &quot;jackson&quot;</span><br><span class="line">  undo.log.save.days = 7</span><br><span class="line">  #schedule delete expired undo_log in milliseconds</span><br><span class="line">  undo.log.delete.period = 86400000</span><br><span class="line">  undo.log.table = &quot;undo_log&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">## metrics settings</span><br><span class="line">metrics &#123;</span><br><span class="line">  enabled = false</span><br><span class="line">  registry-type = &quot;compact&quot;</span><br><span class="line">  # multi exporters use comma divided</span><br><span class="line">  exporter-list = &quot;prometheus&quot;</span><br><span class="line">  exporter-prometheus-port = 9898</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">support &#123;</span><br><span class="line">  ## spring</span><br><span class="line">  spring &#123;</span><br><span class="line">    # auto proxy the DataSource bean</span><br><span class="line">    datasource.autoproxy = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     5.registry.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = &quot;http://localhost:8761/eureka&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    weight = &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = &quot;localhost:6379&quot;</span><br><span class="line">    db = &quot;0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8500&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;http://localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:9603&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    region = &quot;DEFAULT_ZONE&quot;</span><br><span class="line">    datacenter = &quot;DefaultDataCenter&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    addressWaitTime = &quot;3000&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type = &quot;file&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8500&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = &quot;seata-server&quot;</span><br><span class="line">    apollo.meta = &quot;http://192.168.1.204:8801&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr = &quot;http://localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     6.domain</p><p>·     CommonResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     Order</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">//订单状态：0：创建中；1：已完结</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     7.Dao接口及实现</p><p>·     OrderDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//新建订单</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//修改订单状态，从零改为1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId,<span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     resources文件夹下新建mapper文件夹后添加</p><p>·     OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.alibaba.dao.OrderDao&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.alibaba.domain.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;count&quot;</span> <span class="attr">property</span>=<span class="string">&quot;count&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order (id,user_id,product_id,count,money,status)</span><br><span class="line">        values (null,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,0);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update t_order set status = 1</span><br><span class="line">        where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>·     8.Service接口及实现</p><p>·     OrderService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     OrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service.impl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.dao.OrderDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.StorageService;</span><br><span class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional(name = &quot;fsp-create-order&quot;,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class="line">        <span class="comment">//新建订单</span></span><br><span class="line">        orderDao.create(order);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);</span><br><span class="line">        storageService.decrease(order.getProductId(),order.getCount());</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//扣减账户</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);</span><br><span class="line">        accountService.decrease(order.getUserId(),order.getMoney());</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//修改订单状态，从零到1代表已经完成</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class="line">        orderDao.update(order.getUserId(),<span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;下订单结束了&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     StorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@FeignClient(value = &quot;seata-storage-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span></span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/storage/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     AccountService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@FeignClient(value = &quot;seata-account-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     9.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Order order)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        orderService.create(order);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     10.Config配置</p><p>·     MyBatisConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.atguigu.springcloud.alibaba.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     DataSourceProxyConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     11.主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><span class="comment">//取消数据源自动创建的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataOrderMainApp2001</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataOrderMainApp2001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.5.3.    新建库存Storage-Module</p><p>·     1.seata-order-service2002</p><p>·     2.POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     3.YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2002</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-storage-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_storage</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">111111</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>·     4.file.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type = &quot;TCP&quot;</span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server = &quot;NIO&quot;</span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat = true</span><br><span class="line">  #thread factory for netty</span><br><span class="line">  thread-factory &#123;</span><br><span class="line">    boss-thread-prefix = &quot;NettyBoss&quot;</span><br><span class="line">    worker-thread-prefix = &quot;NettyServerNIOWorker&quot;</span><br><span class="line">    server-executor-thread-prefix = &quot;NettyServerBizHandler&quot;</span><br><span class="line">    share-boss-worker = false</span><br><span class="line">    client-selector-thread-prefix = &quot;NettyClientSelector&quot;</span><br><span class="line">    client-selector-thread-size = 1</span><br><span class="line">    client-worker-thread-prefix = &quot;NettyClientWorkerThread&quot;</span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    boss-thread-size = 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    worker-thread-size = 8</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait = 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization = &quot;seata&quot;</span><br><span class="line">  compressor = &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">service &#123;</span><br><span class="line">  #vgroup-&gt;rgroup</span><br><span class="line">  vgroup_mapping.fsp_tx_group = &quot;default&quot;</span><br><span class="line">  #only support single node</span><br><span class="line">  default.grouplist = &quot;127.0.0.1:8091&quot;</span><br><span class="line">  #degrade current not support</span><br><span class="line">  enableDegrade = false</span><br><span class="line">  #disable</span><br><span class="line">  disable = false</span><br><span class="line">  #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent</span><br><span class="line">  max.commit.retry.timeout = &quot;-1&quot;</span><br><span class="line">  max.rollback.retry.timeout = &quot;-1&quot;</span><br><span class="line">  disableGlobalTransaction = false</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">client &#123;</span><br><span class="line">  async.commit.buffer.limit = 10000</span><br><span class="line">  lock &#123;</span><br><span class="line">    retry.internal = 10</span><br><span class="line">    retry.times = 30</span><br><span class="line">  &#125;</span><br><span class="line">  report.retry.count = 5</span><br><span class="line">  tm.commit.retry.count = 1</span><br><span class="line">  tm.rollback.retry.count = 1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">transaction &#123;</span><br><span class="line">  undo.data.validation = true</span><br><span class="line">  undo.log.serialization = &quot;jackson&quot;</span><br><span class="line">  undo.log.save.days = 7</span><br><span class="line">  #schedule delete expired undo_log in milliseconds</span><br><span class="line">  undo.log.delete.period = 86400000</span><br><span class="line">  undo.log.table = &quot;undo_log&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">support &#123;</span><br><span class="line">  ## spring</span><br><span class="line">  spring &#123;</span><br><span class="line">    # auto proxy the DataSource bean</span><br><span class="line">    datasource.autoproxy = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     5.registry.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = &quot;http://localhost:8761/eureka&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    weight = &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = &quot;localhost:6381&quot;</span><br><span class="line">    db = &quot;0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk</span><br><span class="line">  type = &quot;file&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = &quot;fescar-server&quot;</span><br><span class="line">    apollo.meta = &quot;http://192.168.1.204:8801&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     6.domain</p><p>·     CommonResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     Storage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 产品id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//总库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//已用库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer used;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//剩余库存</span></span><br><span class="line">    <span class="keyword">private</span> Integer residue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     7.Dao接口及实现</p><p>·     StorageDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageDao</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//扣减库存信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@Param(&quot;productId&quot;)</span> Long productId, <span class="meta">@Param(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     resources文件夹下新建mapper文件夹后添加</p><p>·     StorageMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.alibaba.dao.StorageDao&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.alibaba.domain.Storage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;used&quot;</span> <span class="attr">property</span>=<span class="string">&quot;used&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">property</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;decrease&quot;</span>&gt;</span></span><br><span class="line">        UPDATE</span><br><span class="line">            t_storage</span><br><span class="line">        SET</span><br><span class="line">            used = used + #&#123;count&#125;,residue = residue - #&#123;count&#125;</span><br><span class="line">        WHERE</span><br><span class="line">            product_id = #&#123;productId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     8.Service接口及实现</p><p>·     StorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 扣减库存</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     StorageServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service.impl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.dao.StorageDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.StorageService ;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageServiceImpl</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageDao storageDao;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// 扣减库存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;storage-service中扣减库存开始&quot;</span>);</span><br><span class="line">        storageDao.decrease(productId,count);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;storage-service中扣减库存结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     9.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult ;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.StorageService ;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//扣减库存</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/storage/decrease&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span> </span>&#123;</span><br><span class="line">        storageService.decrease(productId, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;扣减库存成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     10.Config配置</p><p>·     MyBatisConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.atguigu.springcloud.alibaba.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     DataSourceProxyConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     11.主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinWorkerThread;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataStorageServiceApplication2002</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataStorageServiceApplication2002.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.5.4.    新建账户Account-Module</p><p>·     副主题</p><p>·     1.seata-order-service2003</p><p>·     2.POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     3.YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2003</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-account-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1111111</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>·     4.file.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">transport &#123;</span><br><span class="line">  # tcp udt unix-domain-socket</span><br><span class="line">  type = &quot;TCP&quot;</span><br><span class="line">  #NIO NATIVE</span><br><span class="line">  server = &quot;NIO&quot;</span><br><span class="line">  #enable heartbeat</span><br><span class="line">  heartbeat = true</span><br><span class="line">  #thread factory for netty</span><br><span class="line">  thread-factory &#123;</span><br><span class="line">    boss-thread-prefix = &quot;NettyBoss&quot;</span><br><span class="line">    worker-thread-prefix = &quot;NettyServerNIOWorker&quot;</span><br><span class="line">    server-executor-thread-prefix = &quot;NettyServerBizHandler&quot;</span><br><span class="line">    share-boss-worker = false</span><br><span class="line">    client-selector-thread-prefix = &quot;NettyClientSelector&quot;</span><br><span class="line">    client-selector-thread-size = 1</span><br><span class="line">    client-worker-thread-prefix = &quot;NettyClientWorkerThread&quot;</span><br><span class="line">    # netty boss thread size,will not be used for UDT</span><br><span class="line">    boss-thread-size = 1</span><br><span class="line">    #auto default pin or 8</span><br><span class="line">    worker-thread-size = 8</span><br><span class="line">  &#125;</span><br><span class="line">  shutdown &#123;</span><br><span class="line">    # when destroy server, wait seconds</span><br><span class="line">    wait = 3</span><br><span class="line">  &#125;</span><br><span class="line">  serialization = &quot;seata&quot;</span><br><span class="line">  compressor = &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">service &#123;</span><br><span class="line"> </span><br><span class="line">  vgroup_mapping.fsp_tx_group = &quot;default&quot; #修改自定义事务组名称</span><br><span class="line"> </span><br><span class="line">  default.grouplist = &quot;127.0.0.1:8091&quot;</span><br><span class="line">  enableDegrade = false</span><br><span class="line">  disable = false</span><br><span class="line">  max.commit.retry.timeout = &quot;-1&quot;</span><br><span class="line">  max.rollback.retry.timeout = &quot;-1&quot;</span><br><span class="line">  disableGlobalTransaction = false</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">client &#123;</span><br><span class="line">  async.commit.buffer.limit = 10000</span><br><span class="line">  lock &#123;</span><br><span class="line">    retry.internal = 10</span><br><span class="line">    retry.times = 30</span><br><span class="line">  &#125;</span><br><span class="line">  report.retry.count = 5</span><br><span class="line">  tm.commit.retry.count = 1</span><br><span class="line">  tm.rollback.retry.count = 1</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">## transaction log store</span><br><span class="line">store &#123;</span><br><span class="line">  ## store mode: file、db</span><br><span class="line">  mode = &quot;db&quot;</span><br><span class="line"> </span><br><span class="line">  ## file store</span><br><span class="line">  file &#123;</span><br><span class="line">    dir = &quot;sessionStore&quot;</span><br><span class="line"> </span><br><span class="line">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span><br><span class="line">    max-branch-session-size = 16384</span><br><span class="line">    # globe session size , if exceeded throws exceptions</span><br><span class="line">    max-global-session-size = 512</span><br><span class="line">    # file buffer size , if exceeded allocate new buffer</span><br><span class="line">    file-write-buffer-cache-size = 16384</span><br><span class="line">    # when recover batch read size</span><br><span class="line">    session.reload.read_size = 100</span><br><span class="line">    # async, sync</span><br><span class="line">    flush-disk-mode = async</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  ## database store</span><br><span class="line">  db &#123;</span><br><span class="line">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span><br><span class="line">    datasource = &quot;dbcp&quot;</span><br><span class="line">    ## mysql/oracle/h2/oceanbase etc.</span><br><span class="line">    db-type = &quot;mysql&quot;</span><br><span class="line">    driver-class-name = &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">    url = &quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span><br><span class="line">    user = &quot;root&quot;</span><br><span class="line">    password = &quot;123456&quot;</span><br><span class="line">    min-conn = 1</span><br><span class="line">    max-conn = 3</span><br><span class="line">    global.table = &quot;global_table&quot;</span><br><span class="line">    branch.table = &quot;branch_table&quot;</span><br><span class="line">    lock-table = &quot;lock_table&quot;</span><br><span class="line">    query-limit = 100</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">lock &#123;</span><br><span class="line">  ## the lock store mode: local、remote</span><br><span class="line">  mode = &quot;remote&quot;</span><br><span class="line"> </span><br><span class="line">  local &#123;</span><br><span class="line">    ## store locks in user&#x27;s database</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  remote &#123;</span><br><span class="line">    ## store locks in the seata&#x27;s server</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">recovery &#123;</span><br><span class="line">  #schedule committing retry period in milliseconds</span><br><span class="line">  committing-retry-period = 1000</span><br><span class="line">  #schedule asyn committing retry period in milliseconds</span><br><span class="line">  asyn-committing-retry-period = 1000</span><br><span class="line">  #schedule rollbacking retry period in milliseconds</span><br><span class="line">  rollbacking-retry-period = 1000</span><br><span class="line">  #schedule timeout retry period in milliseconds</span><br><span class="line">  timeout-retry-period = 1000</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">transaction &#123;</span><br><span class="line">  undo.data.validation = true</span><br><span class="line">  undo.log.serialization = &quot;jackson&quot;</span><br><span class="line">  undo.log.save.days = 7</span><br><span class="line">  #schedule delete expired undo_log in milliseconds</span><br><span class="line">  undo.log.delete.period = 86400000</span><br><span class="line">  undo.log.table = &quot;undo_log&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">## metrics settings</span><br><span class="line">metrics &#123;</span><br><span class="line">  enabled = false</span><br><span class="line">  registry-type = &quot;compact&quot;</span><br><span class="line">  # multi exporters use comma divided</span><br><span class="line">  exporter-list = &quot;prometheus&quot;</span><br><span class="line">  exporter-prometheus-port = 9898</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">support &#123;</span><br><span class="line">  ## spring</span><br><span class="line">  spring &#123;</span><br><span class="line">    # auto proxy the DataSource bean</span><br><span class="line">    datasource.autoproxy = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     5.registry.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  eureka &#123;</span><br><span class="line">    serviceUrl = &quot;http://localhost:8761/eureka&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    weight = &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  redis &#123;</span><br><span class="line">    serverAddr = &quot;localhost:6379&quot;</span><br><span class="line">    db = &quot;0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8500&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    serverAddr = &quot;http://localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  sofa &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:9603&quot;</span><br><span class="line">    application = &quot;default&quot;</span><br><span class="line">    region = &quot;DEFAULT_ZONE&quot;</span><br><span class="line">    datacenter = &quot;DefaultDataCenter&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    addressWaitTime = &quot;3000&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type = &quot;file&quot;</span><br><span class="line"> </span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  consul &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:8500&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  apollo &#123;</span><br><span class="line">    app.id = &quot;seata-server&quot;</span><br><span class="line">    apollo.meta = &quot;http://192.168.1.204:8801&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  zk &#123;</span><br><span class="line">    serverAddr = &quot;127.0.0.1:2181&quot;</span><br><span class="line">    session.timeout = 6000</span><br><span class="line">    connect.timeout = 2000</span><br><span class="line">  &#125;</span><br><span class="line">  etcd3 &#123;</span><br><span class="line">    serverAddr = &quot;http://localhost:2379&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    name = &quot;file.conf&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     6.domain</p><p>·     CommonResult</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     Account</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.domain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal total;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已用额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal used;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 剩余额度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal residue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     7.Dao接口及实现</p><p>·     AccountDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.dao;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     resources文件夹下新建mapper文件夹后添加</p><p>·     AccountMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.alibaba.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.alibaba.domain.Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;used&quot;</span> <span class="attr">property</span>=<span class="string">&quot;used&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">property</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;decrease&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_account</span><br><span class="line">        SET</span><br><span class="line">          residue = residue - #&#123;money&#125;,used = used + #&#123;money&#125;</span><br><span class="line">        WHERE</span><br><span class="line">          user_id = #&#123;userId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     8.Service接口及实现</p><p>·     AccountService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     AccountServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.service.impl;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.AccountService ;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户业务实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountDao accountDao;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">         LOGGER.info(<span class="string">&quot;-------&gt;account-service中扣减账户余额开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">20</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        accountDao.decrease(userId,money);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;-------&gt;account-service中扣减账户余额结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     9.Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult ;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springcloud.alibaba.service.AccountService ;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扣减账户余额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>&#123;</span><br><span class="line">        accountService.decrease(userId,money);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;扣减账户余额成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·     10.Config配置</p><p>·     MyBatisConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.atguigu.springcloud.alibaba.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     DataSourceProxyConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     11.主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.alibaba;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataAccountMainApp2003</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataAccountMainApp2003.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-Test"><a href="#1-6-Test" class="headerlink" title="1.6.    Test"></a>1.6.    Test</h2><p>1.6.1.    下订单-&gt;减库存-&gt;扣余额-&gt;改（订单）状态</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image018-1627783601438.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image020-1627783601438.gif" alt="graphic"></p><p>1.6.2.    数据库初始情况</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image022-1627783601438.gif" alt="graphic"></p><p>1.6.3.    正常下单</p><p>·     <a href="http://localhost:2001/order/create?userid=1&amp;producrid=1&amp;counr=10&amp;money=100">http://localhost:2001/order/create?userid=1&amp;producrid=1&amp;counr=10&amp;money=100</a></p><p>·     数据库情况</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image024-1627783601438.gif" alt="graphic"></p><p>1.6.4.    超时异常，没加@GlobalTransactional</p><p>·     AccountServiceImpl添加超时</p><p>·     数据库情况</p><p>·     故障情况</p><p>·     当库存和账户余额扣减后，订单状态并没有设置为已经完成，没有从零改为1</p><p>·     而且由于feign的重试机制，账户余额还有可能被多次扣减</p><p>1.6.5.    超时异常，添加@GlobalTransactional</p><p>·     AccountServiceImpl添加超时</p><p>·     OrderServiceImpl@GlobalTransactional</p><p>·     下单后数据库数据并没有任何改变</p><p>·     记录都添加不进来</p><h2 id="1-7-Seata之原理简介"><a href="#1-7-Seata之原理简介" class="headerlink" title="1.7.    Seata之原理简介"></a>1.7.    Seata之原理简介</h2><p>1.7.1.    Seata</p><p>·     2019年1月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案</p><p>·     Simple Extensible Autonomous Transaction Architecture,简单可扩展自治事务框架</p><p>·     2020起初，参加工作后用1.0以后的版本</p><p>1.7.2.    再看TC/TM/RM三大组件</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image026-1627783601438.gif" alt="graphic"></p><p>·     分布式事务的执行流程</p><p>·     TM开启分布式事务(TM向TC注册全局事务记录)</p><p>·     换业务场景，编排数据库，服务等事务内资源（RM向TC汇报资源准备状态）</p><p>·     TM结束分布式事务，事务一阶段结束（TM通知TC提交/回滚分布式事务）</p><p>·     TC汇总事务信息，决定分布式事务是提交还是回滚</p><p>·     TC通知所有RM提交/回滚资源，事务二阶段结束。</p><p>1.7.3.    AT模式如何做到对业务的无侵入</p><p>·     是什么</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image028-1627783601438.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image030-1627783601438.gif" alt="graphic"></p><p>·     一阶段加载</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image032-1627783601438.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image034-1627783601438.gif" alt="graphic"></p><p>·     二阶段提交</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image036-1627783601438.gif" alt="graphic"></p><p>·     二阶段回滚</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image038-1627783601439.gif" alt="graphic"></p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image040-1627783601439.gif" alt="graphic"></p><p>1.7.4.    debug</p><p>1.7.5.    补充</p><p><img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image042-1627783601439.gif" alt="graphic">                                                                                    <img src="/2021/07/31/java-2021-07-31-SpringCloud/clip_image044-1627783601439.gif" alt="graphic"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-概述&quot;&gt;&lt;a href=&quot;#一、-概述&quot; class=&quot;headerlink&quot; title=&quot;一、 概述&quot;&gt;&lt;/a&gt;一、 概述&lt;/h1&gt;&lt;p&gt;1.微服务架构零基础理论入门（小白必看）&lt;br&gt;    零基础小白，2020.1春节期间预习过第一季的，理解微服务概</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="SpringCloud" scheme="http://stary2020.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>多设备协同工作</title>
    <link href="http://stary2020.gitee.io/2021/07/29/default-2021-07-29-phoneAndCloud/"/>
    <id>http://stary2020.gitee.io/2021/07/29/default-2021-07-29-phoneAndCloud/</id>
    <published>2021-07-29T10:54:09.000Z</published>
    <updated>2021-08-20T06:32:28.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h1 id="设备协调"><a href="#设备协调" class="headerlink" title="设备协调"></a>设备协调</h1><h2 id="物理设备"><a href="#物理设备" class="headerlink" title="物理设备"></a>物理设备</h2><p>平板，华为账号</p><p>手机，华为账号(荣耀)</p><p>笔记本，联想系</p><h1 id="手机重置"><a href="#手机重置" class="headerlink" title="手机重置"></a>手机重置</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><p>XyKey，</p><p>备忘录，</p><p>便签，</p><p>nian，</p><p>华为主题，</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="第一屏"><a href="#第一屏" class="headerlink" title="第一屏:"></a>第一屏:</h3><p>网易云，网易账号同步</p><p>微信，电脑备份</p><p>QQ，无需备份，(说说导出待，整理QQ收藏)，注意三个号</p><p>系统工具:需要备份主题文件::备份至华为云空间”备份”目录</p><p>常用:图库开启自动备份，</p><p>彩云天气，使用7037账号登录</p><p>一键锁屏功能，</p><p>支付宝，无需备份，注意三个账号。</p><p>起点读书，无需备份，2517304640账号登录</p><h3 id="第二屏"><a href="#第二屏" class="headerlink" title="第二屏:"></a>第二屏:</h3><h4 id="必须"><a href="#必须" class="headerlink" title="必须:"></a>必须:</h4><p>PU口袋校园，账号:147</p><p>WPS，账号:同微信</p><p>百度网盘，账号147</p><p>学习通，账号XyKey</p><p>==XyKey，无账号，备份至华为云空间”备份”目录==</p><p>==nian，无账号，备份至华为云空间”备份”目录==</p><p>==便签，账号XyKey，备份至坚果云==</p><p>==阅读，账号XyKey，备份至坚果云==</p><p>ES文件浏览器，无账号，P版，备份至华为云空间”备份”目录</p><p>YES PDF，无账号，阅读器</p><p>哔哩哔哩，账号，147，密码不详</p><p>酷安，账号XyKey</p><h4 id="非必须"><a href="#非必须" class="headerlink" title="非必须"></a>非必须</h4><p>建设银行，手机登录，</p><p>钉钉，现阶段不怎么用，支付宝账号，</p><p>学小易，账号随意</p><p>交管12123，账号XyKey</p><p>微博，QQ账号登录</p><p>墨墨背单词，微信账号</p><p>每日英语听力，华为账号</p><p>云闪付，账号XyKey</p><p>知乎，微信账号</p><p>Code+，坚果云备份</p><p>牛客，账号XyKey</p><h3 id="第三屏"><a href="#第三屏" class="headerlink" title="第三屏"></a>第三屏</h3><h4 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱:"></a>工具箱:</h4><p>QMD，下载音乐，备份至华为云空间”备份”目录</p><p>手机性能排行榜，备份至华为云空间”备份”目录</p><p>坚果云，账号XyKey</p><p>IDM+，下载器，备份至华为云空间”备份”目录</p><p>v2ray，备份至华为云空间”备份”目录</p><p>人工桌面，酷安取</p><p>李跳跳，酷安取</p><p>古典诗词，微信账号登录</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他:"></a>其他:</h4><p>腾讯地图，QQ登录</p><p>掌上营业厅，中国移动，手机认证登录</p><p>白马地图，无需登录，</p><p>VMOS pro，??P版，备份至华为云空间”备份”目录</p><p>Mx，无账号</p><p>携程，账号XyKey</p><p>淘宝，账号支付宝，</p><p>腾讯视频，QQ登录，PS:25</p><p>央视频，微信登录</p><p>Edge，账号XyKey，微软账号</p><p>京东，微信登录</p><p>实习僧，手机认证登录</p><p>应用宝，不登录</p><p>饿了么，手机认证</p><p>TapTap，微信登录</p><h3 id="第四屏"><a href="#第四屏" class="headerlink" title="第四屏"></a>第四屏</h3><p>想不想修真，华为账号</p><p>王者荣耀</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>图片，自动同步</p><p>音乐，电脑+U盘+百度网盘+华为云空间，以云空间数据为主</p><p>文档，文档存于电脑，定期备份至百度网盘，</p><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>备忘录自动备份，</p><h1 id="电脑重置"><a href="#电脑重置" class="headerlink" title="电脑重置"></a>电脑重置</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h2 id="软件-1"><a href="#软件-1" class="headerlink" title="软件"></a>软件</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>浏览器：Chrome，装c盘，打开v2，链接，然后登录Chrome账号，自动同步，将预先备份的tampermonkey从Google云盘恢复，<br>浏览器部分OK，附加：更新edge，下载firefox</p><p>解压软件：Bandizip，必需，重新安装，删除旧文件夹</p><p>视频播放软件：potplayer，非必需，</p><p>office：2016合集+2019visio<br>wps可替代，</p><p>编辑器：notepad++，或editplus</p><p>输入法：搜狗？</p><p>安全：火绒</p><p>VMware：必需</p><p>腾讯系：tim，微信，软件管家？</p><p>下载：Xdown，迅雷，百度网盘</p><h3 id="辅助，非必需，"><a href="#辅助，非必需，" class="headerlink" title="辅助，非必需，"></a>辅助，非必需，</h3><p>格式工厂，<br>护眼宝<br>translucentTB<br>软媒魔方设置大师<br>cclean<br>ocam<br>everything<br>eDiary<br>w3cschool<br>trays<br>截屏：Snipaste</p><h3 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h3><p>远程连接：xshell，mobaxterm</p><p>开发环境：<br>java8<br>java14<br>Python<br>微软常用库</p><p>开发ide<br>idea 2021<br>eclipse<br>vscode<br>MATLAB<br>mysql</p><p><img src="/2021/07/29/default-2021-07-29-phoneAndCloud/image-20210813183927712.png" alt="image-20210813183927712"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h1 id=&quot;设备协调&quot;&gt;&lt;a href=&quot;#设备协调&quot; class=&quot;headerlink&quot; title=&quot;设备协调&quot;&gt;&lt;/a&gt;设备协调&lt;/h</summary>
      
    
    
    
    <category term="default" scheme="http://stary2020.gitee.io/categories/default/"/>
    
    
    <category term="default" scheme="http://stary2020.gitee.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>快捷键设置</title>
    <link href="http://stary2020.gitee.io/2021/07/27/tools-2021-07-27-keySoon/"/>
    <id>http://stary2020.gitee.io/2021/07/27/tools-2021-07-27-keySoon/</id>
    <published>2021-07-27T02:52:59.000Z</published>
    <updated>2021-08-19T02:34:15.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h1><p>半角&amp;全角设置，中文输入法下使用英文字符（对编程极度友好），但是在英文字符中打不出顿号。</p><p><img src="/2021/07/27/tools-2021-07-27-keySoon/image-20210727105746358.png" alt="image-20210727105746358"></p><p>折中方案，设置自定义标点设置，将需要的、常用的设置成英文标点，保留部分。注意区分全角半角。</p><p>将常用的双引号、方括号和反引号、逗号设置成英文半角,编程常用,保留顿号,句号。在中文里常用。</p><h1 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h1><p>配置全局快捷键:</p><p>仅保留播放上一曲,下一曲三个操作</p><p><img src="/2021/07/27/tools-2021-07-27-keySoon/image-20210727105417193.png" alt="image-20210727105417193"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搜狗输入法&quot;&gt;&lt;a href=&quot;#搜狗输入法&quot; class=&quot;headerlink&quot; title=&quot;搜狗输入法&quot;&gt;&lt;/a&gt;搜狗输入法&lt;/h1&gt;&lt;p&gt;半角&amp;amp;全角设置，中文输入法下使用英文字符（对编程极度友好），但是在英文字符中打不出顿号。&lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="default" scheme="http://stary2020.gitee.io/categories/default/"/>
    
    
    <category term="default" scheme="http://stary2020.gitee.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://stary2020.gitee.io/2021/07/23/java-2021-07-23-faceQuestions/"/>
    <id>http://stary2020.gitee.io/2021/07/23/java-2021-07-23-faceQuestions/</id>
    <published>2021-07-23T12:56:06.000Z</published>
    <updated>2021-08-19T02:33:47.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723205708900.png" alt="image-20210723205708900"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723205836953.png" alt="image-20210723205836953"></p><ul><li>IO<ul><li>面向字符的IO流：保证字符的呈现形式相同，不管什么编码，输出的“汉字”保持不变。</li><li>面向字节的IO流：不改变IO过程中的0、1顺序，适合于图片、音频等文件</li></ul></li></ul><h2 id="i"><a href="#i" class="headerlink" title="i++"></a>i++</h2><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723210326305.png" alt="image-20210723210326305"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723210339982.png" alt="image-20210723210339982"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723210711986.png" alt="image-20210723210711986"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723210832047.png" alt="image-20210723210832047"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723210842154.png" alt="image-20210723210842154"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211033136.png" alt="image-20210723211033136"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211221437.png" alt="image-20210723211221437"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211324454.png" alt="image-20210723211324454"></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211629052.png" alt="image-20210723211629052"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211642353.png" alt="image-20210723211642353"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211855017.png" alt="image-20210723211855017"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211905260.png" alt="image-20210723211905260"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723211941127.png" alt="image-20210723211941127"></p><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723212035539.png" alt="image-20210723212035539"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210723212046330.png" alt="image-20210723212046330"></p><h1 id="java面试题，第二季"><a href="#java面试题，第二季" class="headerlink" title="java面试题，第二季"></a>java面试题，第二季</h1><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210813205134636.png" alt="image-20210813205134636" style="zoom:200%;"><h1 id="0、java基础"><a href="#0、java基础" class="headerlink" title="0、java基础"></a>0、java基础</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Map的实现类"><a href="#Map的实现类" class="headerlink" title="Map的实现类"></a>Map的实现类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map:双列数据，存储key value数据</span><br><span class="line">HashMap:作为map主要实现类,线程不安全的，效率高,可存储null的key和value</span><br><span class="line">LinkedHashMap:线程安全的，对于频繁遍历操作，此类执行效率高于HashMap</span><br><span class="line">TreeMap:保证按照添加的key value对进行排序，实现排序遍历</span><br><span class="line">Hashtable:作为古老的实现类，线程安全，效率低,不可存储null的key和value</span><br></pre></td></tr></table></figure><h3 id="1-hashMap的底层实现原理："><a href="#1-hashMap的底层实现原理：" class="headerlink" title="1.hashMap的底层实现原理："></a>1.hashMap的底层实现原理：</h3><p>先以JDK7为例说明：</p><p>1、HashMap map = new HashMap();</p><p>2、在实例化以后，底层创建了长度是16的一维数组，这个数组的类型是Entry[]，数组名字是table</p><p>3、map.put(key1,value 1);</p><p>4、首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry[]数组中的存放位置</p><p>5、如果此位置上的数据为空，此时的key1-value1添加成功  —情况1</p><p>6、如果此位置上的数据不为空，意味着此位置上存在一个或多个数据（以链表的形式存在），比较key1和已经存在的一个或多个数据的哈希值：</p><p>7、如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功 —- 情况2</p><p>8、如果key1的哈希值和已经存在的某个数据（key2-value2）的哈希值相同，继续比较，调用key1所在类的equals(key2)</p><p>9、 如果equals()返回false:此时key1-value1添加成功  —–情况3</p><p>10 如果equals()返回true:使用value1的值来替换value2的值</p><p>11、关于情况2和情况3，此时key1-value1和原来的数据以链表的方式存储数据</p><p>12、在不断的添加过程中，会涉及到扩容问题，默认的扩容方式是：扩容为原来容量的2倍，并扩容完以后，将原有的数据复制过来。</p><p>JDK8</p><p> jdk8相较于jdk7在底层实现方面的不同:</p><p>1.一开始当我们new HashMap的时候，底层并没有帮我们创建一个长度为16的数组</p><p>2.jdk8底层的数组不再叫Entry[]的数组，而是叫Node[]数组</p><p>3.首次调用put()方式时，底层创建长度为16的数组</p><p>4.jdk7的底层结构只有数组+链表，在jdk8当中的底层结构是数组+链表+红黑树</p><p>1、什么时候涉及到红黑树？答：当数组的某一个索引位置上的元素以链表形式存在的数据个数大于8且当前数组的长度大于64时</p><p>2、此时此索引位置上的所有数据改为使用红黑树来存储。</p><p>2、谈谈你对HashMap中put/get方法的认识，如果了解再谈谈HashMap的扩容机制，默认大小是多少？什么是负载因子（或填充比）？</p><h1 id="1、JUC多线程及并发包"><a href="#1、JUC多线程及并发包" class="headerlink" title="1、JUC多线程及并发包"></a>1、JUC多线程及并发包</h1><p> JUC多线程及并发包</p><p>1.java.util.concurrent。 concurrent是并发的意思</p><p>2.java.util.concurrent.atomic。  atomic 是原子性的意思</p><p>3.java.util.concurrent.locks。  locks是锁的意思</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><h4 id="1-谈谈你对volatile的理解"><a href="#1-谈谈你对volatile的理解" class="headerlink" title="1.谈谈你对volatile的理解"></a>1.谈谈你对volatile的理解</h4><p>答: 1.volatile是Java虚拟机提供的轻量级的同步机制，是基本上遵守了JMM的规范，主要是保证可见性和禁止指令重排，但是它并不保证原子性</p><p>2.volatile主要有以下三大特性：</p><ul><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ul><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p>JMM(Java内存模型Java Memory Model,简称JMM)本身是一种抽象的概念 并不真实存在,它描述的是一组规则或规范通过规范定制了程序中各个变量(包括实例字段,静态字段和构成数组对象的元素)的访问方式.</p><p>JMM关于同步规定:</p><p>1.线程解锁前,必须把共享变量的值刷新回主内存</p><p>2.线程加锁前,必须读取主内存的最新值到自己的工作内存</p><p>3.加锁解锁是同一把锁</p><p>由于JVM运行程序的实体是线程,而每个线程创建时JVM都会为其创建一个工作内存(有些地方成为栈空间),工作内存是每个线程的私有数据区域,而Java内存模型中规定所有变量都存储在主内存,主内存是共享内存区域,所有线程都可访问,但线程对变量的操作(读取赋值等)必须在工作内存中进行,首先要将变量从主内存拷贝到自己的工作空间,然后对变量进行操作,操作完成再将变量写回主内存,不能直接操作主内存中的变量,各个线程中的工作内存储存着主内存中的变量副本拷贝,因此不同的线程无法访问对方的工作内存,此案成间的通讯(传值) 必须通过主内存来完成,其简要访问过程如下图:</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210814102449662.png" alt="image-20210814102449662"></p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>通过前面对JMM的介绍,我们知道<br>各个线程对主内存中共享变量的操作都是各个线程各自拷贝到自己的工作内存操作后再写回主内存中的.</p><p>这就可能存在一个线程AAA修改了共享变量X的值还未写回主内存中时 ,另外一个线程BBB又对内存中的一个共享变量X进行操作,但此时A线程工作内存中的共享比那里X对线程B来说并不不可见.这种工作内存与主内存同步延迟现象就造成了可见性问题.</p><p>其意思就是多个线程中从主内存拷贝值到各自线程的工作内存，若有一个线程改了当前拷贝过来的这个值，并将修改好的值返回给了主内存，那么此时其他线程不知道这个线程已经把值改了，此时必须要有一种机制，只要有一个线程修改完自己的工作内存的值，并写回给主内存以后要及时通知其他线程，这样即使通知的这种情况，就是JMM内存模型里面第一个重要特性：俗称：可见性。</p><p>较为官方的解释<br>JMM(Java内存模型Java Memory Model,简称JMM)本身是一种抽象的概念 并不真实存在,它描述的是一组规则或规范通过规范定制了程序中各个变量(包括实例字段,静态字段和构成数组对象的元素)的访问方式.</p><p>JMM关于同步规定:<br>1.线程解锁前,必须把共享变量的值刷新回主内存<br>2.线程加锁前,必须读取主内存的最新值到自己的工作内存<br>3.加锁解锁是同一把锁</p><p>由于JVM运行程序的实体是线程,而每个线程创建时JVM都会为其创建一个工作内存(有些地方成为栈空间),工作内存是每个线程的私有数据区域,而Java内存模型中规定所有变量都存储在主内存,主内存是共享内存区域,所有线程都可访问,但线程对变量的操作(读取赋值等)必须在工作内存中进行,首先要将变量从主内存拷贝到自己的工作空间,然后对变量进行操作,操作完成再将变量写回主内存,不能直接操作主内存中的变量,各个线程中的工作内存储存着主内存中的变量副本拷贝,因此不同的线程无法访问对方的工作内存,此案成间的通讯(传值) 必须通过主内存来完成,其简要访问过程如下图:</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210814103023255.png" alt="image-20210814103023255"></p><h4 id="可见性面试题"><a href="#可见性面试题" class="headerlink" title="可见性面试题"></a>可见性面试题</h4><p>那你写一个Demo来证明一下什么叫保证了可见性？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//volatile就是增强了主线程和线程的可见性</span></span><br><span class="line">    <span class="keyword">volatile</span>  <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTO60</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.验证volatile的可见性</span></span><br><span class="line"><span class="comment"> *  1.1 假如int number = 0; number变量之前没有添加volatile关键字修饰，没有可见性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();<span class="comment">//线程操作资源类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t come in&quot;</span>);</span><br><span class="line">            <span class="comment">//线程暂停3秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="comment">//3秒钟以后将把0改为60</span></span><br><span class="line">            myData.addTO60();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t updated number value:&quot;</span>+myData.number);</span><br><span class="line">        &#125;,<span class="string">&quot;AAA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二个线程就是我们的main线程</span></span><br><span class="line">        <span class="keyword">while</span> (myData.number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//main主线程就一直在这里等待循环，直到number不再等于零</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若这句话打印出来了，说明main主线程感知到了number的值发生了变化，那么此时可见性就会被触发</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t mission is over,main get number value:&quot;</span>+myData.number);  <span class="comment">//这个是main线程</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>JAVA内存模型（JMM）要求保证原子性，但是volatile是不保证原子性的</p><p>number++在多线程下是非线程安全的,如何不加synchronized解决?</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210814103220648.png" alt="image-20210814103220648"></p><p>原子性的案例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="comment">//volatile就是增强了主线程和线程的可见性</span></span><br><span class="line">    <span class="keyword">volatile</span>  <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTO60</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请注意，此时number前面是加了volatile关键字修饰的，volatile不保证原子性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addPlusPlus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.验证volatile的可见性</span></span><br><span class="line"><span class="comment"> *  1.1 假如int number = 0; number变量之前没有添加volatile关键字修饰，没有可见性</span></span><br><span class="line"><span class="comment"> *  1.2 添加了volatile，可以解决可见性问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.验证volatile不保证原子性</span></span><br><span class="line"><span class="comment"> *  2.1 原子性是什么意思？  其实就是看最终一致性能不能保证</span></span><br><span class="line"><span class="comment"> *      不可分割，完整性，</span></span><br><span class="line"><span class="comment"> *      也即某个线程正在做某个业务业务的时候，中间不可以被加塞或者被分割，需要整体完整。</span></span><br><span class="line"><span class="comment"> *      要么同时成功，要么同时失败。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.2 volatile不保证原子性的案例演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.3 volatile为什么不能保证原子性?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">1000</span> ; j++) &#123;</span><br><span class="line">                    myData.addPlusPlus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要等待上面20个线程都全部计算完成后，再用main线程取得最终的结果值，看是多少</span></span><br><span class="line">       <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;  <span class="comment">//说明线程还没有算完</span></span><br><span class="line">           Thread.yield();</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t finally number value: &quot;</span>+myData.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如何解决原子性？"><a href="#如何解决原子性？" class="headerlink" title="如何解决原子性？"></a>如何解决原子性？</h4><p>1.可以加synchronized来解决不保证原子性问题，但是不推荐使用</p><p>2.可以使用java.util.concurrent.atomic包下的AtomicInteger(带原子性包装的整型类)来解决不保证原子性问题</p><p>解决方案的具体代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="comment">//volatile就是增强了主线程和线程的可见性</span></span><br><span class="line">    <span class="keyword">volatile</span>  <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTO60</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请注意，此时number前面是加了volatile关键字修饰的，volatile不保证原子性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addPlusPlus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AtomicInteger atomicInteger =<span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMyAtomic</span><span class="params">()</span></span>&#123;</span><br><span class="line">        atomicInteger.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.验证volatile的可见性</span></span><br><span class="line"><span class="comment"> *  1.1 假如int number = 0; number变量之前没有添加volatile关键字修饰，没有可见性</span></span><br><span class="line"><span class="comment"> *  1.2 添加了volatile，可以解决可见性问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.验证volatile不保证原子性</span></span><br><span class="line"><span class="comment"> *  2.1 原子性是什么意思？  其实就是看最终一致性能不能保证</span></span><br><span class="line"><span class="comment"> *      不可分割，完整性，</span></span><br><span class="line"><span class="comment"> *      也即某个线程正在做某个业务业务的时候，中间不可以被加塞或者被分割，需要整体完整。</span></span><br><span class="line"><span class="comment"> *      要么同时成功，要么同时失败。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.2 volatile不保证原子性的案例演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.3 volatile为什么不能保证原子性?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.4 如何解决原子性？</span></span><br><span class="line"><span class="comment"> *      * 1.可以加synchronized来解决不保证原子性问题，但是不推荐使用</span></span><br><span class="line"><span class="comment"> *      * 2.可以使用java.util.concurrent.atomic包下的AtomicInteger(带原子包装的整型类)来解决不保证原子性问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">1000</span> ; j++) &#123;</span><br><span class="line">                    myData.addPlusPlus();  <span class="comment">//不保证原子性</span></span><br><span class="line">                    myData.addMyAtomic();   <span class="comment">//保证原子性</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要等待上面20个线程都全部计算完成后，再用main线程取得最终的结果值，看是多少</span></span><br><span class="line">       <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;  <span class="comment">//说明线程还没有算完</span></span><br><span class="line">           Thread.yield();</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t int type, finally number value: &quot;</span>+myData.number);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t AtomicInteger type, finally number value: &quot;</span>+myData.atomicInteger);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>原子性面试题：</p><h4 id="volatile为什么不能保证原子性？而且为什么每次一运行的话，它的值都低于2w呢？"><a href="#volatile为什么不能保证原子性？而且为什么每次一运行的话，它的值都低于2w呢？" class="headerlink" title="volatile为什么不能保证原子性？而且为什么每次一运行的话，它的值都低于2w呢？"></a>volatile为什么不能保证原子性？而且为什么每次一运行的话，它的值都低于2w呢？</h4><p>答：因为有很多值在putfield这步写回去的时候可能线程的调度被挂起了，刚好也没有收到最新值的通知，有这么一个纳秒级别的时间差，一写就出现了写覆盖，就把人家的值覆盖掉了</p><h4 id="凭啥加了AtomicInteger这个就能解决不能保证原子性问题？"><a href="#凭啥加了AtomicInteger这个就能解决不能保证原子性问题？" class="headerlink" title="凭啥加了AtomicInteger这个就能解决不能保证原子性问题？"></a>凭啥加了AtomicInteger这个就能解决不能保证原子性问题？</h4><h4 id="AtomicInteger这个玩意它的底层原理知道吗？"><a href="#AtomicInteger这个玩意它的底层原理知道吗？" class="headerlink" title="AtomicInteger这个玩意它的底层原理知道吗？"></a>AtomicInteger这个玩意它的底层原理知道吗？</h4><p>答：知道，AtomicInteger底层是CAS</p><p>那再跟我解释一下什么是CAS？</p><h4 id="VolatileDemo代码演示可见性-原子性代码"><a href="#VolatileDemo代码演示可见性-原子性代码" class="headerlink" title="VolatileDemo代码演示可见性+原子性代码"></a>VolatileDemo代码演示可见性+原子性代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.java8.jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span></span>&#123;</span><br><span class="line">    <span class="comment">//volatile就是增强了主线程和线程的可见性</span></span><br><span class="line">    <span class="keyword">volatile</span>  <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTO60</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//请注意，此时number前面是加了volatile关键字修饰的，volatile不保证原子性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addPlusPlus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.验证volatile的可见性</span></span><br><span class="line"><span class="comment"> *  1.1 假如int number = 0; number变量之前没有添加volatile关键字修饰，没有可见性</span></span><br><span class="line"><span class="comment"> *  1.2 添加了volatile，可以解决可见性问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.验证volatile不保证原子性</span></span><br><span class="line"><span class="comment"> *  2.1 原子性是什么意思？  其实就是看最终一致性能不能保证</span></span><br><span class="line"><span class="comment"> *      不可分割，完整性，</span></span><br><span class="line"><span class="comment"> *      也即某个线程正在做某个业务业务的时候，中间不可以被加塞或者被分割，需要整体完整。</span></span><br><span class="line"><span class="comment"> *      要么同时成功，要么同时失败。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.2 volatile不保证原子性的案例演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  2.3 volatile为什么不能保证原子性?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">20</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">1000</span> ; j++) &#123;</span><br><span class="line">                    myData.addPlusPlus();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要等待上面20个线程都全部计算完成后，再用main线程取得最终的结果值，看是多少</span></span><br><span class="line">       <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;  <span class="comment">//说明线程还没有算完</span></span><br><span class="line">           Thread.yield();</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t finally number value: &quot;</span>+myData.number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以保证可见性，及时通知其他线程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">seeOkByVolatile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MyData myData = <span class="keyword">new</span> MyData();<span class="comment">//线程操作资源类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t come in&quot;</span>);</span><br><span class="line">            <span class="comment">//线程暂停3秒钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            <span class="comment">//3秒钟以后将把0改为60</span></span><br><span class="line">            myData.addTO60();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t updated number value:&quot;</span>+myData.number);</span><br><span class="line">        &#125;,<span class="string">&quot;AAA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二个线程就是我们的main线程</span></span><br><span class="line">        <span class="keyword">while</span> (myData.number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//main主线程就一直在这里等待循环，直到number不再等于零</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若这句话打印出来了，说明main主线程感知到了number的值发生了变化，那么此时可见性就会被触发</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t mission is over,main get number value:&quot;</span>+myData.number);  <span class="comment">//这个是main线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>计算机在执行程序时,为了提高性能,编译器和处理器常常会做指令重排,一把分为以下3种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">源代码=》编译器优化的重排=》指令并行的重排=》内存系统的重排=》最终执行的指令</span><br></pre></td></tr></table></figure><p>单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致.</p><p>处理器在进行重新排序是必须要考虑指令之间的数据依赖性</p><p>多线程环境中线程交替执行,由于编译器优化重排的存在,两个线程使用的变量能否保持一致性是无法确定的,结果无法预测</p><p>重排1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mySort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">11</span>;<span class="comment">//语句1</span></span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">12</span>;<span class="comment">//语句2</span></span><br><span class="line">    x=x+<span class="number">5</span>;<span class="comment">//语句3</span></span><br><span class="line">    y=x*x;<span class="comment">//语句4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">2134</span></span><br><span class="line"><span class="number">1324</span></span><br></pre></td></tr></table></figure><p>问题:</p><p>请问语句4 可以重排后变成第一条码?<br>存在数据的依赖性，没办法排到第一个</p><p>重排2</p><p>int a ,b ,x,y=0;</p><table><thead><tr><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>x=a;</td><td>y=b;</td></tr><tr><td>b=1;</td><td>a=2;</td></tr><tr><td></td><td></td></tr><tr><td>x=0 y=0</td><td></td></tr></tbody></table><p>如果编译器对这段代码进行执行重排优化后,可能出现下列情况:</p><table><thead><tr><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>b=1;</td><td>a=2;</td></tr><tr><td>x=a;</td><td>y=b;</td></tr><tr><td></td><td></td></tr><tr><td>x=2 y=1</td><td></td></tr></tbody></table><p> 这也就说明在多线程环境下,由于编译器优化重排的存在,两个线程使用的变量能否保持一致是无法确定的.</p><p>禁止指令重排小总结(了解)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">volatile实现禁止指令重排优化，从而避免多线程环境下程序出现乱序执行的现象</span><br><span class="line">先了解一个概念，内存屏障(Memory Barrier)又称内存栅栏，是一个CPU指令，它的作用有两个:</span><br><span class="line">一是保证特定操作的执行顺序</span><br><span class="line">二是保证某些变量的内存可见性(利用该特性实现volatile的内存可见性)。</span><br><span class="line">由于编译器和处理器都能执行指令重排优化。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令重排优化。内存屏障另外一个作用是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210817185824680.png" alt="image-20210817185824680"></p><h4 id="3-你在哪些地方用到过volatile"><a href="#3-你在哪些地方用到过volatile" class="headerlink" title="3.你在哪些地方用到过volatile?"></a>3.你在哪些地方用到过volatile?</h4><p>单例模式DCL代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonDemo instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双重检测机制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">                SingletonDemo.getInstance();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代理模式volatile分析</p><p>DCL(双端检锁) 机制不一定线程安全,原因是有指令重排的存在,加入volatile可以禁止指令重排</p><p> 原因在于某一个线程在执行到第一次检测,读取到的instance不为null时,instance的引用对象可能没有完成初始化.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">instance=<span class="keyword">new</span> SingletonDem(); 可以分为以下步骤(伪代码)</span><br><span class="line">memory=allocate();<span class="comment">//1.分配对象内存空间</span></span><br><span class="line">instance(memory);<span class="comment">//2.初始化对象</span></span><br><span class="line">instance=memory;<span class="comment">//3.设置instance的指向刚分配的内存地址,此时instance!=null </span></span><br></pre></td></tr></table></figure><p>步骤2和步骤3不存在数据依赖关系.而且无论重排前还是重排后程序执行的结果在单线程中并没有改变,因此这种重排优化是允许的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory=allocate();<span class="comment">//1.分配对象内存空间</span></span><br><span class="line">instance=memory;<span class="comment">//3.设置instance的指向刚分配的内存地址,此时instance!=null 但对象还没有初始化完.</span></span><br><span class="line">instance(memory);<span class="comment">//2.初始化对象</span></span><br></pre></td></tr></table></figure><p>但是指令重排只会保证串行语义的执行一致性(单线程) 并不会关心多线程间的语义一致性</p><p>所以当一条线程访问instance不为null时,由于instance实例未必完成初始化,也就造成了线程安全问题.</p><p>单例模式volatile代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  加上volatile来禁止指令重排，就能保证多线程间的语义一致性</span></span><br><span class="line"><span class="comment">     *  若不加，那么就会在某一次就会导致线程不安全的问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonDemo instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 我是构造方法SingletonDemo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DCL(双端检索机制)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;  <span class="comment">//加锁前</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo.class)&#123;  <span class="comment">//用同步代码块，进行加锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;  <span class="comment">//加锁后</span></span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单线程（main线程的操作动作。。。。。。。。。。）</span></span><br><span class="line"><span class="comment">//        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span><br><span class="line"><span class="comment">//        System.out.println(SingletonDemo.getInst  ance() == SingletonDemo.getInstance());</span></span><br><span class="line"><span class="comment">//        System.out.println(SingletonDemo.getInstance() == SingletonDemo.getInstance());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//并发多线程后 情况发生了很大的变化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                SingletonDemo.getInstance();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加上volatile来禁止指令重排，就能保证多线程间的语义一致性，若不加，那么就会在某一次就会导致线程不安全的问题</p><p>如果在高并发多线程的版本里面，那么此时的单例模式最终的写法就是：</p><p>1.加入双端检锁机制（也即加入同步代码块）</p><p>2.在需要单例的这个对象前面加入volatile来禁止指令重排。</p><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><h4 id="2-CAS你知道吗"><a href="#2-CAS你知道吗" class="headerlink" title="2.CAS你知道吗"></a>2.CAS你知道吗</h4><p>CAS的两句话概括：</p><p>1.如果线程的期望值跟物理内存的真实值一样，就更新值到物理内存当中，并返回true</p><p>2.如果线程的期望值跟物理内存的真实值不一样，返回是false，那么本次修改失败，那么此时需要重新获得主物理内存的新值</p><p>1.比较并交换</p><p>CASDemo代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-12 9:57</span></span><br><span class="line"><span class="comment"> * 1.什么是CAS ? ===&gt; compareAndSet</span></span><br><span class="line"><span class="comment"> *  比较并交换</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CASDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">5</span>);</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">2019</span>)+<span class="string">&quot;\t current&quot;</span>+atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">2014</span>)+<span class="string">&quot;\t current&quot;</span>+atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-CAS底层原理-如果知道-谈谈你对UnSafe的理解"><a href="#2-CAS底层原理-如果知道-谈谈你对UnSafe的理解" class="headerlink" title="2.CAS底层原理?如果知道,谈谈你对UnSafe的理解"></a>2.CAS底层原理?如果知道,谈谈你对UnSafe的理解</h4><p>·     atomicInteger.getAndIncrement();</p><p>atomicInteger.getAndIncrement()方法的源代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引出来一个问题:UnSafe类是什么?</p><p>UnSafe</p><p>1.UnSafe</p><p>是CAS的核心类 由于Java 方法无法直接访问底层 ,需要通过本地(native)方法来访问,UnSafe相当于一个后面,基于该类可以直接操作特额定的内存数据.UnSafe类在于sun.misc包中,其内部方法操作可以向C的指针一样直接操作内存,因为Java中CAS操作的助兴依赖于UNSafe类的方法.</p><p><strong>注意UnSafe类中所有的方法都是native修饰的,也就是说UnSafe类中的方法都是直接调用操作底层资源执行响应的任务</strong></p><p>2.变量ValueOffset,便是该变量在内存中的偏移地址,因为UnSafe就是根据内存偏移地址获取数据的</p><p>3.变量value和volatile修饰,保证了多线程之间的可见性.</p><p>CAS是什么</p><p>CAS的全称为Compare-And-Swap ,它是一条CPU并发原语.</p><p>它的功能是判断内存某个位置的值是否为预期值,如果是则更新为新的值,这个过程是原子的.</p><p>CAS并发原语提现在Java语言中就是sun.miscUnSaffe类中的各个方法.调用UnSafe类中的CAS方法,JVM会帮我实现CAS汇编指令.这是一种完全依赖于硬件 功能,通过它实现了原子操作,再次强调,由于CAS是一种系统原语,原语属于操作系统用于范畴,是由若干条指令组成,用于完成某个功能的一个过程,并且原语的执行必须是连续的,在执行过程中不允许中断,也即是说CAS是一条原子指令,不会造成所谓的数据不一致的问题.</p><p>unSafe.getAndIncrement</p><p> 假设线程A和线程B两个线程同时执行getAndAddInt操作(分别在不同的CPU上):</p><p>1.AtomicInteger里面的value原始值为3,即主内存中AtomicInteger的value为3,根据JMM模型,线程A和线程B各自持有一份值为3的value的副本分别到各自的工作内存.</p><p>2.线程A通过getIntVolatile(var1,var2) 拿到value值3,这是线程A被挂起.</p><p>3.线程B也通过getIntVolatile(var1,var2) 拿到value值3,此时刚好线程B没有被挂起并执行compareAndSwapInt方法比较内存中的值也是3 成功修改内存的值为4 线程B打完收工 一切OK.</p><p> 4.这是线程A恢复,执行compareAndSwapInt方法比较,发现自己手里的数值和内存中的数字4不一致,说明该值已经被其他线程抢先一步修改了,那A线程修改失败,只能重新来一遍了.</p><p> 5.线程A重新获取value值,因为变量value是volatile修饰,所以其他线程对他的修改,线程A总是能够看到,线程A继续执行compareAndSwapInt方法进行比较替换,直到成功.</p><p>底层汇编</p><p>简单版小总结</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CAS(CompareAndSwap)</span><br><span class="line">比较当前工作内存中的值和主内存中的值，如果相同则执行规定操作，否则继续比较直到主内存和工作内存中的值一致为止。</span><br><span class="line"></span><br><span class="line">CAS应用</span><br><span class="line">CAS有三个操作数，内存值V，旧的预期值A，要修改的更新值B。</span><br><span class="line">当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</span><br></pre></td></tr></table></figure><p>底层原理详解</p><p>1.AtomicInteger里面的value原始值为3,即主内存中AtomicInteger的value为3,根据JMM模型,线程A和线程B各自持有一份值为3的value的副本分别到各自的工作内存.</p><p>2.线程A通过getIntVolatile(var1,var2) 拿到value值3,这是线程A被挂起.</p><p>3.线程B也通过getIntVolatile(var1,var2) 拿到value值3,此时刚好线程B没有被挂起并执行compareAndSwapInt方法比较内存中的值也是3 成功修改内存的值为4 线程B打完收工 一切OK.</p><p>4.这是线程A恢复,执行compareAndSwapInt方法比较,发现自己手里的数值和内存中的数字4不一致,说明该值已经被其他线程抢先一步修改了,那A线程修改失败,只能重新来一遍了.</p><p>5.线程A重新获取value值,因为变量value是volatile修饰,所以其他线程对他的修改,线程A总是能够看到,线程A继续执行compareAndSwapInt方法进行比较替换,直到成功</p><p>原子整形之所以在i++这种多线程的环境下面，不用加synchronized，就凭着底层的Unsafe类也能来保证原子性，来保证线程安全，是因为Unsafe是CAS的核心类，CAS是比较并交换</p><p>因为Unsafe类是根据内存偏移地址来获取数据的</p><p>3.CAS缺点</p><p>多次比较循环时间长开销很大</p><p>只能保证一个共享变量的原子性</p><p>引出来ABA问题???</p><p>二句话讲述：</p><p>1、synchronized加锁，一致性保证，并发性下降</p><p>2、CAS不加锁，保证一致性，但是它需要多次比较，耗时时间长，开销很大。</p><h4 id="3-原子类AtomicInteger的ABA问题谈谈-原子更新引用知道吗"><a href="#3-原子类AtomicInteger的ABA问题谈谈-原子更新引用知道吗" class="headerlink" title="3.原子类AtomicInteger的ABA问题谈谈?原子更新引用知道吗"></a>3.原子类AtomicInteger的ABA问题谈谈?原子更新引用知道吗</h4><p>ABA问题的产生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CAS会导致&quot;ABA&quot;问题。</span><br><span class="line">CAS算法实现一个重要的前提需要取出内存中某时刻的数据并在当下时刻比较替换，那么在这个时间差内会导致数据的变化。</span><br><span class="line">比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B，如何线程two又将V位置的数据变成了A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功</span><br><span class="line">尽管线程one的CAS操作成功，但是不代表这个过程是没有问题的。</span><br></pre></td></tr></table></figure><p>原子引用</p><p>时间戳原子引用</p><p>ABAdemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description: ABA问题的解决</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-12 21:30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABADemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicReference&lt;Integer&gt; atomicReference=<span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; stampedReference=<span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===以下是ABA问题的产生===&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>);</span><br><span class="line">            atomicReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//先暂停1秒 保证完成ABA</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            System.out.println(atomicReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>)+<span class="string">&quot;\t&quot;</span>+atomicReference.get());</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">2</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;===以下是ABA问题的解决===&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 第1次版本号&quot;</span>+stamp+<span class="string">&quot;\t值是&quot;</span>+stampedReference.getReference());</span><br><span class="line">            <span class="comment">//暂停1秒钟t3线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line"></span><br><span class="line">            stampedReference.compareAndSet(<span class="number">100</span>,<span class="number">101</span>,stampedReference.getStamp(),stampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 第2次版本号&quot;</span>+stampedReference.getStamp()+<span class="string">&quot;\t值是&quot;</span>+stampedReference.getReference());</span><br><span class="line">            stampedReference.compareAndSet(<span class="number">101</span>,<span class="number">100</span>,stampedReference.getStamp(),stampedReference.getStamp()+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 第3次版本号&quot;</span>+stampedReference.getStamp()+<span class="string">&quot;\t值是&quot;</span>+stampedReference.getReference());</span><br><span class="line">        &#125;,<span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 第1次版本号&quot;</span>+stamp+<span class="string">&quot;\t值是&quot;</span>+stampedReference.getReference());</span><br><span class="line">            <span class="comment">//保证线程3完成1次ABA</span></span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            <span class="keyword">boolean</span> result = stampedReference.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 修改成功否&quot;</span>+result+<span class="string">&quot;\t最新版本号&quot;</span>+stampedReference.getStamp());</span><br><span class="line">            System.out.println(<span class="string">&quot;最新的值\t&quot;</span>+stampedReference.getReference());</span><br><span class="line">        &#125;,<span class="string">&quot;t4&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>规避ABA，解决ABA问题</p><p>就是新增一种机制，那就是增加时间戳，当时间戳跟要对比的时间戳不一致的话，就说明这个数据在中间被修改过</p><h4 id="4-我们知道ArrayList是线程不安全-请编写一个不安全的案例并给出解决方案"><a href="#4-我们知道ArrayList是线程不安全-请编写一个不安全的案例并给出解决方案" class="headerlink" title="4.我们知道ArrayList是线程不安全,请编写一个不安全的案例并给出解决方案"></a>4.我们知道ArrayList是线程不安全,请编写一个不安全的案例并给出解决方案</h4><p>ContainerNotSafeDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * Description: 集合类不安全的问题</span><br><span class="line"> *</span><br><span class="line"> * <span class="meta">@author</span> veliger@<span class="number">163.</span>com</span><br><span class="line"> * <span class="meta">@date</span> <span class="number">2019</span>-<span class="number">04</span>-<span class="number">12</span> <span class="number">22</span>:<span class="number">15</span></span><br><span class="line"> **/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 笔记</span></span><br><span class="line"><span class="comment">     * 写时复制 copyOnWrite 容器即写时复制的容器 往容器添加元素的时候,不直接往当前容器object[]添加,而是先将当前容器object[]进行</span></span><br><span class="line"><span class="comment">     * copy 复制出一个新的object[] newElements 然后向新容器object[] newElements 里面添加元素 添加元素后,</span></span><br><span class="line"><span class="comment">     * 再将原容器的引用指向新的容器 setArray(newElements);</span></span><br><span class="line"><span class="comment">     * 这样的好处是可以对copyOnWrite容器进行并发的读,而不需要加锁 因为当前容器不会添加任何容器.所以copyOnwrite容器也是一种</span></span><br><span class="line"><span class="comment">     * 读写分离的思想,读和写不同的容器.</span></span><br><span class="line"><span class="comment">     *          public boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">     *         final ReentrantLock lock = this.lock;</span></span><br><span class="line"><span class="comment">     *         lock.lock();</span></span><br><span class="line"><span class="comment">     *         try &#123;</span></span><br><span class="line"><span class="comment">     *             Object[] elements = getArray();</span></span><br><span class="line"><span class="comment">     *             int len = elements.length;</span></span><br><span class="line"><span class="comment">     *             Object[] newElements = Arrays.copyOf(elements, len + 1);</span></span><br><span class="line"><span class="comment">     *             newElements[len] = e;</span></span><br><span class="line"><span class="comment">     *             setArray(newElements);</span></span><br><span class="line"><span class="comment">     *             return true;</span></span><br><span class="line"><span class="comment">     *         &#125; finally &#123;</span></span><br><span class="line"><span class="comment">     *             lock.unlock();</span></span><br><span class="line"><span class="comment">     *         &#125;</span></span><br><span class="line"><span class="comment">     *     &#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list= <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.故障现象</span></span><br><span class="line"><span class="comment">         *  java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment">         * 2.导致原因</span></span><br><span class="line"><span class="comment">         *    并发争抢修改导致</span></span><br><span class="line"><span class="comment">         * 3.解决方案</span></span><br><span class="line"><span class="comment">         *  3.1 new Vector&lt;&gt;()</span></span><br><span class="line"><span class="comment">         *  3.2 Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line"><span class="comment">         *  3.3 new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 4.优化建议</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>限制不可以使用vector和Collections工具类解决方案2</p><p>List线程copyOnWriteArrayList</p><p>set线程CopyOnwriteHashSet</p><p>map线程ConcurrentHashMap</p><p>集合的全部讲解代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerNotSafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map =<span class="keyword">new</span>  ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">30</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(),UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNotSafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">30</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">8</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listNotSafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();  <span class="comment">//写时复制技术</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">30</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h4 id="5-公平锁-非公平锁-可重入锁-递归锁-自旋锁谈谈你的理解-请手写一个自旋锁"><a href="#5-公平锁-非公平锁-可重入锁-递归锁-自旋锁谈谈你的理解-请手写一个自旋锁" class="headerlink" title="5.公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解?请手写一个自旋锁"></a>5.公平锁/非公平锁/可重入锁/递归锁/自旋锁谈谈你的理解?请手写一个自旋锁</h4><h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p>是什么</p><p>公平锁、是指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到</p><p>非公平锁、是指在多个线程获取锁的顺序并不是按照申请锁的顺序,有可能后申请的线程比先申请的线程优先获取到锁,在高并发的情况下,有可能造成优先级反转或者饥饿现象</p><p>两者的区别</p><p>公平锁/非公平锁</p><p>并发包ReentrantLock的创建可以指定构造函数的boolean类型来得到公平锁或者非公平锁 默认是非公平锁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关于两者的区别:</span><br><span class="line">公平锁。Threads acqulre a falr lock in the order which they requested it。就是很公平，在并发环境中，每个线程都在获取锁时会先查看此锁维护的等待队列，如果为空，或者当前线程是等待队列的第一个，就占有锁，否则就会加入到等待队列中，以后会按照FIFO的规则从队列中取到自己</span><br><span class="line"></span><br><span class="line">非公平锁:a nonfair lock permits barging threads requesting a lock can jump ahead of the queue of waiting threads if the lock happens to be available when it is requested。非公平锁比较粗鲁，上来就直接尝试占有锁，如果尝试失败，就再采用类似公平锁那种方式。</span><br></pre></td></tr></table></figure><p>题外话</p><p>Java ReentrantLock而言,</p><p>通过构造哈数指定该锁是否是公平锁 默认是非公平锁 非公平锁的优点在于吞吐量必公平锁大.</p><p>对于synchronized而言 也是一种非公平锁.</p><h3 id="可重入锁-又名递归锁"><a href="#可重入锁-又名递归锁" class="headerlink" title="可重入锁(又名递归锁)"></a>可重入锁(又名递归锁)</h3><p>是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可重入锁，也叫递归锁</span><br><span class="line">指的是同一线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁</span><br><span class="line">也即是说，线程可以进入任何一个它已经拥有的锁所同步者的代码块。</span><br></pre></td></tr></table></figure><p>ReentrantLock/synchronized就是一个典型的可重入锁</p><p>可重入锁最大的作用就是避免死锁</p><p>ReenterLockDemo</p><p>参考1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.atguigu.interview.study.thread;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\tsendSms&quot;</span>);</span><br><span class="line">        sendEmail();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\tsendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *  可重入锁(也叫做递归锁)</span></span><br><span class="line"><span class="comment"> *  指的是同一先生外层函数获得锁后,内层敌对函数任然能获取该锁的代码</span></span><br><span class="line"><span class="comment"> *  在同一线程外外层方法获取锁的时候,在进入内层方法会自动获取锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  也就是说,线程可以进入任何一个它已经标记的锁所同步的代码块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-12 23:36</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReenterLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * t1 sendSms</span></span><br><span class="line"><span class="comment">     * t1 sendEmail</span></span><br><span class="line"><span class="comment">     * t2 sendSms</span></span><br><span class="line"><span class="comment">     * t2 sendEmail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendSms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendSms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.atguigu.interview.study.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\tget&quot;</span>);</span><br><span class="line">            set();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\tset&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * 可重入锁(也叫做递归锁)</span></span><br><span class="line"><span class="comment"> * 指的是同一先生外层函数获得锁后,内层敌对函数任然能获取该锁的代码</span></span><br><span class="line"><span class="comment"> * 在同一线程外外层方法获取锁的时候,在进入内层方法会自动获取锁</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 也就是说,线程可以进入任何一个它已经标记的锁所同步的代码块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-12 23:36</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReenterLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread-0 get</span></span><br><span class="line"><span class="comment">     * Thread-0 set</span></span><br><span class="line"><span class="comment">     * Thread-1 get</span></span><br><span class="line"><span class="comment">     * Thread-1 set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(phone);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(phone);</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自旋锁(spinlock)</span><br><span class="line">是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这时候的好处是减少线程上下文切换的消耗，缺点是循环会消耗CPU</span><br></pre></td></tr></table></figure><p>SpinLockDemo </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 独占锁(写)/共享锁(读)/互斥锁</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line"> * 资源类</span><br><span class="line"> */</span><br><span class="line">class MyCaChe &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 保证可见性</span><br><span class="line">     */</span><br><span class="line">    private volatile Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    private ReentrantReadWriteLock reentrantReadWriteLock = new ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 写</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param value</span><br><span class="line">     */</span><br><span class="line">    public void put(String key, Object value) &#123;</span><br><span class="line">        reentrantReadWriteLock.writeLock().lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;\t正在写入&quot; + key);</span><br><span class="line">            //模拟网络延时</span><br><span class="line">            try &#123;</span><br><span class="line">                TimeUnit.MICROSECONDS.sleep(300);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;\t正在完成&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            reentrantReadWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    public void get(String key) &#123;</span><br><span class="line">        reentrantReadWriteLock.readLock().lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;\t正在读取&quot;);</span><br><span class="line">            //模拟网络延时</span><br><span class="line">            try &#123;</span><br><span class="line">                TimeUnit.MICROSECONDS.sleep(300);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            Object result = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;\t正在完成&quot; + result);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            reentrantReadWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clearCaChe() &#123;</span><br><span class="line">        map.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Description:</span><br><span class="line"> * 多个线程同时操作 一个资源类没有任何问题 所以为了满足并发量</span><br><span class="line"> * 读取共享资源应该可以同时进行</span><br><span class="line"> * 但是</span><br><span class="line"> * 如果有一个线程想去写共享资源来  就不应该有其他线程可以对资源进行读或写</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 小总结:</span><br><span class="line"> * 读 读能共存</span><br><span class="line"> * 读 写不能共存</span><br><span class="line"> * 写 写不能共存</span><br><span class="line"> * 写操作 原子+独占 整个过程必须是一个完成的统一整体 中间不允许被分割 被打断</span><br><span class="line"> *</span><br><span class="line"> * @author veliger@163.com</span><br><span class="line"> * @date 2019-04-13 0:45</span><br><span class="line"> **/</span><br><span class="line">public class ReadWriteLockDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyCaChe myCaChe = new MyCaChe();</span><br><span class="line">        for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">            final int temp = i;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                myCaChe.put(temp + &quot;&quot;, temp);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">            int finalI = i;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                myCaChe.get(finalI + &quot;&quot;);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><h4 id="6-CountDownLatch-CyclicBarrier-Semaphore使用过吗"><a href="#6-CountDownLatch-CyclicBarrier-Semaphore使用过吗" class="headerlink" title="6.CountDownLatch/CyclicBarrier/Semaphore使用过吗?"></a>6.CountDownLatch/CyclicBarrier/Semaphore使用过吗?</h4><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>让一些线程阻塞直到另外一些完成后才被唤醒</p><p>CountDownLatch主要有两个方法,当一个或多个线程调用await方法时,调用线程会被阻塞.其他线程调用countDown方法计数器减1(调用countDown方法时线程不会阻塞),当计数器的值变为0,因调用await方法被阻塞的线程会被唤醒,继续执行</p><p>CountDownLatchDemo</p><p>关门案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        closeDoor();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关门案例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;上完自习&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t班长锁门离开教室&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>枚举的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * 枚举的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-13 10:14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CountryEnum</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ONE(<span class="number">1</span>, <span class="string">&quot;齐&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TWO(<span class="number">2</span>, <span class="string">&quot;楚&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THREE(<span class="number">3</span>, <span class="string">&quot;燕&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FOUR(<span class="number">4</span>, <span class="string">&quot;赵&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FIVE(<span class="number">5</span>, <span class="string">&quot;魏&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SIX(<span class="number">6</span>, <span class="string">&quot;韩&quot;</span>);</span><br><span class="line"></span><br><span class="line">    CountryEnum(Integer code, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CountryEnum <span class="title">forEach</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        CountryEnum[] countryEnums = CountryEnum.values();</span><br><span class="line">        <span class="keyword">for</span> (CountryEnum countryEnum : countryEnums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == countryEnum.getCode()) &#123;</span><br><span class="line">                <span class="keyword">return</span> countryEnum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>秦灭六国</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        sixCountry();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秦灭六国 一统华夏</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sixCountry</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;国,灭亡&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;, CountryEnum.forEach(i).getName()).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;秦统一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>CyclicBarrier的字面意思是可循环(Cyclic) 使用的屏障(barrier).它要做的事情是,让一组线程到达一个屏障(也可以叫做同步点)时被阻塞,知道最后一个线程到达屏障时,屏障才会开门,所有被屏障拦截的线程才会继续干活,线程进入屏障通过CyclicBarrier的await()方法.</p><p>CyclicBarrierDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier=<span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;召唤神龙&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">             System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 收集到第&quot;</span>+ temp +<span class="string">&quot;颗龙珠&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>信号量的主要用户两个目的,一个是用于多喝共享资源的相互排斥使用,另一个用于并发资源数的控制.</p><p>SemaphoreDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-13 11:08</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟3个停车位</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//模拟6部汽车</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//抢到资源</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t抢到车位&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 停3秒离开车位&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放资源</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-阻塞队列知道吗"><a href="#7-阻塞队列知道吗" class="headerlink" title="7.阻塞队列知道吗?"></a>7.阻塞队列知道吗?</h4><h4 id="队列-阻塞队列"><a href="#队列-阻塞队列" class="headerlink" title="队列+阻塞队列"></a>队列+阻塞队列</h4><p>阻塞队列,顾名思义,首先它是一个队列,而一个阻塞队列在数据结构中所起的作用</p><p> 线程1往阻塞队列中添加元素二线程2从队列中移除元素</p><p>当阻塞队列是空时,从队列中获取元素的操作将会被阻塞.</p><p>当阻塞队列是满时,往队列中添加元素的操作将会被阻塞.</p><p>同样</p><p>试图往已满的阻塞队列中添加新圆度的线程同样也会被阻塞,知道其他线程从队列中移除一个或者多个元素或者全清空队列后使队列重新变得空闲起来并后续新增.</p><p>为什么用?有什么好处?</p><p>在多线程领域:所谓阻塞,在某些情况下会挂起线程(即线程阻塞),一旦条件满足,被挂起的线程优惠被自动唤醒</p><p>为什么需要使用BlockingQueue</p><p>好处是我们不需要关心什么时候需要阻塞线程,什么时候需要唤醒线程,因为BlockingQueue都一手给你包办好了</p><p>在concurrent包 发布以前,在多线程环境下,我们每个程序员都必须自己去控制这些细节,尤其还要兼顾效率和线程安全,而这会给我们的程序带来不小的复杂度.</p><p>BlockingQueue的核心方法</p><table><thead><tr><th>方法类型</th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><table><thead><tr><th>抛出异常</th><th>当阻塞队列满时,再往队列里面add插入元素会抛IllegalStateException: Queue full  当阻塞队列空时,再往队列Remove元素时候回抛出NoSuchElementException</th></tr></thead><tbody><tr><td>特殊值</td><td>插入方法,成功返回true 失败返回false  移除方法,成功返回元素,队列里面没有就返回null</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时,生产者继续往队列里面put元素,队列会一直阻塞直到put数据or响应中断退出  当阻塞队列空时,消费者试图从队列take元素,队列会一直阻塞消费者线程直到队列可用.</td></tr><tr><td>超时退出</td><td>当阻塞队列满时,队列会阻塞生产者线程一定时间,超过后限时后生产者线程就会退出</td></tr></tbody></table><p>架构梳理+种类分析</p><p>架构介绍</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210814165738287.png" alt="image-20210814165738287"></p><p>种类分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayBlockingQueue: 由数组结构组成的有界阻塞队列.</span><br><span class="line">LinkedBlockingQueue: 由链表结构组成的有界(但大小默认值Integer&gt;MAX_VALUE)阻塞队列.</span><br><span class="line">PriorityBlockingQueue:支持优先级排序的无界阻塞队列.</span><br><span class="line">DelayQueue: 使用优先级队列实现的延迟无界阻塞队列.</span><br><span class="line">SynchronousQueue:不存储元素的阻塞队列,也即是单个元素的队列.</span><br></pre></td></tr></table></figure><p>理论</p><p>SynchronousQueue没有容量</p><p>与其他BlcokingQueue不同,SynchronousQueue是一个不存储元素的BlcokingQueue</p><p>每个put操作必须要等待一个take操作,否则不能继续添加元素,反之亦然.</p><p>SynchronousQueueDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description</span></span><br><span class="line"><span class="comment"> * 阻塞队列SynchronousQueue演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-13 13:49</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronousQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t put 1&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t put 2&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t put 3&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;AAA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + blockingQueue.take());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + blockingQueue.take());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + blockingQueue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;BBB&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LinkedTransferQueue:由链表结构组成的无界阻塞队列.</p><p>LinkedBlockingDeque:由了解结构组成的双向阻塞队列</p><p>用在哪里</p><p>生产者消费者模式</p><p>传统版</p><p>ProdConsumerTraditionDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.interview.study.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareData</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span><span class="keyword">throws</span>  Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//1.判断</span></span><br><span class="line">                <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//等待，不能生产</span></span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2.干活</span></span><br><span class="line">                number++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+number);</span><br><span class="line">                <span class="comment">//3.通知唤醒</span></span><br><span class="line">                condition.signalAll();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span><span class="keyword">throws</span>  Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.判断</span></span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待，不能生产</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.干活</span></span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+number);</span><br><span class="line">            <span class="comment">//3.通知唤醒</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 传统的消费者和生产者Demo</span></span><br><span class="line"><span class="comment"> * 题目：一个初始值为零的变量，两个线程对其交替操作，一个加一个减一，来五轮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">ProdConsumer_TraditionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShareData shareData = <span class="keyword">new</span> ShareData();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">5</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    shareData.increment();<span class="comment">//增加</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;AAA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">5</span> ; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    shareData.decrement();<span class="comment">//减</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;BBB&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阻塞队列版</p><p>ProdConsumerBlockQueueDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hhf.interview.study.thread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hhf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-05-07 17:03</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * valatile/cas/atomicInteger/BlockQueue/线程交互/原子引用整合的生产者消费者案例</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> FLAG = <span class="keyword">true</span>; <span class="comment">//默认开启，进行生产+消费</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyResource</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">        System.out.println(blockingQueue.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyProd</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> retValue ; <span class="comment">//默认是false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (FLAG)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//往阻塞队列填充数据</span></span><br><span class="line">            data = atomicInteger.incrementAndGet()+<span class="string">&quot;&quot;</span>;<span class="comment">//等于++i的意思</span></span><br><span class="line">            retValue = blockingQueue.offer(data,<span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (retValue)&#123; <span class="comment">//如果是true，那么代表当前这个线程插入数据成功</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t插入队列&quot;</span>+data+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;  <span class="comment">//那么就是插入失败</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t插入队列&quot;</span>+data+<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果FLAG是false了，马上打印</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t大老板叫停了，表示FLAG=false,生产结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyConsumer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (FLAG) &#123; <span class="comment">//开始消费</span></span><br><span class="line">            <span class="comment">//两秒钟等不到生产者生产出来的数据就不取了</span></span><br><span class="line">            result = blockingQueue.poll(<span class="number">2L</span>,TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == result || result.equalsIgnoreCase(<span class="string">&quot;&quot;</span>))&#123; <span class="comment">//如果取不到数据了</span></span><br><span class="line">                FLAG = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 超过两秒钟没有取到数据，消费退出&quot;</span>);</span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">return</span>;<span class="comment">//退出</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t消费队列数据&quot;</span>+result+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//叫停方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.FLAG = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProdConsumer_BlockQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        MyResource myResource = <span class="keyword">new</span> MyResource(<span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 生产线程启动&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                myResource.MyProd();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;Prod&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 消费线程启动&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                myResource.MyConsumer();</span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;Consumer&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">5</span>); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;5秒钟时间到，大bossMain主线程叫停，活动结束&quot;</span>);</span><br><span class="line">        myResource.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>线程池</p><p>消息中间件</p><h4 id="8-请您说说synchronized和Lock的区别？用lock有什么好处？"><a href="#8-请您说说synchronized和Lock的区别？用lock有什么好处？" class="headerlink" title="8.请您说说synchronized和Lock的区别？用lock有什么好处？"></a>8.请您说说synchronized和Lock的区别？用lock有什么好处？</h4><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p>1、synchronized是JVM层面，它是JAVA的关键字</p><p>2、synchronized是不需要手动释放锁，当synchronized代码执行完以后，系统会自动让线程释放对锁的占用</p><p>3、synchronized不能中断，除非是抛出了异常或者是正常执行完成</p><p>4、synchronized是非公平锁</p><p> 5、synchronized不支持精确唤醒，只能随机唤醒或者是唤醒全部线程</p><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><p>1、Lock是API层面的具体类，它是java5以后新出的一个类</p><p>2、lock就需要手动去释放锁，若没有主动的去释放锁，就可能导致死锁的现象</p><p>3、lock是可以中断的，主要是设置超时的方法，</p><p>4、lock默认是非公平锁，但是也支持公平锁</p><p>5、lock可支持精确唤醒</p><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">用lock的好处就是：</span><br><span class="line"></span><br><span class="line">lock可以支持锁绑定多个Condition，进行精确唤醒，并且还可中断lock</span><br><span class="line"></span><br><span class="line">#### <span class="number">9.</span>已经有Runnable接口，为什么还要出现Callable接口？请你谈谈它的诞生的前身背景？</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、因为并发，异步导致Callable接口的出现</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、主要是用Callable，能够实现当多个任务执行当中，若有一个任务完成的耗时时间比较长</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、那么可以先将其他任务先完成，然后等待这个耗时比较长的任务结束以后一起进行总的计算</span><br><span class="line"></span><br><span class="line">#### <span class="number">10.</span>线程池用过吗?ThreadPoolExecutor谈谈你的理解?</span><br><span class="line"></span><br><span class="line">为什么使用线程池,优势</span><br><span class="line"></span><br><span class="line">线程池做的工作主要是控制运行的线程的数量,处理过程中将任务加入队列,然后在线程创建后启动这些任务,如果先生超过了最大数量,超出的数量的线程排队等候,等其他线程执行完毕,再从队列中取出任务来执行.</span><br><span class="line"></span><br><span class="line">他的主要特点为:线程复用:控制最大并发数:管理线程.</span><br><span class="line"></span><br><span class="line">第一:降低资源消耗.通过重复利用自己创建的线程降低线程创建和销毁造成的消耗.</span><br><span class="line"></span><br><span class="line">第二: 提高响应速度.当任务到达时,任务可以不需要等到线程和粗昂就爱你就能立即执行.</span><br><span class="line"></span><br><span class="line">第三: 提高线程的可管理性.线程是稀缺资源,如果无限的创阿金,不仅会消耗资源,还会较低系统的稳定性,使用线程池可以进行统一分配,调优和监控.</span><br><span class="line"></span><br><span class="line">#### 线程池如何使用?</span><br><span class="line"></span><br><span class="line">架构实现</span><br><span class="line"></span><br><span class="line">Java中的线程池是通过Executor框架实现的,该框架中用到了Executor,Executors,ExecutorService,ThreadPoolExecutor这几个类.</span><br><span class="line"></span><br><span class="line">编码实现</span><br><span class="line"></span><br><span class="line">了解</span><br><span class="line"></span><br><span class="line">Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">java8新出</span><br><span class="line"></span><br><span class="line">Executors.newWorkStealingPool(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">java8新增,使用目前机器上可以的处理器作为他的并行级别</span><br><span class="line"></span><br><span class="line">重点</span><br><span class="line"></span><br><span class="line">Executors.newFixedThreadPool(<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">主要特点如下:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.创建一个定长线程池,可控制线程的最大并发数,超出的线程会在队列中等待.<br>2.newFixedThreadPool创建的线程池corePoolSize和MaxmumPoolSize是 相等的,它使用的的LinkedBlockingQueue<br>固定线程数的线程池，执行一个长期的任务,性能好很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Executors.newSingleThreadExecutor()</span><br><span class="line"></span><br><span class="line">主要特点如下:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.创建一个单线程化的线程池,它只会用唯一的工作线程来执行任务,保证所有任务都按照指定顺序执行.<br>2.newSingleThreadExecutor将corePoolSize和MaxmumPoolSize都设置为1,它使用的的LinkedBlockingQueue<br>一池一线程，一个任务一个线程执行的任务场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Executors.newCachedThreadPool()</span><br><span class="line"></span><br><span class="line"> 主要特点如下:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.创建一个可缓存线程池,如果线程池长度超过处理需要,可灵活回收空闲线程,若无可回收,则创建新线程.<br>2.newCachedThreadPool将corePoolSize设置为0MaxmumPoolSize设置为Integer.*<strong>MAX_VALUE*</strong>,它使用的是SynchronousQUeue,也就是说来了任务就创建线程运行,如果线程空闲超过60秒,就销毁线程<br>一池多线程，可扩容，带缓冲缓存的，适用:执行很多短期异步的小程序或者负载较轻的服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">线程池几个重要参数介绍?</span><br><span class="line"></span><br><span class="line">7大参数</span><br><span class="line"></span><br><span class="line">![image-20210815103623389](2021-07-23-faceQuestions/image-20210815103623389.png)</span><br><span class="line"></span><br><span class="line">1.corePoolSize:线程池中的常驻核心线程数</span><br><span class="line"></span><br><span class="line">1.在创建了线程池后,当有请求任务来之后,就会安排池中的线程去执行请求任务,近视理解为今日当值线程</span><br><span class="line"></span><br><span class="line">2.当线程池中的线程数目达到corePoolSize后,就会把到达的任务放入到缓存队列当中.</span><br><span class="line"></span><br><span class="line">2.maximumPoolSize:线程池能够容纳同时执行的最大线程数,此值大于等于1</span><br><span class="line"></span><br><span class="line">3.keepAliveTime:多余的空闲线程存活时间,当空间时间达到keepAliveTime值时,多余的线程会被销毁直到只剩下corePoolSize个线程为止</span><br><span class="line"></span><br><span class="line">默认情况下:</span><br><span class="line"></span><br><span class="line">只有当线程池中的线程数大于corePoolSize时keepAliveTime才会起作用,知道线程中的线程数不大于corepoolSIze,</span><br><span class="line"></span><br><span class="line">4.unit:keepAliveTime的单位</span><br><span class="line"></span><br><span class="line">5.workQueue:任务队列,被提交但尚未被执行的任务.</span><br><span class="line"></span><br><span class="line">6.threadFactory:表示生成线程池中工作线程的线程工厂,用户创建新线程,一般用默认即可</span><br><span class="line"></span><br><span class="line">7.handler:拒绝策略,表示当线程队列满了并且工作线程大于等于线程池的最大显示 数(maxnumPoolSize)时如何来拒绝.</span><br><span class="line"></span><br><span class="line">#### 说说线程池的底层工作原理?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.在创建了线程池后，等待提交过来的任务请求。<br>2.当调用execute()方法添加一个请求任务时，线程池会做如下判断，<br>    1、如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务<br>    2、如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列<br>    3、如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务<br>    4、如果这时候队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。<br>3.当一个线程完成任务时，它会从队列中取下中取下一个任务来执行。<br>4.当一个线程无事可做超过一定的时间(keepAliveTime)时，线程池会判断，如果当前运行的线程数大于corePoolSize，那么这个线程会被停掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">更加容易理解的工作原理解释</span><br><span class="line"></span><br><span class="line">1.假设一开始只有两个核心线程（既corePoolSize），请求的数量也只能两个，但在后面请求的数量越来越多，在队列（既BlockingQueue）这里等待的人爆满了</span><br><span class="line"></span><br><span class="line">2.那么maximumPool就会开启最大非核心线程数来进行处理请求的数量，但是若在BlockingQueue这里等待的人已经爆满了，最大线程数和队列都爆满了，</span><br><span class="line"></span><br><span class="line">3.那么handler就会开始拒绝其他正在大量的请求进来。</span><br><span class="line"></span><br><span class="line">4.如果后期慢慢的请求量越来越少，也即请求量的数量开始少于目前线程的数量，那么此时线程池就会开始对目前已经空余的线程进行一段时间的等待， 若此时这等待的时间中，无再有更多更大量的请求量进来，也即现在来的请求数量里只需核心线程就能够处理的话，那么就会把多余的线程进行销毁，直至剩下两个核心线程（既corePoolSize）。</span><br><span class="line"></span><br><span class="line">#### 线程池用过吗?生产上你是如何设置合理参数</span><br><span class="line"></span><br><span class="line">线程池的拒绝策略请你谈谈</span><br><span class="line"></span><br><span class="line">是什么</span><br><span class="line"></span><br><span class="line">等待队列也已经排满了,再也塞不下新的任务了</span><br><span class="line"></span><br><span class="line">同时，线程池的max也到达了,无法接续为新任务服务，这时我们需要拒绝策略机制合理的处理这个问题.</span><br><span class="line"></span><br><span class="line">JDK内置的拒绝策略</span><br><span class="line"></span><br><span class="line">AbortPolicy(默认):直接抛出RejectedException异常阻止系统正常运行</span><br><span class="line"></span><br><span class="line">CallerRunPolicy:&quot;调用者运行&quot;一种调节机制,该策略既不会抛弃任务,也不会抛出异常,而是将某些任务回退到调用者，从而降低新任务的流量。</span><br><span class="line"></span><br><span class="line">DiscardOldestPolicy:抛弃队列中等待最久的任务,然后把当前任务加入队列中尝试再次提交当前任务</span><br><span class="line"></span><br><span class="line">DiscardPolicy:直接丢弃任务,不予任何处理也不抛出异常.如果允许任务丢失,这是最好的一种拒绝策略方案</span><br><span class="line"></span><br><span class="line">以上内置策略均实现了RejectExecutionHandler接口</span><br><span class="line"></span><br><span class="line">#### 你在工作中单一的/固定数的/可变你的三种创建线程池的方法,你用哪个多?超级大坑</span><br><span class="line"></span><br><span class="line">答案是一个都不用,我们生产上只能使用自定义的线程池，也即手写线程池</span><br><span class="line"></span><br><span class="line">Executors中JDK给你提供了，为什么不用?</span><br><span class="line"></span><br><span class="line">参考阿里巴巴java开发手册</span><br><span class="line"></span><br><span class="line">【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。 </span><br><span class="line"></span><br><span class="line">【强制】线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。说明：Executors返回的线程池对象的弊端如下：</span><br><span class="line"></span><br><span class="line">1）FixedThreadPool和SingleThreadPool:允许的请求队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM。</span><br><span class="line"></span><br><span class="line">2）CachedThreadPool和ScheduledThreadPool:允许的创建线程数量为Integer.MAX_VALUE，可能会创建大量的线程，从而导致OOM。</span><br><span class="line"></span><br><span class="line">#### 你在工作中是如何创建线程池的,是否自定义过线程池使用</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.hhf.interview.study.thread;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author: hhf</span><br><span class="line"> * @create: 2020-05-08 09:34</span><br><span class="line"> *</span><br><span class="line"> * ThreadPoolExecutor</span><br><span class="line"> * 第四种获得/使用java多线程的方式，线程池</span><br><span class="line"> **/</span><br><span class="line">public class MyThreadPoolDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 手写线程池</span><br><span class="line">         */</span><br><span class="line">        ExecutorService threadPool = new ThreadPoolExecutor(</span><br><span class="line">                2,</span><br><span class="line">                5,</span><br><span class="line">                1L,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                new LinkedBlockingQueue&lt;Runnable&gt;(3),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                new ThreadPoolExecutor.DiscardPolicy());</span><br><span class="line">        //最多几个人来办理业务，线程池会爆？</span><br><span class="line">        try&#123;</span><br><span class="line">            //模拟10个用户来办理业务，每个用户就是一个来自外部的请求线程</span><br><span class="line">            for (int i = 1; i &lt;=15 ; i++) &#123;</span><br><span class="line">                threadPool.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+&quot;\t 办理业务&quot;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * jdk自带的线程池</span><br><span class="line">     */</span><br><span class="line">    private static void threadPoolInit() &#123;</span><br><span class="line">        //  System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(5);//一池5个处理线程</span><br><span class="line">        //ExecutorService threadPool = Executors.newSingleThreadExecutor();//一池1个处理线程</span><br><span class="line">        //ExecutorService threadPool = Executors.newCachedThreadPool();//一池N个处理线程</span><br><span class="line">        try&#123;</span><br><span class="line">                //模拟10个用户来办理业务，每个用户就是一个来自外部的请求线程</span><br><span class="line">                for (int i = 1; i &lt;=10 ; i++) &#123;</span><br><span class="line">                    threadPool.execute(()-&gt;&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+&quot;\t 办理业务&quot;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                    try &#123; TimeUnit.MILLISECONDS.sleep(200); &#125;catch (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;catch (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;finally &#123;</span><br><span class="line">                threadPool.shutdown();</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合理配置线程池你是如何考虑的"><a href="#合理配置线程池你是如何考虑的" class="headerlink" title="合理配置线程池你是如何考虑的?"></a>合理配置线程池你是如何考虑的?</h4><p>CPU密集型</p><p>System.out.println(Runtime.<em>getRuntime</em>().availableProcessors());查看CPU核数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。</span><br><span class="line">CPU密集任务只有在真正的多核CPU上才可能得到加速(通过多线程)</span><br><span class="line">而在单核CPU上，无论开几个模拟的多线程，该任务都不可能得到加速，因为CPU总的运算能力就那些。</span><br><span class="line"></span><br><span class="line">CPU密集型任务配置尽可能少的线程数量:一般公式:CPU核数+1个线程的线程池。</span><br></pre></td></tr></table></figure><p>IO密集型</p><p>1、由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数*2</p><p>2、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IO密集型，即该任务需要大量的IO，即大量的阻塞</span><br><span class="line">在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待</span><br><span class="line">所以在IO密集型任务中使用多线程可以大大的加速程序的运行，即是在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞实践。</span><br><span class="line"></span><br><span class="line">IO密集型时，大部分线程都阻塞，顾需要配置多线程数:</span><br><span class="line">参考公式:CPU核数/1-阻塞系数，阻塞系数在0.8-0.9之间</span><br><span class="line">比如8核CPU:8/1-0.9=80个线程数</span><br></pre></td></tr></table></figure><p>1、看公司业务是CPU密集型还是IO密集型的，这两种不一样，来决定线程池线程数的最佳合理配置数</p><p>2、先查看服务器是几核的，调用Runtime.getRuntime().availableProcessors()这个方法来查看核数。</p><h4 id="死锁编码及定位分析"><a href="#死锁编码及定位分析" class="headerlink" title="死锁编码及定位分析"></a>死锁编码及定位分析</h4><p>是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">死锁是指两个或两个以上的进程在执行过程中，因争夺资源而操作的一种互相等待的现象，若无外力干涉，那他们都将无法推进下去。如果系统资源足够充足，进程的资源请求都能得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815153926222.png" alt="image-20210815153926222"></p><p>产生死锁的主要原因</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统资源不足</span><br><span class="line">进程运行推进的顺序不合适</span><br><span class="line">资源分配不当</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> String lockB;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoldThread</span><span class="params">(String lockA, String lockB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockA = lockA;</span><br><span class="line">        <span class="keyword">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 自己持有锁&quot;</span> + lockA + <span class="string">&quot;尝试获得&quot;</span> + lockB);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 自己持有锁&quot;</span> + lockB + <span class="string">&quot;尝试获得&quot;</span> + lockA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * 死锁是指两个或者以上的进程在执行过程中,</span></span><br><span class="line"><span class="comment"> * 因争夺资源而造成的一种相互等待的现象,</span></span><br><span class="line"><span class="comment"> * 若无外力干涉那他们都将无法推进下去</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> veliger@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-04-14 0:05</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String lockA = <span class="string">&quot;lockA&quot;</span>;</span><br><span class="line">        String lockB = <span class="string">&quot;lockB&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldThread(lockA, lockB), <span class="string">&quot;threadAAA&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldThread(lockB, lockA), <span class="string">&quot;threadBBB&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决</p><p>jps命令定位进程编号</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815154145377.png" alt="image-20210815154145377"></p><p>jstack找到死锁查看</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815154205178.png" alt="image-20210815154205178"></p><h2 id="多线程常问面试题"><a href="#多线程常问面试题" class="headerlink" title="多线程常问面试题"></a>多线程常问面试题</h2><h4 id="创建多线程的方式有多少种？"><a href="#创建多线程的方式有多少种？" class="headerlink" title="创建多线程的方式有多少种？"></a>创建多线程的方式有多少种？</h4><p>答：创建多线程的方式以前有两种，现在有四种。</p><h4 id="start-以后是不是马上就启动这个线程？"><a href="#start-以后是不是马上就启动这个线程？" class="headerlink" title=".start()以后是不是马上就启动这个线程？"></a>.start()以后是不是马上就启动这个线程？</h4><p>答： 不是 因为多线程是跟操作系统有关系的，一旦.start()以后这个线程就变成了就绪状态</p><p>那什么时候运行这个.start()方法？</p><p>答：不知道的，这个要等待CPU操作系统的底层调度通知</p><h4 id="JAVA多线程有几种状态？"><a href="#JAVA多线程有几种状态？" class="headerlink" title="JAVA多线程有几种状态？"></a>JAVA多线程有几种状态？</h4><p>NEW</p><p>新建</p><p>RUNNABLE,</p><p>就绪，可运行</p><p>BLOCKED,</p><p>阻塞</p><p>什么时候进入到这个阻塞状态？</p><p>Thread.sleep();和t1.wait();都会导致阻塞，那么请说说他们之间的区别？</p><p>wait/sleep</p><p>功能都是当前线程暂停，有什么区别？</p><p>wait放开手去睡，放开手里的锁 不放权<br> sleep握紧手去睡，醒了手里还有锁 放权</p><p>WAITING,</p><p> 一直等</p><p>TIMED_WAITING</p><p>设置时间的等</p><p>TIMED_WAITING和WAITING,的区别：</p><p>答:在于一个没有设置时间，一个设置了时间</p><p>TERMINATED</p><h4 id="接口能不能new？"><a href="#接口能不能new？" class="headerlink" title="接口能不能new？"></a>接口能不能new？</h4><p>可以new，创建匿名内部类</p><h4 id="接口里面能不能有方法的实现？"><a href="#接口里面能不能有方法的实现？" class="headerlink" title="接口里面能不能有方法的实现？"></a>接口里面能不能有方法的实现？</h4><p>在java8以前是不可以的，但是在java8以后就支持了</p><p>java8之前规定接口里面只允许有方法的声明，不能有方法的实现，但是java8以后允许有部分的方法实现</p><h4 id="说说你对lock的理解？"><a href="#说说你对lock的理解？" class="headerlink" title="说说你对lock的理解？"></a>说说你对lock的理解？</h4><p>答：Lock是跟Condition配合起来用的，精准通知，精准唤醒</p><p>多线程的8锁</p><p>8锁的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//tsleep</span></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">4</span>); &#125;<span class="keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----sendEmail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----sendSMS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程8锁</span></span><br><span class="line"><span class="comment"> *  1.标准访问：请问先打印邮件还是短信？ //先打印邮件</span></span><br><span class="line"><span class="comment"> *  2.邮件方法暂停4秒钟 请问先打印邮件还是短信？ 先打印邮件</span></span><br><span class="line"><span class="comment"> *  3.新增一个普通方法hello()，请问先打印邮件还是hello？  先打印hello</span></span><br><span class="line"><span class="comment"> *  4.有两部手机，请问先打印邮件还是短信？  先打印短信</span></span><br><span class="line"><span class="comment"> *  5.两个静态同步方法，同一部手机，请问先打印邮件还是短信？  先打印邮件</span></span><br><span class="line"><span class="comment"> *  6.两个静态同步方法，两部手机，请问先打印邮件还是短信？ 先打印邮件</span></span><br><span class="line"><span class="comment"> *  7.一个普通同步方法,一个静态同步方法，一部手机，请问先打印邮件还是短信？   先打印短信</span></span><br><span class="line"><span class="comment"> * 8.一个普通同步方法,一个静态同步方法，两部手机，请问先打印邮件还是短信？  先打印短信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        Phone phone2 = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendEmail();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//phone.sendSMS();</span></span><br><span class="line">               <span class="comment">// phone.hello();</span></span><br><span class="line">                phone2.sendSMS();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.标准访问：请问先打印邮件还是短信？</p><p>解答：先打印邮件</p><p>  Relationship  </p><p>一个对象里面如果有多个synchronized方法，那么在某一时刻内，只要一个线程去调用其中的一个synchronized方法了，其它的线程都只能等待</p><p>换句话说，某一时刻内，只能有唯一一个线程去访问这些synchronized方法，锁的是当前对象this，被锁定后，其它的线程都不能进入到当前对象的其它的synchronized方法 - points to 解答：先打印邮件</p><p>2.邮件方法暂停4秒钟 请问先打印邮件还是短信？</p><p>解答：先打印邮件</p><p>  Relationship  </p><p> 一个对象里面如果有多个synchronized方法，那么在某一时刻内，只要一个线程去调用其中的一个synchronized方法了，其它的线程都只能等待  ，换句话说，某一时刻内，只能有唯一一个线程去访问这些synchronized方法，锁的是当前对象this，被锁定后，其它的线程都不能进入到当前对象的其它的synchronized方法  - begins at 解答：先打印邮件</p><p>3.新增一个普通方法hello()，请问先打印邮件还是hello？</p><p>答：先打印hello，因为加个普通方法后发现和同步锁无关</p><p>4.有两部手机，请问先打印邮件还是短信？</p><p>答：先打印短信 因为换成两个对象后，不是同一把锁了，情况就立刻发生变化</p><p>5.两个静态同步方法，同一部手机，请问先打印邮件还是短信？</p><p>答：先打印邮件，因为都换成静态同步方法后，情况又变化</p><p>6.两个静态同步方法，两部手机，请问先打印邮件还是短信？</p><p>答：先打印邮件</p><p>7.一个普通同步方法,一个静态同步方法，一部手机，请问先打印邮件还是短信？</p><p>答：先打印短信</p><p>8.一个普通同步方法,一个静态同步方法，两部手机，请问先打印邮件还是短信？</p><p>答：先打印短信</p><h4 id="创建多线程的区别"><a href="#创建多线程的区别" class="headerlink" title="创建多线程的区别"></a>创建多线程的区别</h4><p>Runnable和Callable接口的区别在哪？</p><p>·答；方法不同，一个叫run方法无泛型并无返回值并且不带异常，一个叫call带有泛型并有返回值且带异常</p><p>为啥Runnable好端端的不用，用Callable接口？</p><h4 id="为什么要用CAS，而不是用synchronized？"><a href="#为什么要用CAS，而不是用synchronized？" class="headerlink" title="为什么要用CAS，而不是用synchronized？"></a>为什么要用CAS，而不是用synchronized？</h4><p>1、synchronized加锁，同一时间段只允许有一个线程来访问，一致性确实得到了保障，但是并发性下降</p><p>2、用CAS的话，是没有加锁的，可以反复的通过CAS进行比较，直到比较成功为止，这样既保证了一致性又提高了并发性</p><h2 id="其他集合等的常问面试题"><a href="#其他集合等的常问面试题" class="headerlink" title="其他集合等的常问面试题"></a>其他集合等的常问面试题</h2><p>集合类安全与不安全</p><p>ArrayList是线程不安全的</p><p>如何解决？</p><p>答：使用CopyOnWriteArrayList来解决</p><p>扩容</p><p>ArrayList扩容到原来的一半</p><p>Vector是线程安全的。它是线程安全的，能保证数据的一致性，但是性能慢</p><p>HashMap是线程不安全</p><p>如何解决？</p><p>答：使用ConcurrentHashMap来解决</p><p>怎么优化HashMap?</p><p>可以把它的hash值设大一点来避免原始的扩容</p><p>HashSet是线程不安全</p><p>如何解决？</p><p>答：使用CopyOnWriteArraySet解决</p><h4 id="请说一下你遇过的印象深刻的故障"><a href="#请说一下你遇过的印象深刻的故障" class="headerlink" title="请说一下你遇过的印象深刻的故障"></a>请说一下你遇过的印象深刻的故障</h4><p>java.util.ConcurrentModificationException 俗称：并发修改异常</p><p>原理：</p><p>  CopyOnWrite容器即写时复制的容器。往一个容器添加元素的时候，不直接往当前容器Object[]添加，而是先将当前容器Object[]进行Copy，复制出一个新的容器Object[] newElements，然后新的容器Object[] newElements里添加元素，添加完元素之后，再将原容器的引用指向新的容器 setArray(newElements);。这样做的好处是可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器</p><p>导致的原因？</p><p>因为ArrayList.add线程是不安全的，并发的时候，没加锁</p><p>解决方案：</p><p>1、用 Vector来解决  它是线程安全的，能保证数据的一致性，但是性能慢</p><p>2、 Collections.synchronizedList(new ArrayList&lt;&gt;()); 把线程不安全的ArrayList转换成线程安全的  小数据量的时候可以用这种解决方案</p><p>3、 用CopyOnWriteArrayList来解决， 性能很高（优先推荐）</p><p>请告诉我五个常见的java异常</p><p>我主要在高并发多线程的电商系统里面遇到过java.util.ConcurrentModificationException这种并发修改异常</p><h4 id="请问HashSet底层数据结构是啥？"><a href="#请问HashSet底层数据结构是啥？" class="headerlink" title="请问HashSet底层数据结构是啥？"></a>请问HashSet底层数据结构是啥？</h4><p>答：HashSet底层是HashMap。</p><p>那么请你回答我，为啥HashSet只需要填一个数据进去，而HashMap是要填两个数据进去的，但HashMap是键值对这种的，这根本不匹配啊？</p><p>答：HashSet底层一定是HashMap，这个我看过源码，不可能错。 因为HashSet底层的add添加方法调的就是HashMap的put方法 HashSet填一个数据进去，而HashMap是要填两个数据进去的，这是因为HashSet当中添加进去的一个元素就是HashMap的key，那么value永远就是一个object的常量固定写死的</p><p>请问HashMap的底层结构是啥？</p><p>答：HashMap&lt;&gt;()存储的不是键值对类型的，是存储一个个的node类型的节点; 这个node里面存键值对，底层是node的数组+node的链表+node的红黑树</p><p>HashMap&lt;&gt;的初始值数组长度是：16，负载因子是0.75。</p><p>负载因子能不能改？</p><p>答：可以改，但一般很少人去改这个负载因子，因为够用</p><p>负载因子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">负载因子是和扩容机制有关的，意思是如果当前容器的容量，达到了我们设定的最大值，就要开始执行扩容操作。举个例子来解释，避免小白听不懂：</span><br><span class="line"></span><br><span class="line">比如说当前的容器容量是16，负载因子是0.75,16*0.75=12，也就是说，当容量达到了12的时候就会进行扩容操作。</span><br><span class="line"></span><br><span class="line">他的作用很简单，相当于是一个扩容机制的阈值。当超过了这个阈值，就会触发扩容机制。HashMap源码已经为我们默认指定了负载因子是0.75。</span><br></pre></td></tr></table></figure><h1 id="2、JUC多线程之异步编排"><a href="#2、JUC多线程之异步编排" class="headerlink" title="2、JUC多线程之异步编排"></a>2、JUC多线程之异步编排</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p>无法拿到返回值</p><ul><li><p>继承Thread</p></li><li><p>实现Runable</p></li></ul><p>可以拿到返回值</p><ul><li><p>Callable</p></li><li><p>Future</p></li></ul><p>CompletableFuture</p><p>1、创建CompletableFuture对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt;   **runAsync**(Runnable runnable);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt;   **runAsync**(Runnable runnable, Executor executor);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt;   **supplyAsync**(Supplier&lt;U&gt; supplier);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt;   **supplyAsync**(Supplier&lt;U&gt; supplier, Executor executor)</span><br></pre></td></tr></table></figure><p>总结</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以Async结尾并且没有指定Executor的方法会使用ForkJoinPool.commonPool() 作为它的线程池执行异步代码。</span><br><span class="line">runAsync方法：它以Runnabel函数式接口类型为参数，所以CompletableFuture的计算结果为空。</span><br><span class="line">supplyAsync方法以Supplier&lt;U&gt;函数式接口类型为参数，CompletableFuture的计算结果类型为U。</span><br><span class="line">这些线程都是Daemon线程，主线程结束Daemon线程不结束，只有JVM关闭时，生命周期终止。</span><br></pre></td></tr></table></figure><p>·     示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//长时间的计算任务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;计算型任务开始&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;计算型任务结束&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;·00&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、计算结果完成时的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">·     <span class="keyword">public</span> CompletableFuture&lt;T&gt;   **whenComplete**(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action)</span><br><span class="line"></span><br><span class="line">·     <span class="keyword">public</span> CompletableFuture&lt;T&gt;   **whenCompleteAsync**(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action)</span><br><span class="line"></span><br><span class="line">·     <span class="keyword">public</span> CompletableFuture&lt;T&gt;   **whenCompleteAsync**(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action, Executor executor)</span><br><span class="line"></span><br><span class="line">·     <span class="keyword">public</span> CompletableFuture&lt;T&gt;   **exceptionally**(Function&lt;Throwable,? extends T&gt; fn)</span><br></pre></td></tr></table></figure><p>可以看到Action的类型是BiConsumer&lt;? super T,? super Throwable&gt;它<strong>可以处理正常的计算结果，或者异常情况</strong>。</p><p>方法不以Async结尾，意味着Action使用相同的线程执行，而Async可能会使用其他线程执行（如果是使用相同的线程池，也可能会被同一个线程选中执行）</p><p>·     示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(xxxxxxxxxx);</span><br><span class="line">       Future&lt;Integer&gt; f = future.whenComplete((v, e) -&gt; &#123;</span><br><span class="line">           System.out.println(v);</span><br><span class="line">           System.out.println(e);</span><br><span class="line">       &#125;);</span><br><span class="line">       System.out.println(f.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、thenApply</p><p>当前阶段正常完成以后执行，而且当前阶段的执行的结果会作为下一阶段的输入参数。thenApplyAsync默认是异步执行的。这里所谓的异步指的是不在当前线程内执行。</p><p>4、thenAccept与thenRun</p><p>thenAccept和thenRun都是无返回值的。thenApply生产，那么thenAccept和thenRun是在消费。它们是整个计算的最后两个阶段。</p><blockquote><p>同样是执行指定的动作，同样是消耗，二者也有区别：</p><p>thenAccept接收上一阶段的输出作为本阶段的输入<br>thenRun根本不关心前一阶段的输出，根本不不关心前一阶段的计算结果，因为它不需要输入参数</p></blockquote><p>5、thenCombine整合两个计算结果</p><p>例如此阶段与其它阶段一起完成，进而触发下一阶段：</p><p>6、异常处理completeExceptionally</p><p>为了能获取任务线程内发生的异常，需要使用 CompletableFuture的completeExceptionally方法将导致CompletableFuture内发生问题的异常抛出。这样，当执行任务发生异常时，调用get()方法的线程将会收到一个 ExecutionException异常，该异常接收了一个包含失败原因的Exception 参数。</p><p>7、异步编排（多任务组合方法allOf和anyOf）</p><ul><li><p>allOf是等待所有任务完成</p></li><li><p>anyOf是只要有一个任务完成</p></li></ul><p>3、全部代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService executor  =  Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main....start....&quot;</span>);</span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;当前线程：&quot; + Thread.currentThread().getId());</span></span><br><span class="line"><span class="comment">//            int i = 10 / 2;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;运行结果:&quot; + i);</span></span><br><span class="line"><span class="comment">//        &#125;, executor);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;当前线程：&quot; + Thread.currentThread().getId());</span></span><br><span class="line"><span class="comment">//            int i = 10 / 0;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;运行结果:&quot; + i);</span></span><br><span class="line"><span class="comment">//            return i;</span></span><br><span class="line"><span class="comment">//        &#125;, executor).whenComplete((res,excption)-&gt;&#123; //虽然能得到异常信息，但是没法修改返回数据</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;异步任务成功完成了...结果是:&quot;+res+&quot;；异常信息是&quot;+excption);</span></span><br><span class="line"><span class="comment">//        &#125;).exceptionally(throwable -&gt; &#123;  //可以感知异常，同时返回默认值</span></span><br><span class="line"><span class="comment">//            return 10;</span></span><br><span class="line"><span class="comment">//        &#125;); //成功以后干啥事</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;当前线程：&quot; + Thread.currentThread().getId());</span></span><br><span class="line"><span class="comment">//            int i = 10 / 4;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;运行结果:&quot; + i);</span></span><br><span class="line"><span class="comment">//            return i;</span></span><br><span class="line"><span class="comment">//        &#125;, executor).handle((res,thr)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            if (res!=null)&#123;</span></span><br><span class="line"><span class="comment">//                return res * 2;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (thr!=null)&#123;  //异常不等于空了，就返回0</span></span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return 0;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程的串行化</span></span><br><span class="line"><span class="comment">         * 1.thenRun:不能获取到上一步的执行结果</span></span><br><span class="line"><span class="comment">         * .thenRunAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">         *             System.out.println(&quot;任务2启动了...&quot;);</span></span><br><span class="line"><span class="comment">         *         &#125;, executor);</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2.thenAcceptAsync  能接受上一步的结果，但是没有返回值</span></span><br><span class="line"><span class="comment">         * .thenAcceptAsync(res-&gt;&#123;</span></span><br><span class="line"><span class="comment">         *                  System.out.println(&quot;任务2启动了...&quot;+res);</span></span><br><span class="line"><span class="comment">         *         &#125;,executor);</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. thenApplyAsync 能获取到上一步的结果 同时也有返回值</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">//         */</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;当前线程：&quot; + Thread.currentThread().getId());</span></span><br><span class="line"><span class="comment">//            int i = 10 / 4;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;运行结果:&quot; + i);</span></span><br><span class="line"><span class="comment">//            return i;</span></span><br><span class="line"><span class="comment">//        &#125;, executor).thenApplyAsync(res -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务2启动了...&quot; + res);</span></span><br><span class="line"><span class="comment">//            return &quot;Hello&quot; + res;</span></span><br><span class="line"><span class="comment">//        &#125;, executor);</span></span><br><span class="line">        <span class="comment">//Integer integer = future1.get();</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        /**</span></span><br><span class="line"><span class="comment">//         * 两任务组合</span></span><br><span class="line"><span class="comment">//         */</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Integer&gt; future01 = CompletableFuture.supplyAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务1线程：&quot; + Thread.currentThread().getId());</span></span><br><span class="line"><span class="comment">//            int i = 10 / 4;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务1结束:&quot; + i);</span></span><br><span class="line"><span class="comment">//            return i;</span></span><br><span class="line"><span class="comment">//        &#125;, executor);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;String&gt; future02 = CompletableFuture.supplyAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务2线程：&quot; + Thread.currentThread().getId());</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务2结束:&quot;);</span></span><br><span class="line"><span class="comment">//            return &quot;hello&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;, executor);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        future01.runAfterBothAsync(future02,()-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始&quot; );</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        future01.thenAcceptBothAsync(future02,(f1,f2)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始 之前的结果:&quot;+f1+&quot;--&gt;&quot;+f2 );</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;String&gt; future = future01.thenCombineAsync(future02, (f1, f2) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            return f1 + &quot;:&quot; + f2 + &quot;-&gt;haha&quot;;</span></span><br><span class="line"><span class="comment">//        &#125;, executor);</span></span><br><span class="line"><span class="comment">//        future01.runAfterEitherAsync(future02,()-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始 之前的结果:&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"> </span><br><span class="line">        CompletableFuture&lt;String&gt; futureImg = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的图片信息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello.jpg&quot;</span>;</span><br><span class="line">        &#125;,executor);</span><br><span class="line">        CompletableFuture&lt;String&gt; futureAttr = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的属性&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;黑色+256G&quot;</span>;</span><br><span class="line">        &#125;,executor);</span><br><span class="line">        CompletableFuture&lt;String&gt; futureDesc = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的介绍&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">        &#125;,executor);</span><br><span class="line">       <span class="comment">// futureImg.get();futureAttr.get();futureDesc.get();</span></span><br><span class="line">        <span class="comment">//CompletableFuture&lt;Void&gt; allOf = CompletableFuture.allOf(futureImg, futureAttr, futureDesc);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;main....end...&quot;+futureImg.get()+&quot;=&gt;&quot;+futureAttr.get()+&quot;=&gt;&quot;+futureDesc.get());</span></span><br><span class="line">        CompletableFuture&lt;Object&gt; anyOf = CompletableFuture.anyOf(futureImg, futureAttr, futureDesc);</span><br><span class="line">        anyOf.get();<span class="comment">//等待所有结果完成</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main....end...&quot;</span>+anyOf.get());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">thread</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;main....start....&quot;</span>);</span><br><span class="line"><span class="comment">//        Thread01 thread01 = new Thread01();</span></span><br><span class="line"><span class="comment">//        thread01.start();//启动线程</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;main....end...&quot;);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        Runable01 runable01 = new Runable01();</span></span><br><span class="line"><span class="comment">//        new Thread(runable01).start();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;main....end...&quot;);</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new Callable01());</span></span><br><span class="line"><span class="comment">//        new Thread(futureTask).start();</span></span><br><span class="line"><span class="comment">//        Integer integer = futureTask.get();//阻塞等待</span></span><br><span class="line">       <span class="comment">// System.out.println(&quot;main....end...&quot;+integer);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池：</span></span><br><span class="line"><span class="comment">         *  给线程池直接提交任务</span></span><br><span class="line"><span class="comment">         *  1.创建线程池的方式</span></span><br><span class="line"><span class="comment">         *      1.1.使用Executors线程池工具类来创建线程池   service.execute(new Runable01());</span></span><br><span class="line"><span class="comment">         *      1.2.使用原生的线程池创建方式</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 原生线程池的七大参数解释</span></span><br><span class="line"><span class="comment">         *  int corePoolSize, 核心线程数｛只要线程池不销毁，核心线程数一直在｝，线程池创建好以后就准备就绪的线程数量，就等待来接收异步任务去来执行</span></span><br><span class="line"><span class="comment">         *  int maximumPoolSize, 最大线程数，控制资源并发的</span></span><br><span class="line"><span class="comment">         *  long keepAliveTime, 存活时间，如果当前线程数量大于核心数量，只要线程空闲到一定时间内，就会释放空闲的最大线程数当中的线程</span></span><br><span class="line"><span class="comment">         *  TimeUnit unit,  具体最大线程数的存活时间的时间单位</span></span><br><span class="line"><span class="comment">         *  BlockingQueue&lt;Runnable&gt; workQueue, 阻塞队列 如果任务有很多，就会将目前多的任务放在队列里面，只要有空闲的线程，就会去阻塞队列去拿新的任务</span></span><br><span class="line"><span class="comment">         *  ThreadFactory threadFactory,  线程的创建工厂 默认 也可以自定义</span></span><br><span class="line"><span class="comment">         *  RejectedExecutionHandler handler   拒绝策略，就是处理阻塞队列当中任务已满了，不能再加入其他的任务进来阻塞队列当中了，就进行指定的拒绝策略进行拒绝任务</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  工作顺序：</span></span><br><span class="line"><span class="comment">         * 1. 线程池创建，准备好核心数量的线程，准备接受任务</span></span><br><span class="line"><span class="comment">         * 2. 核心线程数量若满了，就把新进来的任务放到阻塞队列当中，等到核心线程空闲了就去阻塞队列拿新任务并进行执行</span></span><br><span class="line"><span class="comment">         * 3. 如果阻塞队列满了，会开启指定的最大线程数量进行执行阻塞队列当中的任务，并若在指定的时间内最大线程数空闲了，就会释放资源</span></span><br><span class="line"><span class="comment">         * 4.如果阻塞队列和最大现场数量都满了，那么就会使用指定的拒绝策略，来拒绝接受新进来的任务</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 线程池的其他方法：</span></span><br><span class="line"><span class="comment">         *  Executors.newCachedThreadPool() //核心数是0，所有都可回收</span></span><br><span class="line"><span class="comment">         *         Executors.newFixedThreadPool() //固定大小，核心数=最大值都不可回收</span></span><br><span class="line"><span class="comment">         *         Executors.newScheduledThreadPool() //定时任务的线程池</span></span><br><span class="line"><span class="comment">         *         Executors.newSingleThreadExecutor() //单线程的线程池，后台从队列里面获取任务，挨个执行</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>,</span><br><span class="line">                                                        <span class="number">200</span>,</span><br><span class="line">                                                            <span class="number">10</span>,</span><br><span class="line">                                                        TimeUnit.SECONDS,</span><br><span class="line">                                                        <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">100000</span>),</span><br><span class="line">                                                        Executors.defaultThreadFactory(),</span><br><span class="line">                                                        <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">        System.out.println(<span class="string">&quot;main....end...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程：&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runable01</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程：&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callable01</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程：&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果:&quot;</span>+i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3、JVM-GC解析"><a href="#3、JVM-GC解析" class="headerlink" title="3、JVM+GC解析"></a>3、JVM+GC解析</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h3 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h3><p>jVM体系概述</p><p> <img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160653398.png" alt="image-20210815160653398"></p><p>Java8以后的JVM</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160713654.png" alt="image-20210815160713654"></p><p> GC作用域</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160731962.png" alt="image-20210815160731962"></p><h2 id="常见的垃圾回收算法"><a href="#常见的垃圾回收算法" class="headerlink" title="常见的垃圾回收算法"></a>常见的垃圾回收算法</h2><p>引用计数</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160803935.png" alt="image-20210815160803935"></p><p>复制</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160818184.png" alt="image-20210815160818184"></p><p>标记清除</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160830133.png" alt="image-20210815160830133"></p><p>标记整理</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160844158.png" alt="image-20210815160844158"></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h4 id="JVM垃圾回收的时候如何确定垃圾-是否知道什么是-GC-Roots"><a href="#JVM垃圾回收的时候如何确定垃圾-是否知道什么是-GC-Roots" class="headerlink" title="JVM垃圾回收的时候如何确定垃圾?是否知道什么是 GC Roots"></a>JVM垃圾回收的时候如何确定垃圾?是否知道什么是 GC Roots</h4><p>什么是垃圾?</p><p>简单的说就是内存中已经不再被使用到的空间就是垃圾</p><p>要进行垃圾回收，如何判断一个对象是否可以被回收?</p><p>引用计数法</p><p>Java中,引用和对象是有关联的。如果要操作对象则必须用引用进行因此,很显然一个简单的办法是通过引用计数来判断一个对象是否可以回收。简单说,给对象中添加一个引用计数器,每当有一个地方引用它,计数器值加1，每当有一个引用失效时,计数器值减1。任何时刻计数器值为零的对象就是不可能再被使用的,那么这个对象就是可回收对象。</p><p>那为什么主流的Java虚拟机里面都没有选用这种算法呢?其中最主要的原因是它很难解决对象之间相互循环引用的问题</p><p><strong>枚举根节点做可达性分析</strong>（根搜索路径）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为了解决引用计数法的循环引用的问题，java使用了可达性分析的方法</span><br><span class="line"></span><br><span class="line">基本思路是通过一些列名为&quot;GC Roots&quot;的对象作为初始节点，从这个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链想通时，则说明此对象不可用，也即给定一个集合的引用作为根出发，通过引用关系遍历对象图，能被遍历到的(可到达的)对象就被判定为存活，没有遍历到的自然被判定为死亡。</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815160957213.png" alt="image-20210815160957213"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java 可以做GCRoots的对象</span><br><span class="line"></span><br><span class="line">虚拟机栈(栈帧中的局部变量区,也叫做局部变量表</span><br><span class="line">方法区中的类静态属性引用的对象。</span><br><span class="line">方法区中常量引用的对象</span><br><span class="line">本地方法栈中N( Native方法)引用的对象</span><br></pre></td></tr></table></figure><p>什么是GCRoots ?</p><p>答：是一组四种对象(虚拟机栈(栈帧中的局部变量区,也叫做局部变量表,方法区中的类静态属性引用的对象,方法区中常量引用的对象,本地方法栈中N( Native方法)引用的对象)的根集合体，从这四种对象作为垃圾回收扫描的起始点</p><hr><p>2、你说你做过JVM调优和参数配置，请问如何盘点查看MM系统默认值</p><p>·     JVM的参数类型</p><p>标配参数</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161104004.png" alt="image-20210815161104004"></p><p>·     -verison</p><p>·     -help</p><p>·     java -showversion</p><p>·     X参数（了解）</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161142728.png" alt="image-20210815161142728"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-Xint。解释执行</span><br><span class="line"></span><br><span class="line">-Xcomp。第一次使用就编译成本地代码</span><br><span class="line"></span><br><span class="line">-Xmixed。混合模式</span><br><span class="line"></span><br><span class="line">XX参数。Boolean类型</span><br></pre></td></tr></table></figure><p>·     公式</p><p>·     -XX：+或者- 某个属性值。 +表示开启 -表示关闭</p><p>·     Case</p><p>·     是否打印GC收集细节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX：+PrintGCDetails</span><br><span class="line"></span><br><span class="line">-XX：-PrintGCDetails</span><br></pre></td></tr></table></figure><p>·     是否使用串行垃圾收集器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX：-UseSerialGC</span><br><span class="line"></span><br><span class="line">-XX：+UseSerialGC</span><br></pre></td></tr></table></figure><p>·     KV设值类型</p><p>·     公式</p><p>·     -XX：属性key=属性值value</p><p>·     Case</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=128m</span><br><span class="line"></span><br><span class="line">-XX:MaxTenuringThreshold=15</span><br></pre></td></tr></table></figure><p>·     jinfo举例，如何查看当前运行程序的配置</p><p>·     公式</p><p>·     jinfo -flag 配置项 进程编号</p><h4 id="题外话（坑题）"><a href="#题外话（坑题）" class="headerlink" title="题外话（坑题）"></a>题外话（坑题）</h4><p>两个经典参数：-Xms和-Xmx，这个你如何解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xms。等价于 -XX:InitialHeapSize 初始化堆内存</span><br><span class="line"></span><br><span class="line">-Xmx。等价于-XX:MaxHeapSize  最大堆内存</span><br></pre></td></tr></table></figure><p>这两个参数也还是属于XX参数，只不过这两个参数常用，所以就起了一种别名来代替复杂的名字 - begins  at 等价于   -XX:InitialHeapSize 初始化堆内存</p><p>查看JVM默认值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsInitial</span><br></pre></td></tr></table></figure><p>·     查看初始默认值</p><p>·     公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsInitial -version</span><br><span class="line"></span><br><span class="line">java -XX:+PrintFlagsInitial</span><br><span class="line"></span><br><span class="line">-XX:+PrintFlagsFinal</span><br></pre></td></tr></table></figure><p>·     主要查看修改更新</p><p>·     公式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PirntFlagsFinal</span><br><span class="line"></span><br><span class="line">java -XX:+PirntFlagsFinal -version</span><br></pre></td></tr></table></figure><p>·     PrintFlagsFinal举例，运行Java命令的同时打印出参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintCommandLineFlags</span><br></pre></td></tr></table></figure><h4 id="3、你平时工作用过的JVM常用基本配置参数有哪些"><a href="#3、你平时工作用过的JVM常用基本配置参数有哪些" class="headerlink" title="3、你平时工作用过的JVM常用基本配置参数有哪些?"></a>3、你平时工作用过的JVM常用基本配置参数有哪些?</h4><p>基础知识复习</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161521073.png" alt="image-20210815161521073"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> totalMemory = Runtime.getRuntime().totalMemory();  <span class="comment">//返回java虚拟机中的内存变量</span></span><br><span class="line"><span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory(); <span class="comment">//返回java虚拟机试图使用的最大内存量</span></span><br><span class="line">System.out.println(<span class="string">&quot;TOTAL_MEMORY(-Xms) = &quot;</span> + totalMemory + <span class="string">&quot; (字节) 、&quot;</span> +(totalMemory / (<span class="keyword">double</span>)<span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;MAX_MEMORY(-Xmx) = &quot;</span> + maxMemory + <span class="string">&quot; (字节) 、&quot;</span> +(totalMemory / (<span class="keyword">double</span>)<span class="number">1024</span> / <span class="number">1024</span> + <span class="string">&quot;MB&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-Xms。初始大小内存，默认为物理内存1/64。 等价于-XX:InitialHeapSize</span><br><span class="line"></span><br><span class="line">-Xmx。最大分配内存，默认为物理内存1/4。等价于-XX:MaxHeapSize</span><br><span class="line"></span><br><span class="line">-Xss。 设置单个线程的大小，一般默认为512K~1024K。等价于-XX:ThreadStackSize</span><br></pre></td></tr></table></figure><p>原理：</p><p>·     系统出厂默认值是跟平台有关，一般生产环境都是部署到linux系统（也即1024 KB）</p><p>·     -Xmn。设置年轻代大小，一般都不用设置，一般都是用默认的即可</p><p>·     -XX:MetaspaceSize</p><p>·     设置元空间大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元空间的本质和永久代类似，都是对JVM规范中方法区的实现。</span><br><span class="line">不过元空间与永久代最大的区别在于，元空间便不再虚拟机中，而是使用本地内存。</span><br><span class="line">因此，默认情况下，元空间大小仅受本地内存限制。</span><br></pre></td></tr></table></figure><p>·     -Xms10m -Xmx10m -XX:MetaspaceSize=1024m -XX:+PrintFlagsFinal</p><p>·     不管是几个G的内存，元空间默认都只占用20多M</p><p>·     典型设置案例</p><p>-Xms128m -Xmx4096m -Xss1024k -XX:MetaspaceSize=512m -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseSerialGC</p><p>·     -XX:+PrintGCDetails</p><p>·     输出详细GC收集日志信息</p><p>·     GC</p><p>·     FullGC</p><p>·     -XX:SurvivoRatio</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161651768.png" alt="image-20210815161651768"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置新时代中eden和s0/s1的比例。</span><br><span class="line">默认:-XX:SurvivorRatio=8，Eden:S0:S1=8:1:1</span><br><span class="line">假如:-XX:SurvivorRatio=4，Eden:S0:S1=4:1:1</span><br><span class="line">SurvivorRatio值就是设置eden区的比例占多少，S0/S1相同</span><br></pre></td></tr></table></figure><p>·     -XX:NewRatio</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置年轻代与老年代在堆结构的占比</span><br><span class="line">默认:-XX:NewRatio=2新时代占1，老年代2，年轻代占整个堆的1/3</span><br><span class="line">假如:-XX:NewRatio=4新时代占1，老年代4，年轻代占整个堆的1/5</span><br><span class="line">NewRatio值就是设置老年代的占比，剩下的1给新时代</span><br></pre></td></tr></table></figure><p>·     -XX:MaxTenuringThreshold，设置垃圾最大年龄</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxTenuringThreshold=0，设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入老年代。对于老年代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代的存活时间，增加在年轻代即被回收的概率。</span><br><span class="line"></span><br><span class="line">默认值为15</span><br></pre></td></tr></table></figure><h4 id="4、强引用、软引用、弱引用、虚引用分别是什么"><a href="#4、强引用、软引用、弱引用、虚引用分别是什么" class="headerlink" title="4、强引用、软引用、弱引用、虚引用分别是什么?"></a>4、强引用、软引用、弱引用、虚引用分别是什么?</h4><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161759268.png" alt="image-20210815161759268"></p><p>·     强引用（默认支持模式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当内存不足，JVM开始垃圾回收，对于强引用的对象，就算是出现了OOM也不会对该对象进行回收，死都不回收。</span><br><span class="line"></span><br><span class="line">强引用是我们最常见的普通对象引用，只要还有一个强引用指向一个对象，就能表明对象还&quot;活着&quot;，垃圾收集器不会碰这种对象。在Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即是该对象以后永远都不会被用到JVM也不会回收。因此强引用是造成Java内存泄露的主要原因之一。</span><br><span class="line"></span><br><span class="line">对于一个普通对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应(强)引用赋值为null，一般认为就是可以被垃圾收集的了(具体回收时机看垃圾收集策略)。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrongReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj1 = <span class="keyword">new</span> Object();  <span class="comment">//这样定义的默认就是强引用</span></span><br><span class="line">        Object obj2 = obj1;   <span class="comment">//obj2引用赋值</span></span><br><span class="line">        obj1 = <span class="keyword">null</span>;    <span class="comment">//置空</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(obj2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>·     软引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">软引用是一种相对强引用弱化了一些的引用，需要用java.lang.ref.SoftReference类来实现，可以让对象豁免一些垃圾收集。</span><br><span class="line"></span><br><span class="line">对于只有软引用的对象来说，</span><br><span class="line">当系统内存充足时，它不会被回收</span><br><span class="line">当系统内存不足时，它会被回收</span><br><span class="line"></span><br><span class="line">软引用通常用在对内存敏感的程序中，比如高速缓存就有用到软引用，内存够用的时候就保留，不够用就回收!</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161851208.png" alt="image-20210815161851208"></p><p>·     弱引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">弱引用需要用java.lang.ref.WeakReference类来实现，它比软引用的生存期更短</span><br><span class="line">对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管JVM的内存空间是否足够，都会回收该对象占用的缓存。</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815161911735.png" alt="image-20210815161911735"></p><p>·     软引用和弱应用的适用场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">假如有一个应用需要读写大量的本地图片:</span><br><span class="line">如果每次读取图片都从硬盘读取则会严重影响性能</span><br><span class="line">如果一次性全部都加载到内存中有可能造成内存溢出</span><br><span class="line">此时使用软引用可以解决这个问题</span><br><span class="line">设计思路是:用一个HashMap来保存图片的路径和相应图片对象关系的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效避免了OOM问题。</span><br><span class="line">Map&lt;String,SoftReference&lt;Bitmap&gt;&gt; imageCache=new Map&lt;String,SoftReference&lt;Bitmap&gt;&gt;();</span><br></pre></td></tr></table></figure><p>·     你知道弱引用的话，能谈谈WeakHashMap吗？</p><p>·     虚引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">虚引用需要java.lang.ref.PhantomReference类来实现</span><br><span class="line"></span><br><span class="line">顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。</span><br><span class="line">如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收，他不能单独使用也不能通过它访问对象，虚引用必须和引用队列(ReferenceQueue)联合使用</span><br><span class="line"></span><br><span class="line">虚引用的主要作用是跟踪对象被垃圾回收的状态。仅仅是提供了一种确保对象被finalize以后，做某些事情的机制。</span><br><span class="line">PhantomReference的get方法总是返回null，因此无法访问对应的引用对象，其意义在于说明一个对象以及进入finalization阶段，可以被gc回收，用来实现比finalization更灵活的回收操作。</span><br><span class="line"></span><br><span class="line">换句话说，设置虚引用关联的唯一目的，就是在这个对象被回收器回收的时候收到一个系统通知或者后续添加进一步的处理。</span><br><span class="line">Java技术允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。</span><br></pre></td></tr></table></figure><p>·     引用队列</p><p>·     GCRoots和四大引用的小总结</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162015762.png" alt="image-20210815162015762"></p><h4 id="5、请谈谈你对OOM的认识"><a href="#5、请谈谈你对OOM的认识" class="headerlink" title="5、请谈谈你对OOM的认识"></a>5、请谈谈你对OOM的认识</h4><p> Java.lang.StackOverflowError。 栈溢出错误</p><p>为什么会有StackOverflowError这种错误？</p><p>答 深度的方法调用导致出不来栈，栈爆了</p><p> Java.lang.OutOfMemoryError:Java heap space。堆内存不够用</p><p>为什么会有Java heap space这种错误？</p><p>答 堆爆了</p><p>Java.lang.OutOfMemeoryError:GC overhead limit exceeded</p><p>程序在垃圾回收上花费了98%的时间，却收集不回2%的空间，通常这样的异常伴随着CPU的冲高</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162208447.png" alt="image-20210815162208447"></p><p>·     Java.lang.OutOfMemeoryError:Direct buffer memory</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162215510.png" alt="image-20210815162215510"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162245139.png" alt="image-20210815162245139"></p><p>·     内存挂了</p><p>·     Java.lang.OutOfMemeoryError:unable to create new native thread</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162231879.png" alt="image-20210815162231879"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162252122.png" alt="image-20210815162252122"></p><p>·     非root用户登录Linux系统测试</p><p>·     服务器级别参数调优</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162319519.png" alt="image-20210815162319519"></p><p>·     Java.lang.OutOfMemeoryError:Metaspace</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162336898.png" alt="image-20210815162336898"></p><p>·     使用Java -XX:+PrintFlagsInitial命令查看本机的初始化参数，-XX:MetaspaceSize为21810376B(约20M)</p><p>·     元空间溢出</p><h4 id="6、G垃圾回收算法和垃圾收集器的关系-分别是什么请你谈谈"><a href="#6、G垃圾回收算法和垃圾收集器的关系-分别是什么请你谈谈" class="headerlink" title="6、G垃圾回收算法和垃圾收集器的关系?分别是什么请你谈谈"></a>6、G垃圾回收算法和垃圾收集器的关系?分别是什么请你谈谈</h4><p>·     GC算法（引用计数/复制/标清/标整）是内存回收的方法论，垃圾收集器就是算法落地实现</p><p>·     因为目前为止还没有完美的收集器出现，更加没有万能的收集器，只是针对具体应用最合适的收集器，进行分代收集</p><p>·     4种主要垃圾收集器</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162427528.png" alt="image-20210815162427528"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">串行垃圾回收器（Serial）</span><br><span class="line">它为单线程环境设计并且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境</span><br><span class="line"></span><br><span class="line">并行垃圾回收器（Parallel）</span><br><span class="line">多个垃圾回收线程并行工作，此时用户线程是暂停的，适用于科学计算/大数据处理等弱交互场景</span><br><span class="line"></span><br><span class="line">并发垃圾回收器（CMS）</span><br><span class="line">用户线程和垃圾收集线程同时执行（不一定是并行，可能交替执行），不需要停顿用户线程 互联网公司多用它，适用于对响应时间有要求的场景</span><br><span class="line"></span><br><span class="line">G1垃圾回收器</span><br><span class="line">G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收</span><br></pre></td></tr></table></figure><h4 id="7、怎么查看服务器默认的垃圾收集器是那个-生产上如何配置垃圾收集器的-谈谈你对垃圾收集器的理解"><a href="#7、怎么查看服务器默认的垃圾收集器是那个-生产上如何配置垃圾收集器的-谈谈你对垃圾收集器的理解" class="headerlink" title="7、怎么查看服务器默认的垃圾收集器是那个? 生产上如何配置垃圾收集器的? 谈谈你对垃圾收集器的理解?"></a>7、怎么查看服务器默认的垃圾收集器是那个? 生产上如何配置垃圾收集器的? 谈谈你对垃圾收集器的理解?</h4><p>·     怎么查看默认的垃圾收集器是哪个？</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162516007.png" alt="image-20210815162516007"></p><p>·     默认的垃圾收集器有哪些</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162549419.png" alt="image-20210815162549419"></p><p>·     垃圾收集器</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162603628.png" alt="image-20210815162603628"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162613747.png" alt="image-20210815162613747"></p><p>·     部分参数预先说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DefNew</span><br><span class="line"></span><br><span class="line">Default New Generation</span><br><span class="line"></span><br><span class="line">Tenured</span><br><span class="line"></span><br><span class="line">Old</span><br><span class="line"></span><br><span class="line">ParNew</span><br><span class="line"></span><br><span class="line">Parallel New Generation</span><br><span class="line"></span><br><span class="line">PSYoungGen</span><br><span class="line"></span><br><span class="line">Parallel Scavenge</span><br><span class="line"></span><br><span class="line">ParOldGen</span><br><span class="line"></span><br><span class="line">Parallel Old Generation</span><br></pre></td></tr></table></figure><p>·     Server/Client模式分别是什么意思</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162630541.png" alt="image-20210815162630541"></p><p>·     新生代</p><p>·     串行GC（Serial）/（Serial Coping）</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162644543.png" alt="image-20210815162644543"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162652958.png" alt="image-20210815162652958"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162658087.png" alt="image-20210815162658087"></p><p>·     并行GC(ParNew)</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162726348.png" alt="image-20210815162726348"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162734547.png" alt="image-20210815162734547"></p><p>·     并行回收GC(Parallel)/(Parallel Scavenge)</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162749162.png" alt="image-20210815162749162"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162755862.png" alt="image-20210815162755862"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162801442.png" alt="image-20210815162801442"></p><p>·     老年代</p><p>·     串行回收GC(Serial Old)/(Serial MSC)</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162815709.png" alt="image-20210815162815709"></p><p>·     并行GC(Parallel Old)/(Parallel MSC)</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162829043.png" alt="image-20210815162829043"></p><p>·     并发标记清除GC(CMS)</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162844261.png" alt="image-20210815162844261"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162850827.png" alt="image-20210815162850827"></p><p>·     4步过程</p><p>·     初始标记(CMS initial mark)</p><p>·     并发标记(CMS concurrent mark)和用户线程一起</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162905551.png" alt="image-20210815162905551"></p><p>·     重新标记(CMS remark)</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162917837.png" alt="image-20210815162917837"></p><p>·     并发清除(CMS concurrent sweep)和用户线程一起</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162929506.png" alt="image-20210815162929506"></p><p>·     优缺点</p><p>·     优</p><p>·     并发收集低停顿</p><p>·     缺</p><p>·     并发执行，对CPU资源压力大</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815162948790.png" alt="image-20210815162948790"></p><p>·     采用的标记清除算法会导致大量碎片</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163000214.png" alt="image-20210815163000214"></p><p>·     如何选择垃圾收集器</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163030414.png" alt="image-20210815163030414"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163037538.png" alt="image-20210815163037538"></p><p>G1垃圾收集器</p><p>·     以前收集器特点</p><p>·     年轻代和老年代是各自独立且连续的内存块</p><p>·     年轻代收集使用单eden+S0 +S进行复制算法</p><p>·     老年代收集必须扫描整个老年代区域</p><p>·     都是以尽可能少而快速地执行GC为设计原则</p><p>·     G1是什么</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163105807.png" alt="image-20210815163105807"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163113480.png" alt="image-20210815163113480"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163121749.png" alt="image-20210815163121749"></p><p>·     特点</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163134036.png" alt="image-20210815163134036"></p><p>·     底层原理</p><p>·     Region区域化垃圾收集器</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163148518.png" alt="image-20210815163148518"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163159789.png" alt="image-20210815163159789"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163205886.png" alt="image-20210815163205886"></p><p>·     最大好处是化整为零，避免全内存扫描，只需要按照区域来进行扫描即可</p><p>·     回收步骤</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163221170.png" alt="image-20210815163221170"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163228029.png" alt="image-20210815163228029"></p><p>·     4步过程</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163243261.png" alt="image-20210815163243261"></p><p>·     常用配置参数(了解)</p><p>·     -XX:+UseG1GC</p><p>·     -XX:G1HeapRegionSize=n : 设置G1区域的大小。值是2的幂，范围是1M到32M。目标是根据最小的Java堆大小划分出约2048个区域</p><p>·     -XX:MaxGCPauseMillis=n : 最大停顿时间，这是个软目标，JVM将尽可能（但不保证）停顿时间小于这个时间</p><p>·     -XX:InitiatingHeapOccupancyPercent=n 堆占用了多少的时候就触发GC，默认是45</p><p>·     -XX:ConcGCThreads=n 并发GC使用的线程数</p><p>·     -XX:G1ReservePercent=n 设置作为空闲空间的预留内存百分比，以降低目标空间溢出的风险，默认值是10%</p><p>·     和CMS相比的优势</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163300484.png" alt="image-20210815163300484"></p><h3 id="9、生产环境服务器变慢，诊断思路和性能评估谈谈"><a href="#9、生产环境服务器变慢，诊断思路和性能评估谈谈" class="headerlink" title="9、生产环境服务器变慢，诊断思路和性能评估谈谈?"></a>9、生产环境服务器变慢，诊断思路和性能评估谈谈?</h3><p>·     整机：top</p><p>·     uptime,系统性能命令的精简版</p><p>·     CPU：vmstat</p><p>查看CPU(包含不限于</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163351567.png" alt="image-20210815163351567"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163358620.png" alt="image-20210815163358620"></p><p>·     查看额外</p><p>·     查看所有CPU核信息</p><p>·     mpstat -P ALL 2</p><p>·     每个进程使用cpu的用量分解信息</p><p>·     pidstat -u 1 -p 进程编号</p><p>·     内存：free</p><p>·     应用程序可用内存数</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163418985.png" alt="image-20210815163418985"></p><p>·     查看额外</p><p>·     pidstat -p 进程号 -r 采样间隔秒数</p><p>·     硬盘：df</p><p>·     查看磁盘剩余空闲数</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163432582.png" alt="image-20210815163432582"></p><p>·     磁盘IO：iostat</p><p>·     磁盘I/O性能评估</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163447369.png" alt="image-20210815163447369"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163452615.png" alt="image-20210815163452615"></p><p>·     查看额外</p><p>·     pidstat -d 采样间隔秒数 -p 进程号</p><p>·     网络IO：ifstat</p><p>·     默认本地没有，下载ifstat</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163509153.png" alt="image-20210815163509153"></p><p>·     查看网络IO</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163519569.png" alt="image-20210815163519569"></p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163525544.png" alt="image-20210815163525544"></p><h4 id="10、假如生产环境出现CPU占用过高，请谈谈你的分析思路和定位"><a href="#10、假如生产环境出现CPU占用过高，请谈谈你的分析思路和定位" class="headerlink" title="10、假如生产环境出现CPU占用过高，请谈谈你的分析思路和定位"></a>10、假如生产环境出现CPU占用过高，请谈谈你的分析思路和定位</h4><p>·     结合Linux和JDK命令一块分析</p><p>·     案例步骤</p><p>·     1. 先用top命令找出CPU占比最高的</p><p>·     2. ps -ef或者jps进一步定位，得知是一个怎么样的一个后台程序</p><p>·     3. 定位到具体线程或者代码</p><p>·     ps -mp 进程 -o THREAD,tid,time</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163611286.png" alt="image-20210815163611286"></p><p>·     参数解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-m 显示所有线程</span><br><span class="line"></span><br><span class="line">-p pid进程使用cpu的时间</span><br><span class="line"></span><br><span class="line">-o 该参数后是用户自定义格式</span><br></pre></td></tr></table></figure><p>·     4. 将需要的线程ID转换为16进制格式(英文小写格式)</p><p>·     printf “%x\n” 有问题的线程ID</p><p>·     5. jstack 进程ID | grep tid(16进制线程ID小写英文) -A60</p><h4 id="11、对于JDK自带的JVM监控和性能分析工具用过哪些？一般你是怎么用的？"><a href="#11、对于JDK自带的JVM监控和性能分析工具用过哪些？一般你是怎么用的？" class="headerlink" title="11、对于JDK自带的JVM监控和性能分析工具用过哪些？一般你是怎么用的？"></a>11、对于JDK自带的JVM监控和性能分析工具用过哪些？一般你是怎么用的？</h4><p>·     是什么</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815163648852.png" alt="image-20210815163648852"></p><p>·     性能监控工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps(虚拟机进程状况工具)</span><br><span class="line"></span><br><span class="line">jinfo(Java配置信息工具)</span><br><span class="line"></span><br><span class="line">jmap(内存映像工具)</span><br><span class="line"></span><br><span class="line">jstat(统计信息监控工具)</span><br></pre></td></tr></table></figure><h4 id="12、JVMGC结合SpringBoot微服务的调参优化"><a href="#12、JVMGC结合SpringBoot微服务的调参优化" class="headerlink" title="12、JVMGC结合SpringBoot微服务的调参优化"></a>12、JVMGC结合SpringBoot微服务的调参优化</h4><p>·     在实际的工作中，结合SpringBoot进行JVM的调优</p><p>·     JVMGC对微服务的生产部署调参的优化方案</p><p> -Xms10m -Xmx10m -XX:+PrintGCDetails -XX:+UseG1GC </p><h2 id="JVM常问面试题"><a href="#JVM常问面试题" class="headerlink" title="JVM常问面试题"></a>JVM常问面试题</h2><h3 id="JVM基础"><a href="#JVM基础" class="headerlink" title="JVM基础"></a>JVM基础</h3><h4 id="什么是JVM？"><a href="#什么是JVM？" class="headerlink" title="什么是JVM？"></a>什么是JVM？</h4><p>答：Java虚拟机。它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。</p><h4 id="请谈谈你对JVM的理解？JAVA8的虚拟机有什么更新？"><a href="#请谈谈你对JVM的理解？JAVA8的虚拟机有什么更新？" class="headerlink" title="请谈谈你对JVM的理解？JAVA8的虚拟机有什么更新？"></a>请谈谈你对JVM的理解？JAVA8的虚拟机有什么更新？</h4><p>错误的回答：是JAVA虚拟机的意思</p><p>正确的回答：我对JVM的理解是JVM的内部体系结构分为三部分：类装载器（ClassLoader）子系统和运行时数据区以及执行引擎</p><p>java8在虚拟机方面的更新是撤销了java7的永久带，引入了JAVA8的元空间。</p><h4 id="什么是类加载器？"><a href="#什么是类加载器？" class="headerlink" title="什么是类加载器？"></a>什么是类加载器？</h4><p>答：比如是一个Car.class二进制字节码文件被类装载ClassLoader装载进JVM以后，模版就有一份，这个模版就变成了一个大的Car Class文件，锁也是锁这个模版 通过这一个模版，可以创建多个实例对象。 也就是锁的是模版，不是对象。</p><p>类装载器的作用就是把读取硬盘上的小class文件，通过类装载器装载进JVM里面，充当快递员的角色。</p><h4 id="类加载器有几种？"><a href="#类加载器有几种？" class="headerlink" title="类加载器有几种？"></a>类加载器有几种？</h4><p>答：粗分就有三种类装载器，细分就有四种类装载器。</p><p>java虚拟机自带的加载器有三种（其实细分有四种，但是最后一种在下面进行详解）：</p><p>启动类加载器：是用c++语言编写的，就加载java出厂默认的这些类 比如List，Object，String这些都是属于java出厂默认的，是启动类加载器以后自动加载进来的，所以我们能直接使用</p><p>扩展类加载器：是用JAVA语言编写的，</p><p>应用程序类加载器：用户自己可以定义的，java也叫系统类加载器，加载当前应用的classpath的所有类</p><h4 id="什么是双亲委派机制？"><a href="#什么是双亲委派机制？" class="headerlink" title="什么是双亲委派机制？"></a>什么是双亲委派机制？</h4><p>一句话概括：就是出了事情，往上捅，我爸是李刚，有事找我爹。</p><p>详细解释：我要加载一个类，不是从本类开始加载，而是先去启动类加载器去加载去寻找看看有没有，找到了就直接用 找不到就再去扩展类加载器找，扩展类加载器里面找到了直接用，找不到才到应用程序类加载器，这样的好处就是保证大家使用的类是同一套体系，不会错，作用就是保证java源代码不受污染，保证源码干净一致，这也叫沙箱安全</p><p>较为官方解释：当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。 采用双亲委派的一个好处是比如加载位于 rt.jar 包中的类 java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个 Object对象。</p><p>java虚拟机自带的加载器的第四种解释：</p><p>说明：如果启动类加载器和扩展类加载器以及应用程序类加载器都不好，那么可以自己自定义加载器。</p><p>用户自定义加载器：java.lang.ClassLoader的子类，用户可以定制类的加载方式。</p><p>如何使用？</p><p>只需要继承ClassLoader就可以自己定制类的加载方式。（但是这部分很少会有人自己去定制，除非你去阿里做基础架构，专做JAVAJDK订制开发）</p><h4 id="什么是Native？"><a href="#什么是Native？" class="headerlink" title="什么是Native？"></a>什么是Native？</h4><p>Native在Native本地方法栈主要是调底层的C语言的函数库。</p><h4 id="什么叫PC寄存器？（也即程序计数器）"><a href="#什么叫PC寄存器？（也即程序计数器）" class="headerlink" title="什么叫PC寄存器？（也即程序计数器）"></a>什么叫PC寄存器？（也即程序计数器）</h4><p>一句话概括：就是排版值日表的顺序</p><p>详细解释：程序计数器就是记录了程序内部的运行流程和跳转顺序。</p><p>较为官方的解释：每个线程都有一个程序计数器，是线程私有的,就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址,也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。这块内存区域很小，它是当前线程所执行的字节码的行号指示器，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>一句话概括：就是存放模版的地方，比如什么常量池啊这些静态共有的都存在了方法区</p><p>较为官方解释：供各线程共享的运行时内存区域。它存储了每一个类的结构信息，例如运行时常量池（Runtime Constant Pool）、字段和方法数据、构造函数和普通方法的字节码内容。上面讲的是规范，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space)和元空间(Metaspace)</p><p>实例变量存在堆内存中,和方法区无关</p><h4 id="Stack栈"><a href="#Stack栈" class="headerlink" title="Stack栈"></a>Stack栈</h4><p>一句话概括：也即程序要运行，需要栈空间，它随程序的申请开辟，程序运行结束，释放。</p><p>8种基本类型的变量+对象的引用变量+实例方法都是存放在栈里面</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><h4 id="请你谈谈对象的生命周期？"><a href="#请你谈谈对象的生命周期？" class="headerlink" title="请你谈谈对象的生命周期？"></a>请你谈谈对象的生命周期？</h4><p>对象的生命周期我的理解：</p><p>1、先从伊甸区有100个对象，第一次经过GC垃圾回收以后，会把活着的对象放入到幸存0区。</p><p>2、然后第二次会对伊甸区和幸存0区进行GC回收，第二次GC回收后存活的对象，将复制到幸存1区。</p><p>3、然后第三次GC垃圾回收前，幸存0区和幸存1区进行互换位置，然后对伊甸区和原先的幸存1区（也即已经成功与幸存0区交换位置的幸存1区）进行第三次GC的垃圾回收。</p><p>4、第三次GC后，会把第三次存活下来的对象，存入互换后的幸存0区。若这样GC垃圾回收15次以后，最终成功逃过15次的GC垃圾回收的对象，将存到养老区。</p><p>堆内存在JAVA8是由新生区+养老区+元空间所构成</p><h3 id="堆内存调优01"><a href="#堆内存调优01" class="headerlink" title="堆内存调优01"></a>堆内存调优01</h3><p>用代码测试自己的电脑还能用多少内存等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   <span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory() ;<span class="comment">//返回Java虚拟机试图使用的最大内存量。</span></span><br><span class="line">  <span class="keyword">long</span> totalMemory = Runtime.getRuntime().totalMemory() ;<span class="comment">//返回Java虚拟机中的内存总量。</span></span><br><span class="line">  System.out.println(<span class="string">&quot;MAX_MEMORY = &quot;</span> + maxMemory + <span class="string">&quot;（字节）、&quot;</span> + (maxMemory / (<span class="keyword">double</span>)<span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">   System.out.println(<span class="string">&quot;TOTAL_MEMORY = &quot;</span> + totalMemory + <span class="string">&quot;（字节）、&quot;</span> + (totalMemory / (<span class="keyword">double</span>)<span class="number">1024</span> / <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>堆内存调优：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-Xms 设置初始分配大小，默认为物理内存的1/64</span><br><span class="line"></span><br><span class="line">-Xmx 最大分配内存，默认为物理内存的1/4</span><br><span class="line"></span><br><span class="line">VM参数： -Xms1024m -Xmx1024m -XX:+PrintGCDetails</span><br><span class="line"></span><br><span class="line">-XX:+PrintGCDetails 输出详细的GC处理日志</span><br></pre></td></tr></table></figure><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815164329750.png" alt="image-20210815164329750"></p><p>注意：参数调优一定要初始大小和最大分配内存的大小要一致</p><h3 id="堆内存调优02"><a href="#堆内存调优02" class="headerlink" title="堆内存调优02"></a>堆内存调优02</h3><p>OutOfMemoryError异常</p><p>VM参数：-Xms8m -Xmx8m -XX:+PrintGCDetails</p><p>能够抛出OutOfMemoryError异常的代码测试</p><p>String str = “444555” ;while(true) {str += str + new Random().nextInt(88888888) + new Random().nextInt(999999999) ;}</p><p>运行代码后的结果</p><p><img src="/2021/07/23/java-2021-07-23-faceQuestions/image-20210815164401751.png" alt="image-20210815164401751"></p><p>Full GC都没有养老区的空间了，所以报java.lang.OutOfMemoryError: Java heap space这个异常</p><h3 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h3><p>GC分代收集概念</p><p>JVM它是由新生代，养老代，元空间三代构成，每一代有对应着不同的垃圾回收算法，所以叫分代收集。</p><p>GC四大算法</p><p>1、引用计数法（了解就行，已经不用）</p><p>2、复制算法</p><p>新生区/伊甸区都是用复制算法</p><p>意思也即，对象死的收尸，活的要复制到幸存02区</p><p>相关原理</p><p>Minor GC会把Eden中的所有活的对象都移到Survivor区域中，如果Survivor区中放不下，那么剩下的活的对象就被移到Old generation中，也即一旦收集后，Eden是就变成空的了。</p><p>当对象在 Eden出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，通过-XX:MaxTenuringThreshold 来设定参数)，这些对象就会成为老年代。</p><p>-XX:MaxTenuringThreshold — 设置对象在新生代中存活的次数</p><p>具体解释：</p><p>年轻代的垃圾回收算法使用的是复制算法，复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。复制算法不会产生内存碎片。</p><h4 id="复制算法的优缺点："><a href="#复制算法的优缺点：" class="headerlink" title="复制算法的优缺点："></a>复制算法的优缺点：</h4><p>答：优点是不会产生内存碎片，缺点是会有空间的浪费</p><p>具体解释</p><p>复制算法它的缺点也是相当明显的。 </p><p>　　1、它浪费了一半的内存，这太要命了。 </p><p>　　2、如果对象的存活率很高，我们可以极端一点，假设是100%存活，那么我们需要将所有对象都复制一遍，并将所有引用地址重置一遍。复制这一工作所花费的时间，在对象存活率达到一定程度时，将会变的不可忽视。 所以从以上描述不难看出，复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。</p><p>3、标记清除</p><p>老年代一般是由标记清除或者是标记清除与标记整理的混合实现</p><p>相关原理</p><p>用通俗的话解释一下标记清除算法，就是当程序运行期间，若可以使用的内存被耗尽的时候，GC线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象，完成标记清理工作接下来便让应用程序恢复运行。</p><p>主要进行两项工作，第一项则是标记，第二项则是清除。 </p><p> 标记：从引用根节点开始标记遍历先标记出要回收的对象。</p><p> 清除：遍历整个堆，把标记的对象清除。 </p><p> 缺点：此算法需要暂停整个应用，会产生内存碎片 </p><h4 id="标记清除的优缺点"><a href="#标记清除的优缺点" class="headerlink" title="标记清除的优缺点"></a>标记清除的优缺点</h4><p>优点：不需要额外的空间。缺点:两次扫描，耗时严重，会产生内存碎片，具体优缺点解释</p><p>1、首先，它的缺点就是效率比较低（递归与全堆对象遍历），而且在进行GC的时候，需要停止应用程序，这会导致用户体验非常差劲。</p><p>2、其次，主要的缺点则是这种方式清理出来的空闲内存是不连续的，这点不难理解，我们的死亡对象都是随即的出现在内存的各个角落的，现在把它们清除之后，内存的布局自然会乱七八糟。 而为了应付这一点，JVM就不得不维持一个内存的空闲列表，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。</p><p>4、标记压缩</p><p>老年代一般是由标记清除或者是标记清除与标记整理的混合实现</p><p>相关原理</p><p>在整理压缩阶段，不再对标记的对像做回收，而是通过所有存活对像都向一端移动，然后直接清除边界以外的内存。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。 标记/整理算法不仅可以弥补标记/清除算法当中，内存区域分散的缺点，也消除了复制算法当中，内存减半的高额代价</p><h4 id="标记压缩的优缺点"><a href="#标记压缩的优缺点" class="headerlink" title="标记压缩的优缺点"></a>标记压缩的优缺点</h4><p>优点:减少移动对象的成本。缺点</p><h3 id="GC面试题"><a href="#GC面试题" class="headerlink" title="GC面试题"></a>GC面试题</h3><h4 id="请谈谈GC是什么？主要是什么样？"><a href="#请谈谈GC是什么？主要是什么样？" class="headerlink" title="请谈谈GC是什么？主要是什么样？"></a>请谈谈GC是什么？主要是什么样？</h4><p>答：GC是垃圾回收，主要是分代收集算法的体现</p><p>请再说说GC？</p><p>次数上频繁收集Young区，次数上较少收集Old区，基本不动元空间</p><h4 id="GC四大算法的优缺点请你谈谈？"><a href="#GC四大算法的优缺点请你谈谈？" class="headerlink" title="GC四大算法的优缺点请你谈谈？"></a>GC四大算法的优缺点请你谈谈？</h4><p>复制算法的优缺点：</p><p>答：优点是不会产生内存碎片</p><p>答：缺点是会有空间的浪费</p><p>具体解释</p><p>复制算法它的缺点也是相当明显的。 </p><p>　　1、它浪费了一半的内存，这太要命了。 </p><p>　　2、如果对象的存活率很高，我们可以极端一点，假设是100%存活，那么我们需要将所有对象都复制一遍，并将所有引用地址重置一遍。复制这一工作所花费的时间，在对象存活率达到一定程度时，将会变的不可忽视。 所以从以上描述不难看出，复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。</p><p>标记清除的优缺点</p><p>·     优点：不需要额外的空间</p><p>·     缺点:   两次扫描，耗时严重，会产生内存碎片</p><p>具体优缺点解释</p><p>1、首先，它的缺点就是效率比较低（递归与全堆对象遍历），而且在进行GC的时候，需要停止应用程序，这会导致用户体验非常差劲。</p><p>2、其次，主要的缺点则是这种方式清理出来的空闲内存是不连续的，这点不难理解，我们的死亡对象都是随即的出现在内存的各个角落的，现在把它们清除之后，内存的布局自然会乱七八糟。 而为了应付这一点，JVM就不得不维持一个内存的空闲列表，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。</p><p>标记压缩的优缺点</p><p>·     优点，减少移动对象的成本</p><p>·     缺点</p><h4 id="GC四大算法怎么用？哪个代用哪个算法？"><a href="#GC四大算法怎么用？哪个代用哪个算法？" class="headerlink" title="GC四大算法怎么用？哪个代用哪个算法？"></a>GC四大算法怎么用？哪个代用哪个算法？</h4><p>·     新生代用复制算法</p><p>·     养老代用标记清除或者标记压缩</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、&quot;&gt;&lt;a href=&quot;#五、&quot; class=&quot;headerlink&quot; title=&quot;五、&quot;&gt;&lt;/a&gt;五、&lt;/h1&gt;&lt;h2 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="面试" scheme="http://stary2020.gitee.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis6</title>
    <link href="http://stary2020.gitee.io/2021/07/22/SQL-2021-07-22-Redis6/"/>
    <id>http://stary2020.gitee.io/2021/07/22/SQL-2021-07-22-Redis6/</id>
    <published>2021-07-22T13:46:18.000Z</published>
    <updated>2021-08-19T02:34:42.438Z</updated>
    
    <content type="html"><![CDATA[<ul><li>NoSQL数据库简介</li><li>Redis6概述和安装</li><li>常用五大数据类型</li><li>Redis6配置文件详解</li><li>Redis6的发布和订阅</li><li>Redis6新数据类型</li><li>Jedis操作Redis6</li><li>Redis6与Spring Boot整合</li><li>Redis6的事务操作</li><li>Redis6持久化之RDB</li><li>Redis持久化之AOF</li><li>Redis6的主从复制</li><li>Redis6集群</li><li>Redis6应用问题解决</li><li>Redis6新功能</li></ul><h1 id="一、NoSQL数据库简介"><a href="#一、NoSQL数据库简介" class="headerlink" title="一、NoSQL数据库简介"></a>一、NoSQL数据库简介</h1><ul><li>技术发展</li><li>NoSQL数据库概述</li><li>行式存储数据库</li><li>图关型数据库</li><li>数据库排名</li></ul><h2 id="1-技术发展"><a href="#1-技术发展" class="headerlink" title="1.技术发展"></a>1.技术发展</h2><p>技术的分类：</p><ol><li>解决功能性的问题：java、jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</li><li>解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</li><li>解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</li></ol><ul><li>web 1.0 时代：<br>数据访问量有限，用高性能的单点服务器可以解决大部分问题<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165350486.png" alt="image-20210724165350486"></li><li>web 2.0 时代：<br>用户访问量大幅度提升，同时产生了大量的用户数据。加之移动设备普及，所有的互联网平台面临巨大的性能挑战，包括：CPU及内存压力、IO压力<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165405829.png" alt="image-20210724165405829"></li><li>解决CPU及内存压力——多台服务器条件下session存放问题<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165423009.png" alt="image-20210724165423009"><ul><li>方案一：存在cookie中<ol><li>不安全</li><li>网络负担效率低</li></ol></li><li>方案二：存在文件服务器或者数据库里<ol><li>大量的IO效率问题</li></ol></li><li>方案三：session复制<ol><li>session数据冗余，节点越多，浪费越大</li></ol></li><li>方案四：缓存数据库<ol><li>完全在内存中，速度快，数据结构简单</li></ol></li></ul></li><li>解决IO压力<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165437606.png" alt="image-20210724165437606"><ul><li>缓存数据库：减少IO的读操作</li><li>水平切分、垂直切分、读写分离，通过破坏一定的业务逻辑来换取性能</li><li>文档数据库</li><li>列式数据库</li><li>打破了传统关系型数据库以业务逻辑为依据的存储模式，而针对不同数据结构类型改为以性能为最优的存储方式</li></ul></li></ul><h2 id="2-NoSQL数据库概述"><a href="#2-NoSQL数据库概述" class="headerlink" title="2.NoSQL数据库概述"></a>2.NoSQL数据库概述</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>NoSQL（NoSQL=Not Only SQL），意味：不仅仅是SQL，指==非关系型的数据库==。NoSQL不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li>不遵循SQL标准</li><li>不支持ACID（事务中的原子性、一致性、隔离性和持久性）</li><li>远超于SQL的性能</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>NoSQL适用场景：</p><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的读写</li></ul><p>NoSQL不适用的场景：</p><ul><li>需要事务支持</li><li>基于sql的结构化查询存储，处理复杂的关系，需要即席查询<br>即席查询：（Ad Hoc）是用户根据自己的需求，灵活的选择查询条件，系统能够根据用户的选择生成相应的统计报表。</li></ul><p>==用不着sql和用了SQL也不行的情况下，考虑使用NoSQL==</p><h3 id="常见的NoSQL数据库"><a href="#常见的NoSQL数据库" class="headerlink" title="常见的NoSQL数据库"></a>常见的NoSQL数据库</h3><ul><li>Memcache<ul><li>很==早==出现的NoSQL数据库</li><li>数据都在内存中，一般==不支持持久化==</li><li>支持简单的key-value模式，==支持类型单一==</li><li>一般是作为==缓存数据库==辅助持久化的数据库</li></ul></li><li>Redis<ul><li>几乎覆盖了Memcache的绝大部分功能</li><li>数据都在内存，==支持持久化==，主要用作备份恢复</li><li>除了支持简单的key-value模式，还==支持多种数据结构的存储==，比如list、set、hash、zset等</li><li>一般是作为==缓存数据库==辅助持久化的数据库</li></ul></li><li>MongoDB<ul><li>高性能、开源、模式自由（schema free）的==文档型数据库==</li><li>数据都在内存中，如果内存不足，把不常用的数据保存到硬盘</li><li>虽然是key-value模式，但是对value（尤其是==json==）提供了丰富的查询功能</li><li>支持二进制数据及大型对象</li><li>开源根据数据的特点==替代RDBMS==，成为独立的数据库。或者配合RDBMS，存储特定的数据。<br>RDBMS：关系数据库管理系统。</li></ul></li></ul><h2 id="3-行式存储数据库"><a href="#3-行式存储数据库" class="headerlink" title="3.行式存储数据库"></a>3.行式存储数据库</h2><ul><li>行式数据库</li><li>列式数据库</li></ul><p>常见的数据库：</p><ul><li>HBase：<ul><li>HBase是Hadoop项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。</li><li>HBase的目标就是处理数据量非常庞大的表，可以用普通的计算机处理超过10亿行数据，还可以处理有百万列元素的数据表</li></ul></li><li>Cassandra：<ul><li>Apache Cassandra 是一款免费的开源 NoSQL 数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的海量数据集(数据量通常达到 PB 级别)。在众多显著特性当中，Cassandra 最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">计算机存储单位 计算机存储单位一般用 B，KB，MB，GB，TB，PB，EB，ZB，YB，BB</span><br><span class="line">来表示，它们之间的关系是：</span><br><span class="line">位 bit (比特)(Binary Digits)：存放一位二进制数，即 0 或 1，最小的存储单位。</span><br><span class="line">字节 byte：8 个二进制位为一个字节(B)，最常用的单位。</span><br><span class="line">1KB (Kilobyte 千字节)=1024B，</span><br><span class="line">1MB (Megabyte 兆字节 简称“兆”)=1024KB，</span><br><span class="line">1GB (Gigabyte 吉字节 又称“千兆”)=1024MB，</span><br><span class="line">1TB (Trillionbyte 万亿字节 太字节)=1024GB，其中 1024=2^10 ( 2 的 10 次方)，</span><br><span class="line">1PB（Petabyte 千万亿字节 拍字节）=1024TB，</span><br><span class="line">1EB（Exabyte 百亿亿字节 艾字节）=1024PB，</span><br><span class="line">1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,</span><br><span class="line">1YB (Jottabyte 一亿亿亿字节 尧字节)= 1024 ZB,</span><br><span class="line">1BB (Brontobyte 一千亿亿亿字节)= 1024 YB.</span><br><span class="line">注：“兆”为百万级数量单位。</span><br></pre></td></tr></table></figure><h2 id="4-图关型数据库"><a href="#4-图关型数据库" class="headerlink" title="4.图关型数据库"></a>4.图关型数据库</h2><p>Neo4j：</p><p>主要应用：社会关系、公共交通网络、地图及网络拓扑<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165524619.png" alt="image-20210724165524619"></p><h2 id="5-数据库排名"><a href="#5-数据库排名" class="headerlink" title="5.数据库排名"></a>5.数据库排名</h2><p>网址：<a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723084537486.png" alt="image-20210723084537486"></p><h1 id="二、Redis6概述和安装"><a href="#二、Redis6概述和安装" class="headerlink" title="二、Redis6概述和安装"></a>二、Redis6概述和安装</h1><ul><li>Redis 是一个开源的 key-value 存储系统。</li><li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 string(字符串)、<br>list(链表)、set(集合)、zset(sorted set –有序集合)和 hash（哈希类型）。</li><li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。</li><li>在此基础上，Redis 支持各种不同方式的排序。</li><li>与 memcached 一样，为了保证效率，数据都是缓存在内存中。</li><li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记<br>录文件。</li><li>并且在此基础上实现了 master-slave(主从)同步。</li></ul><h2 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h2><ol><li>配合关系型数据库做高速缓存<ul><li>高频次，热门访问的数据，降低数据库IO</li><li>分布式架构，做session共享<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165543974.png" alt="image-20210724165543974"></li></ul></li><li>多样的数据结构存储持久化数据<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723084938403.png" alt="image-20210723084938403"></li></ol><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>官网：<a href="http://redis.io/">http://redis.io/</a></p><p>中文官网：<a href="http://redis.cn/">http://redis.cn/</a></p><p>安装时，不考虑windows版本</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>准备工作：</p><ul><li><p>下载安装gcc编译器</p><ul><li><p>安装c语言的编译环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-scl scl-utils-build</span><br><span class="line">yum install -y devtoolset-8-toolchain</span><br><span class="line">scl enable devtoolset-8 bash</span><br></pre></td></tr></table></figure></li><li><p>测试gcc版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>安装redis：</p><ul><li>下载Redis安装包到opt目录下</li><li>解压：<code>tar -zxvf redis-6.2.1.tar.gz</code></li><li>进入解压后的目录</li><li>在目录下再次执行make命令，若报错，运行：<code>make distclean</code>，再次执行：<code>make</code>命令</li><li>编译成功后，跳过<code>make test</code>，继续执行：<code>make install</code>，完成安装</li></ul><p>安装目录：/usr/local/bin查看默认安装目录：</p><ul><li>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</li><li>redis-check-aof：修复有问题的 AOF 文件，rdb 和 aof 后面讲</li><li>redis-check-dump：修复有问题的 dump.rdb 文件</li><li>redis-sentinel：Redis 集群使用</li><li>redis-server：Redis 服务器启动命令</li><li>redis-cli：客户端，操作入口</li></ul><p>启动：</p><ul><li><p>前台启动：<code>redis.server</code>，不推荐使用，命令窗口不能关闭，否则服务器停止</p></li><li><p>后台启动：推荐</p><ul><li><p>备份redis.conf配置文件到其他目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/redis-3.2.5/redis.conf /myredis</span><br></pre></td></tr></table></figure></li><li><p>后台启动设置 daemonize no 改成 yes：修改 redis.conf(128 行)文件将里面的 daemonize no 改成 yes，让服务在后台启动</p></li><li><p>启动：<code>redis-server/myredis/redis.conf</code></p></li><li><p>客户端访问：<code>redis-cli</code></p></li><li><p>多端口情况下：<code>redis-cli -p6379</code></p></li><li><p>测试验证：<code>ping</code></p></li><li><p>关闭：</p><ul><li>单实例关闭：<code>redis-cli shutdown</code></li><li>进入终端后关闭：<code>shutdown</code></li><li>多实例关闭：<code>redis-cli -p 6379 shutdown</code></li></ul></li></ul></li></ul><h3 id="介绍（redis）"><a href="#介绍（redis）" class="headerlink" title="介绍（redis）"></a>介绍（redis）</h3><ul><li>默认 16 个数据库，类似数组下标从 0 开始，初始默认使用 0 号库</li><li>使用命令 <code>select &lt;dbid&gt;</code>来切换数据库。如: select 8</li><li>统一密码管理，所有库同样密码。</li><li><code>dbsize</code> 查看当前数据库的 key 的数量</li><li><code>flushdb</code> 清空当前库</li><li><code>flushall</code> 通杀全部库</li></ul><p>==端口号：6379==</p><ul><li>Redis==是单线程+多路IO复用技术==<ul><li>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</li></ul></li><li>串行 vs 多线程+锁（memcached） vs 单线程+多路 IO 复用(Redis）<ul><li>与Memcache三点不同：支持多数据类型，支持持久化，单线程+多路IO复用</li></ul></li></ul><h1 id="三、常用五大数据类型"><a href="#三、常用五大数据类型" class="headerlink" title="三、常用五大数据类型"></a>三、常用五大数据类型</h1><p>redis常见数据类型操作指令： <a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><h2 id="1-Redis键（key）"><a href="#1-Redis键（key）" class="headerlink" title="1. Redis键（key）"></a>1. Redis键（key）</h2><table><thead><tr><th>命令</th><th>使用</th></tr></thead><tbody><tr><td>keys *</td><td>查看当前库所有 key (匹配：keys *1)</td></tr><tr><td>exists key</td><td>判断某个 key 是否存在</td></tr><tr><td>type key</td><td>查看你的 key 是什么类型</td></tr><tr><td>del key</td><td>删除指定的 key 数据</td></tr><tr><td>unlink key</td><td>根据 value 选择非阻塞删除。仅将 keys 从 keyspace 元数据中删除，真正的删除会在后续异步操作。</td></tr><tr><td>expire key 10</td><td>10 秒钟：为给定的 key 设置过期时间</td></tr><tr><td>ttl key</td><td>查看还有多少秒过期，-1 表示永不过期，-2 表示已过期</td></tr><tr><td>select</td><td>命令切换数据库</td></tr><tr><td>dbsize</td><td>查看当前数据库的 key 的数量</td></tr><tr><td>flushdb</td><td>清空当前库</td></tr><tr><td>flushall</td><td>通杀全部库</td></tr></tbody></table><h2 id="2-Redis字符串（String）"><a href="#2-Redis字符串（String）" class="headerlink" title="2. Redis字符串（String）"></a>2. Redis字符串（String）</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ul><li>String是Redis最基本的类型，一个key对应一个value</li><li>String类型是二进制安全的。意味着Redis的String可以包含任何数据。比如jpg图片或者序列化对象</li><li>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><p><code>set &lt;key&gt;&lt;value&gt;</code>：添加键值对</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723092330892.png" alt="image-20210723092330892"></p><ul><li>*NX：当数据库中 key 不存在时，可以将 key-value 添加数据库</li><li>*XX：当数据库中 key 存在时，可以将 key-value 添加数据库，与 NX 参数互斥</li><li>*EX：key 的超时秒数</li><li>*PX：key 的超时毫秒数，与 EX 互斥</li></ul></li><li><p><code>get &lt;key&gt;</code>：查询对应键值</p></li><li><p><code>append &lt;key&gt;&lt;value&gt;</code>：将给定的<value> 追加到原值的末尾</value></p></li><li><p><code>strlen &lt;key&gt;</code>：获得值的长度</p></li><li><p><code>setnx &lt;key&gt;&lt;value&gt;</code>：只有在 key 不存在时 设置 key 的值</p></li><li><p><code>incr &lt;key&gt;</code>：将 key 中储存的数字值增 1。只能对数字值操作，如果为空，新增值为 1</p></li><li><p><code>decr &lt;key&gt;</code>：将 key 中储存的数字值减 1只能对数字值操作，如果为空，新增值为-1</p></li><li><p><code>incrby / decrby &lt;key&gt;&lt;步长&gt;</code>：将 key 中储存的数字值增减。自定义步长。</p></li><li><p><code>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; .....</code>：同时设置一个或多个 key-value 对</p></li><li><p><code>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; .....</code>：同时获取一个或多个 value</p></li><li><p><code>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; .....</code>：同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p></li><li><p><code>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</code>：获得值的范围，类似 java 中的 substring，前包，后包</p></li><li><p><code>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</code>：用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(索引从 0 开始)。</key></value></p></li><li><p><code>setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</code>：设置键值的同时，设置过期时间，单位秒。</p></li><li><p><code>getset &lt;key&gt;&lt;value&gt;</code>：以新换旧，设置了新值同时获得旧值</p></li></ul><p>原子性：</p><ul><li>所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。<ul><li>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</li><li>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。Redis 单命令的原子性主要得益于 Redis 的单线程</li></ul></li><li>案例：<br>java 中的 i++是否是原子操作？==不是==<br>i=0;两个线程分别对 i 进行++100 次,值是多少？==2-200==</li><li>==原子性，有一个失败则都失败==</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>String 的数据结构为简单动态字符串(Simple Dynamic String,缩写 SDS)。是可以修改的字符串，内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。</p><p>内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p><h2 id="Redis列表（List）"><a href="#Redis列表（List）" class="headerlink" title="Redis列表（List）"></a>Redis列表（List）</h2><h3 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h3><p>单键多值：</p><ul><li>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</li><li>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</li></ul><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; ....</code></td><td>从左边/右边插入一个或多个值。</td></tr><tr><td><code>lpop/rpop &lt;key&gt;</code></td><td>从左边/右边吐出一个值。值在键在，值光键亡。</td></tr><tr><td><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code></td><td>从<key1>列表右边吐出一个值，插到<key2>列表左边。</key2></key1></td></tr><tr><td><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code></td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td><code>lrange mylist 0 -1</code></td><td>0 左边第一个，-1 右边第一个，（0-1 表示获取所有）</td></tr><tr><td><code>lindex &lt;key&gt;&lt;index&gt;</code></td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td><code>llen &lt;key&gt;</code></td><td>获得列表长度</td></tr><tr><td><code>linsert &lt;key&gt; before &lt;value&gt;&lt;newvalue&gt;</code></td><td>在<value>的后面插入<newvalue>插入值</newvalue></value></td></tr><tr><td><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code></td><td>从左边删除 n 个 value(从左到右)</td></tr><tr><td><code>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code></td><td>将列表 key 下标为 index 的值替换成 value</td></tr></tbody></table><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>List 的数据结构为快速链表 quickList。</p><ul><li>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 ziplist，也即是压缩列表。</li><li>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</li><li>当数据量比较多的时候才会改成 quicklist。</li><li>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</li><li>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</li></ul><h2 id="Redis集合（Set）"><a href="#Redis集合（Set）" class="headerlink" title="Redis集合（Set）"></a>Redis集合（Set）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>Redis set 对外提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以==自动排重==的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</p></li><li><p>Redis 的 Set 是 string 类型的==无序集合。它底层其实是一个 value 为 null 的 hash 表==，所以添加，删除，查找的==复杂度都是 O(1)。==</p></li><li><p>一个算法，随着数据的增加，执行时间的长短，如果是 O(1)，数据增加，查找数据的时间不变</p></li></ul><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>使用</th></tr></thead><tbody><tr><td><code>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; .....</code></td><td>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略。smembers <key>取出该集合的所有值。</key></td></tr><tr><td><code>sismember &lt;key&gt;&lt;value&gt;</code></td><td>判断集合<key>是否为含有该<value>值，有 1，没有 0</value></key></td></tr><tr><td><code>scard&lt;key&gt;</code></td><td>返回该集合的元素个数。</td></tr><tr><td><code>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ....</code></td><td>删除集合中的某个元素。</td></tr><tr><td><code>spop &lt;key&gt;</code></td><td>随机从该集合中吐出一个值。</td></tr><tr><td><code>srandmember &lt;key&gt;&lt;n&gt;</code></td><td>随机从该集合中取出 n 个值。不会从集合中删除 。</td></tr><tr><td><code>smove &lt;source&gt;&lt;destination&gt;value </code></td><td>把集合中一个值从一个集合移动到另一个集合</td></tr><tr><td><code>sinter &lt;key1&gt;&lt;key2&gt;</code></td><td>返回两个集合的交集元素。</td></tr><tr><td><code>sunion &lt;key1&gt;&lt;key2&gt;</code></td><td>返回两个集合的并集元素。</td></tr><tr><td><code>sdiff &lt;key1&gt;&lt;key2&gt;</code></td><td>返回两个集合的差集元素(key1 中的，不包含 key2 中的)</td></tr></tbody></table><h3 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>Set 数据结构是 dict 字典，字典是用哈希表实现的。</li><li>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。</li><li>Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向一个内部值。</li></ul><h2 id="Redis哈希（Hash）"><a href="#Redis哈希（Hash）" class="headerlink" title="Redis哈希（Hash）"></a>Redis哈希（Hash）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>Redis hash 是一个键值对集合。</li><li>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</li><li>类似 Java 里面的 Map&lt;String,Object&gt;</li><li>用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，如果用</li><li>普通的 key/value 结构来存储<br>主要有以下 2 种存储方式：<ul><li>每次修改用户的某个属性需要，先反序列化<br>改好后再序列化回去。开销较大<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723094835460.png" alt="image-20210723094835460"></li><li>用户 ID 数据冗余<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723094853915.png" alt="image-20210723094853915"></li><li>通过 key(用户 ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723095032787.png" alt="image-20210723095032787"></li></ul></li></ul><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>使用</th></tr></thead><tbody><tr><td><code>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;</code></td><td>给<key>集合中的 <field>键赋值<value></value></field></key></td></tr><tr><td><code>hget &lt;key1&gt;&lt;field&gt;</code></td><td>从<key1>集合<field>取出 value</field></key1></td></tr><tr><td><code>hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;...</code></td><td>批量设置 hash 的值</td></tr><tr><td><code>hexists&lt;key1&gt;&lt;field&gt;</code></td><td>查看哈希表 key 中，给定域 field 是否存在。</td></tr><tr><td><code>hkeys &lt;key&gt;</code></td><td>列出该 hash 集合的所有 field</td></tr><tr><td><code>hvals &lt;key&gt;</code></td><td>列出该 hash 集合的所有 value</td></tr><tr><td><code>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;</code></td><td>为哈希表 key 中的域 field 的值加上增量 1 -1</td></tr><tr><td><code>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;</code></td><td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域field 不存在</td></tr></tbody></table><h3 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h3><p>Hash 类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p><h2 id="Redis有序集合Zset（sorted-set"><a href="#Redis有序集合Zset（sorted-set" class="headerlink" title="Redis有序集合Zset（sorted set)"></a>Redis有序集合Zset（sorted set)</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li><p>Redis 有序集合 zset 与普通集合 set 非常相似，是一个没有重复元素的字符串集合。</p></li><li><p>不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p></li><li><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p></li><li><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p></li></ul><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>使用</th></tr></thead><tbody><tr><td><code>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</code></td><td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</td></tr><tr><td><code>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]</code></td><td>返回有序集 key 中，下标在<start><stop></stop>之间的元素。带 WITHSCORES，可以让分数一起和值返回到结果集。</start></td></tr><tr><td><code>zrangebyscore key minmax [withscores] [limit offset count]</code></td><td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</td></tr><tr><td><code>zrevrangebyscore key maxmin [withscores] [limit offset count]</code></td><td>同上，改为从大到小排列。</td></tr><tr><td><code>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt; </code></td><td>为元素的 score 加上增量</td></tr><tr><td><code>zrem &lt;key&gt;&lt;value&gt;</code></td><td>删除该集合下，指定值的元素</td></tr><tr><td><code>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</code></td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td><code>zrank &lt;key&gt;&lt;value&gt;</code></td><td>返回该值在集合中的排名，从 0 开始。</td></tr></tbody></table><h3 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>SortedSet(zset)是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java<br>的数据结构 Map&lt;String, Double&gt;，可以给每一个元素 value 赋予一个权重score，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</li><li>zset 底层使用了两个数据结构<ul><li>（1）hash，hash 的作用就是关联元素 value 和权重 score，保障元素 value 的唯一性，可以通过元素 value 找到相应的 score 值。</li><li>（2）跳跃表，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表</li></ul></li></ul><h2 id="跳跃表（跳表）"><a href="#跳跃表（跳表）" class="headerlink" title="跳跃表（跳表）"></a>跳跃表（跳表）</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><h1 id="四、Redis6配置文件详解"><a href="#四、Redis6配置文件详解" class="headerlink" title="四、Redis6配置文件详解"></a>四、Redis6配置文件详解</h1><h2 id="1-Units-单位"><a href="#1-Units-单位" class="headerlink" title="1. ###Units 单位###"></a>1. ###Units 单位###</h2><ul><li>配置大小单位,开头定义了一些基本的度量单位，只支持 bytes，不支持 bit</li><li>大小写不敏感</li></ul><h2 id="2-INCLUDES-包含"><a href="#2-INCLUDES-包含" class="headerlink" title="2. ###INCLUDES 包含###"></a>2. ###INCLUDES 包含###</h2><ul><li>类似 jsp 中的 include，多实例的情况可以把公用的配置文件提取出来</li></ul><h2 id="3-网络相关配置"><a href="#3-网络相关配置" class="headerlink" title="3. ###网络相关配置"></a>3. ###网络相关配置</h2><h3 id="1-bind"><a href="#1-bind" class="headerlink" title="1.bind"></a>1.bind</h3><ul><li>默认情况 bind=127.0.0.1 只能接受本机的访问请求</li><li>不写的情况下，无限制接受任何 ip 地址的访问</li><li>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</li><li>==如果开启了 protected-mode，那么在没有设定 bind ip 且没有设密码的情况下，Redis只允许接受本机的响应==</li><li>保存配置，停止服务，重启启动查看进程，配置生效</li></ul><h3 id="2-protected-mode"><a href="#2-protected-mode" class="headerlink" title="2.protected-mode"></a>2.protected-mode</h3><ul><li>将本机访问保护模式设置 no</li></ul><h3 id="3-Port"><a href="#3-Port" class="headerlink" title="3.Port"></a>3.Port</h3><ul><li>端口号，默认 6379</li></ul><h3 id="4-tcp-backlog"><a href="#4-tcp-backlog" class="headerlink" title="4.tcp-backlog"></a>4.tcp-backlog</h3><ul><li>设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog 队列总和=未完成三次握手队列 + 已经完成三次握手队列。</li><li>在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题。</li><li>注意 Linux 内核会将这个值减小到/proc/sys/net/core/somaxconn 的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</li></ul><h3 id="5-timeout"><a href="#5-timeout" class="headerlink" title="5.timeout"></a>5.timeout</h3><ul><li>一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能。即永不关闭。</li></ul><h3 id="6-tcp-keepalive"><a href="#6-tcp-keepalive" class="headerlink" title="6.tcp-keepalive"></a>6.tcp-keepalive</h3><ul><li>对访问客户端的一种心跳检测，每个 n 秒检测一次。</li><li>单位为秒，如果设置为 0，则不会进行 Keepalive 检测，建议设置成 60</li></ul><h2 id="4-GENERAL-通用"><a href="#4-GENERAL-通用" class="headerlink" title="4. ###GENERAL 通用###"></a>4. ###GENERAL 通用###</h2><h3 id="1-daemonize"><a href="#1-daemonize" class="headerlink" title="1.daemonize"></a>1.daemonize</h3><ul><li>是否为后台进程，设置为 yes</li><li>守护进程，后台启动</li></ul><h3 id="2-pidfile"><a href="#2-pidfile" class="headerlink" title="2.pidfile"></a>2.pidfile</h3><ul><li>存放 pid 文件的位置，每个实例会产生一个不同的 pid 文件</li></ul><h3 id="3-loglevel"><a href="#3-loglevel" class="headerlink" title="3.loglevel"></a>3.loglevel</h3><ul><li>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</li><li>四个级别根据使用阶段来选择，生产环境选择 notice 或者 warning</li></ul><h4 id="4-logfile"><a href="#4-logfile" class="headerlink" title="4.logfile"></a>4.logfile</h4><ul><li>日志文件名称</li></ul><h3 id="5-databases-16"><a href="#5-databases-16" class="headerlink" title="5.databases 16"></a>5.databases 16</h3><ul><li>设定库的数量 默认 16，默认数据库为 0，可以使用 SELECT <dbid>命令在连接上指定数据库 id</dbid></li></ul><h2 id="5-SECURITY-安全"><a href="#5-SECURITY-安全" class="headerlink" title="5. ###SECURITY 安全###"></a>5. ###SECURITY 安全###</h2><h3 id="1-设置密码"><a href="#1-设置密码" class="headerlink" title="1.设置密码"></a>1.设置密码</h3><ul><li>访问密码的查看、设置和取消</li><li>在命令中设置密码，只是临时的。重启 redis 服务器，密码就还原了。</li><li>永久设置，需要再配置文件中进行设置。<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210723102644227.png" alt="image-20210723102644227"></li></ul><h2 id="6-LIMITS-限制"><a href="#6-LIMITS-限制" class="headerlink" title="6. #### LIMITS 限制"></a>6. #### LIMITS 限制</h2><h3 id="1-maxclients"><a href="#1-maxclients" class="headerlink" title="1.maxclients"></a>1.maxclients</h3><ul><li>设置 redis 同时可以与多少个客户端进行连接。</li><li>默认情况下为 10000 个客户端。</li><li>如果达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出<br>“max number of clients reached”以作回应。</li></ul><h3 id="2-maxmemory"><a href="#2-maxmemory" class="headerlink" title="2.maxmemory"></a>2.maxmemory</h3><ul><li>建议==必须设置==，否则，将内存占满，造成服务器宕机</li><li>设置 redis 可以使用的内存量。一旦到达内存使用上限，redis 将会试图移除内部数<br>据，移除规则可以通过 maxmemory-policy 来指定。</li><li>如果 redis 无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，<br>那么 redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH 等。</li><li>但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。如果你的 redis 是主<br>redis（说明你的 redis 有从 redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不<br>用考虑这个因素。</li></ul><h3 id="3-maxmemory-policy"><a href="#3-maxmemory-policy" class="headerlink" title="3.maxmemory-policy"></a>3.maxmemory-policy</h3><ul><li>volatile-lru：使用 LRU 算法移除 key，只对设置了过期时间的键；（最近最少使用）</li><li>allkeys-lru：在所有集合 key 中，使用 LRU 算法移除 key</li><li>volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键</li><li>allkeys-random：在所有集合 key 中，移除随机的 key</li><li>volatile-ttl：移除那些 TTL 值最小的 key，即那些最近要过期的 key</li><li>noeviction：不进行移除。针对写操作，只是返回错误信息</li></ul><h3 id="4-maxmemory-samples"><a href="#4-maxmemory-samples" class="headerlink" title="4.maxmemory-samples"></a>4.maxmemory-samples</h3><ul><li>设置样本数量，LRU 算法和最小 TTL 算法都并非是精确的算法，而是估算值，所<br>以你可以设置样本的大小，redis 默认会检查这么多个 key 并选择其中 LRU 的那个。</li><li>一般设置 3 到 7 的数字，数值越小样本越不准确，但性能消耗越小。</li></ul><h1 id="五、Redis6的发布和订阅"><a href="#五、Redis6的发布和订阅" class="headerlink" title="五、Redis6的发布和订阅"></a>五、Redis6的发布和订阅</h1><h2 id="1-什么是发布和订阅"><a href="#1-什么是发布和订阅" class="headerlink" title="1. 什么是发布和订阅"></a>1. 什么是发布和订阅</h2><ul><li>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者<br>(sub) 接收消息。</li><li>Redis 客户端可以订阅任意数量的频道。</li></ul><h2 id="2-Redis-的发布和订阅"><a href="#2-Redis-的发布和订阅" class="headerlink" title="2. Redis 的发布和订阅"></a>2. Redis 的发布和订阅</h2><ul><li>客户端可以订阅频道</li><li>当给这个频道发布消息后，消息就会发送给订阅的客户端</li></ul><h2 id="3-发布订阅命令行实现"><a href="#3-发布订阅命令行实现" class="headerlink" title="3. 发布订阅命令行实现"></a>3. 发布订阅命令行实现</h2><ol><li>打开一个客户端订阅 channel1<br><code>SUBSCRIBE channel1</code></li><li>打开另一个客户端，给 channel1 发布消息 hello<br><code>publish channel1 hello</code><br>返回的值是订阅者数量</li><li>打开第一个客户端可以看到发送的消息</li></ol><p>注：发布的消息没有持久化，如果在订阅的客户端收不到 hello，只能收到订阅后发布<br>的消息</p><h1 id="六、Redis6新数据类型"><a href="#六、Redis6新数据类型" class="headerlink" title="六、Redis6新数据类型"></a>六、Redis6新数据类型</h1><h2 id="1-Bitmaps"><a href="#1-Bitmaps" class="headerlink" title="1. Bitmaps"></a>1. Bitmaps</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>现代计算机用二进制（位） 作为信息的基础单位， 1 个字节等于 8 位， 例如“abc”<br>字符串是由 3 个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别<br>对应的 ASCII 码分别是 97、 98、 99， 对应的二进制分别是 01100001、01100010和 01100011，</li><li>合理地使用操作位能够有效地提高内存使用率和开发效率。</li><li>Redis 提供了 Bitmaps 这个“数据类型”可以实现对位的操作：<ul><li>Bitmaps 本身不是一种数据类型， 实际上它就是字符串（key-value），但是它可以对字符串的位进行操作。</li><li>Bitmaps 单独提供了一套命令， 所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同。 可以把 Bitmaps 想象成一个以位为单位的数组，数组的每个单元只能存储 0 和 1， 数组的下标在 Bitmaps 中叫做偏移量。</li></ul></li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li><code>setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;</code>设置 Bitmaps 中某个偏移量的值（0 或 1）<br>*offset:偏移量从 0 开始</li><li><code>getbit&lt;key&gt;&lt;offset&gt;</code>获取 Bitmaps 中某个偏移量的值<br>获取键的第 offset 位的值（从 0 开始算）</li><li>bitcount<br>统计字符串被设置为 1 的 bit 数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指 bit 组的字节的下标数，二者皆包含。<ul><li><code>bitcount&lt;key&gt;[start end]</code> 统计字符串从 start 字节到 end 字节比特值为 1 的数量</li></ul></li><li>bitop<br><code>bitop and(or/not/xor) &lt;destkey&gt; [key…]</code><br>bitop 是一个复合操作， 它可以做多个 Bitmaps 的 and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在 destkey 中。</li></ul><h3 id="Bitmaps-与-set-对比"><a href="#Bitmaps-与-set-对比" class="headerlink" title="Bitmaps 与 set 对比"></a>Bitmaps 与 set 对比</h3><ul><li>假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用集合类型和<br>Bitmaps 分别存储活跃用户。</li><li>这种情况下使用 Bitmaps 能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</li><li>但 Bitmaps 并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有 10<br>万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps 就不太合适了， 因为基本上大部分位都是 0。</li></ul><h2 id="2-HyperLogLog"><a href="#2-HyperLogLog" class="headerlink" title="2. HyperLogLog"></a>2. HyperLogLog</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV<br>（PageView 页面访问量）,可以使用 Redis 的 incr、incrby 轻松实现。</li><li>但像 UV（UniqueVisitor，独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</li><li>解决基数问题有很多种方案：<ul><li>（1）数据存储在 MySQL 表中，使用 distinct count 计算不重复个数</li><li>（2）使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理</li><li>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非<br>常大的数据集是不切实际的。</li></ul></li><li>能否能够降低一定的精度来平衡存储空间？Redis 推出了 HyperLogLog</li><li>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</li><li>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</li><li>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</li><li>什么是基数?<br>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8},基数(不重复元素)为 5。 基数估计就是在误差可接受的范围内，快速计算基数。</li></ul><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><ul><li>pfadd <key>&lt; element&gt; [element …]<br> 添加指定元素到 HyperLogLog 中将所有元素添加到指定 HyperLogLog 数据结构中。如果执行命令后 HLL 估计的近似基数发生变化，则返回 1，否则返回 0。</key></li><li>pfcount<key> [key …]<br>计算 HLL 的近似基数，可以计算多个 HLL，比如用 HLL 存储每天的 UV，计算一周的 UV 可以使用 7 天的 UV 合并计算即可</key></li><li>pfmerge<destkey><sourcekey> [sourcekey …]<br>将一个或多个 HLL 合并后的结果存储在另一个 HLL 中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</sourcekey></destkey></li></ul><h2 id="3-Geospatial"><a href="#3-Geospatial" class="headerlink" title="3. Geospatial"></a>3. Geospatial</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的 2 维坐标，在地图上就是经纬度。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。</p><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><ul><li>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]<br>添加地理位置（经度，纬度，名称）<ul><li>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</li><li>有 效 的 经 度 从 -180 度 到 180 度 。 有 效 的 纬 度 从 -85.05112878 度 到<br>85.05112878 度。</li><li>当坐标位置超出指定范围时，该命令将会返回一个错误。</li><li>已经添加的数据，是无法再次往里面添加的。</li></ul></member></latitude></key></li><li>geopos <key><member> [member…]<br>获得指定地区的坐标值</member></key></li><li>geodist<key><member1><member2> [m|km|ft|mi ]<br> 获取两个位置之间的直线距离<br>单位：<ul><li>m 表示单位为米[默认值]。</li><li>km 表示单位为千米。</li><li>mi 表示单位为英里。</li><li>ft 表示单位为英尺。</li><li>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</li></ul></member2></member1></key></li><li>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi<br>以给定的经纬度为中心，找出某一半径内的元素</latitude></key></li></ul><h1 id="七、Jedis操作Redis6"><a href="#七、Jedis操作Redis6" class="headerlink" title="七、Jedis操作Redis6"></a>七、Jedis操作Redis6</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="Jedis-所需要的-jar-包："><a href="#Jedis-所需要的-jar-包：" class="headerlink" title="Jedis 所需要的 jar 包："></a>Jedis 所需要的 jar 包：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="连接-Redis-注意事项"><a href="#连接-Redis-注意事项" class="headerlink" title="连接 Redis 注意事项"></a>连接 Redis 注意事项</h3><ul><li>禁用 Linux 的防火墙：<br>Linux(CentOS7)里执行命令<br><code>systemctl stop/disable firewalld.service</code></li><li>redis.conf 中注释掉 bind 127.0.0.1 ,然后 protected-mode no</li></ul><h3 id="Jedis-常用操作"><a href="#Jedis-常用操作" class="headerlink" title="Jedis 常用操作"></a>Jedis 常用操作</h3><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.137.3&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">String pong = jedis.ping();</span><br><span class="line">System.out.println(<span class="string">&quot;连接成功：&quot;</span>+pong);</span><br><span class="line">jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据读写测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key</span></span><br><span class="line">jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.println(keys.size());</span><br><span class="line"><span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String</span></span><br><span class="line">jedis.mset(<span class="string">&quot;str1&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;str2&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;str3&quot;</span>,<span class="string">&quot;v3&quot;</span>);</span><br><span class="line">System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>,<span class="string">&quot;str2&quot;</span>,<span class="string">&quot;str3&quot;</span>));</span><br><span class="line"><span class="comment">//List</span></span><br><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;mylist&quot;</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : list) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set</span></span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order03&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order04&quot;</span>);</span><br><span class="line">Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String order : smembers) &#123;</span><br><span class="line">System.out.println(order);</span><br><span class="line">&#125;</span><br><span class="line">jedis.srem(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line"><span class="comment">//hash</span></span><br><span class="line">jedis.hset(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;hash1&quot;</span>,<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;13810169999&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@163.com&quot;</span>);</span><br><span class="line">jedis.hmset(<span class="string">&quot;hash2&quot;</span>,map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(<span class="string">&quot;hash2&quot;</span>, <span class="string">&quot;telphone&quot;</span>,<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//zset</span></span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">100d</span>, <span class="string">&quot;z3&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">90d</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">80d</span>, <span class="string">&quot;w5&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">70d</span>, <span class="string">&quot;z6&quot;</span>);</span><br><span class="line">Set&lt;String&gt; zrange = jedis.zrange(<span class="string">&quot;zset01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (String e : zrange) &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>要求：<br>1、输入手机号，点击发送后随机生成 6 位数字码，2 分钟有效<br>2、输入验证码，点击验证，返回成功或失败<br>3、每个手机号每天只能输入 3 次</p><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 八、Redis6与Spring Boot整合</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>  在 pom.xml 文件中引入 redis 相关依赖</span><br><span class="line"></span><br><span class="line">   ~~~xml</span><br><span class="line">   &lt;!-- redis --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;!-- spring2.X 集成 redis 所需 common-pool2--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.6</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li> application.properties 配置 redis 配置</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#Redis 服务器地址</span><br><span class="line">spring.redis.host=192.168.140.136</span><br><span class="line">#Redis 服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line">#Redis 数据库索引（默认为 0）</span><br><span class="line">spring.redis.database= 0</span><br><span class="line">#连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=1800000</span><br><span class="line">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.lettuce.pool.max-active=20</span><br><span class="line">#最大阻塞等待时间(负数表示没限制)</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1</span><br><span class="line">#连接池中的最大空闲连接</span><br><span class="line">spring.redis.lettuce.pool.max-idle=5</span><br><span class="line">#连接池中的最小空闲连接</span><br><span class="line">spring.redis.lettuce.pool.min-idle=0</span><br></pre></td></tr></table></figure><ol start="3"><li> 添加 redis 配置类</li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactoryfactory)</span> </span>&#123;</span><br><span class="line">RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span>;</span><br><span class="line">    StringRedisSerializer();</span><br><span class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    om.setVisibility(PropertyAccessor.ALL,</span><br><span class="line">                     JsonAutoDetect.Visibility.ANY);</span><br><span class="line">   om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">    jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">    template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key 序列化方式</span></span><br><span class="line">template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value 序列化</span></span><br><span class="line">template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap 序列化</span></span><br><span class="line">template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间 600 秒</span></span><br><span class="line">RedisCacheConfiguration config =</span><br><span class="line">RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">.entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">.serializeKeysWith(RedisSerializationContext.SerializationPair.</span><br><span class="line">fromSerializer(redisSerializer))</span><br><span class="line">.serializeValuesWith(RedisSerializationContext.SerializationPai</span><br><span class="line">r.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">.disableCachingNullValues();</span><br><span class="line">RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">.cacheDefaults(config)</span><br><span class="line">.build();</span><br><span class="line"><span class="keyword">return</span> cacheManager;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>RedisTestController 中添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redisTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTestController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置值到 redis</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"><span class="comment">//从 redis 获取值</span></span><br><span class="line">String name = (String)redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="九、Redis6的事务操作"><a href="#九、Redis6的事务操作" class="headerlink" title="九、Redis6的事务操作"></a>九、Redis6的事务操作</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><ul><li>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送过来的命令请求所打断。</li><li>Redis事务的主要作用就是串联多个命令防止别的命令插队</li></ul><h2 id="2-Multi、Exec、discard"><a href="#2-Multi、Exec、discard" class="headerlink" title="2. Multi、Exec、discard"></a>2. Multi、Exec、discard</h2><p>从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec 后，Redis 会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过 discard 来放弃组队。</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140128703.png" alt="image-20210724140128703"></p><p>示例：<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140248465.png" alt="image-20210724140248465"></p><p>组队成功，提交成功</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140305123.png" alt="image-20210724140305123"></p><p>组队阶段报错，提交失败</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140324840.png" alt="image-20210724140324840"></p><p>组队成功，提交有成功有失败情况</p><h2 id="3-事务的错误处理"><a href="#3-事务的错误处理" class="headerlink" title="3. 事务的错误处理"></a>3. 事务的错误处理</h2><ul><li>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</li><li>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</li></ul><h2 id="4-为什么要做成事务"><a href="#4-为什么要做成事务" class="headerlink" title="4. 为什么要做成事务"></a>4. 为什么要做成事务</h2><p>满足高并发需求等</p><h2 id="5-事务冲突"><a href="#5-事务冲突" class="headerlink" title="5. 事务冲突"></a>5. 事务冲突</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>一个请求想给金额减8000</p><p>一个请求想给金额减5000</p><p>一个请求想给金额减1000</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140617945.png" alt="image-20210724140617945"></p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140652155.png" alt="image-20210724140652155"></p><p>==<strong>悲观锁(Pessimistic Lock)</strong>,== 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。**==传统的关系型数据库里边就用到了很多这种锁机制==<strong>，比如</strong>行锁<strong>，</strong>表锁<strong>等，</strong>读锁<strong>，</strong>写锁**等，都是在做操作之前先上锁。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140747554.png" alt="image-20210724140747554"></p><p><strong>==乐观锁(Optimistic Lock)==,</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。==<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。==</p><h3 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a><strong>WATCH</strong> <strong>key</strong> <strong>[key …]</strong></h3><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务**执行之前这个(**<strong>或这些) key</strong> <strong>被其他命令所改动，那么事务将被打断。</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724140848516.png" alt="image-20210724140848516"></p><h3 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a><strong>unwatch</strong></h3><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><p><a href="http://doc.redisfans.com/transaction/exec.html">http://doc.redisfans.com/transaction/exec.html</a></p><h2 id="6-Redis事务三特性"><a href="#6-Redis事务三特性" class="headerlink" title="6. Redis事务三特性"></a>6. Redis事务三特性</h2><ul><li><p> 单独的隔离操作 </p></li><li><p>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </p></li><li><p>没有隔离级别的概念 </p><ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li></ul></li><li><p>不保证原子性 </p><ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </li></ul></li></ul><h2 id="7-秒杀案例"><a href="#7-秒杀案例" class="headerlink" title="7.秒杀案例"></a>7.秒杀案例</h2><h3 id="解决计数器和人员记录的事务操作"><a href="#解决计数器和人员记录的事务操作" class="headerlink" title="解决计数器和人员记录的事务操作"></a>解决计数器和人员记录的事务操作</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724141220521.png" alt="image-20210724141220521"></p><h3 id="Redis事务，秒杀并发模拟"><a href="#Redis事务，秒杀并发模拟" class="headerlink" title="Redis事务，秒杀并发模拟"></a>Redis事务，秒杀并发模拟</h3><ul><li>使用工具ab模拟测试</li><li>CentOS6 默认安装</li><li>CentOS7需要手动安装<ul><li>命令：<code>yum install httpd-tools</code></li></ul></li></ul><p>无网络情况下：</p><ul><li><p> 进入cd /run/media/root/CentOS 7 x86_64/Packages（路径跟centos6不同）</p></li><li><p> 顺序安装</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apr-1.4.8-3.el7.x86_64.rpm</span><br><span class="line">apr-util-1.5.2-6.el7.x86_64.rpm</span><br><span class="line">httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><p>测试：</p><p>vim postfile 模拟表单提交参数,以&amp;符号结尾;存放当前目录。</p><p>内容：prodid=0101&amp;</p><p>ab -n 2000 -c 200 -k -p ~/postfile -T application/x-www-form-urlencoded <a href="http://192.168.2.115:8081/Seckill/doseckill">http://192.168.2.115:8081/Seckill/doseckill</a></p><p>超卖：</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724141707910.png" alt="image-20210724141707910"></p><h3 id="超卖"><a href="#超卖" class="headerlink" title="超卖"></a>超卖</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724141731284.png" alt="image-20210724141731284"></p><h3 id="乐观锁实现"><a href="#乐观锁实现" class="headerlink" title="乐观锁实现"></a>乐观锁实现</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724141809526.png" alt="image-20210724141809526"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加乐观锁</span></span><br><span class="line">jedis.watch(qtkey);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//3.判断库存</span></span><br><span class="line">String qtkeystr = jedis.get(qtkey);</span><br><span class="line"><span class="keyword">if</span>(qtkeystr==<span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(qtkeystr.trim())) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;未初始化库存&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> qt = Integer.parseInt(qtkeystr);</span><br><span class="line"><span class="keyword">if</span>(qt&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;已经秒光&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724141909480.png" alt="image-20210724141909480"></p><p>增加事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//4.减少库存</span></span><br><span class="line"><span class="comment">//jedis.decr(qtkey);</span></span><br><span class="line">multi.decr(qtkey);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//5.加人</span></span><br><span class="line"><span class="comment">//jedis.sadd(usrkey, uid);</span></span><br><span class="line">multi.sadd(usrkey, uid);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行事务</span></span><br><span class="line">List&lt;Object&gt; list = multi.exec();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断事务提交是否失败</span></span><br><span class="line"><span class="keyword">if</span>(list==<span class="keyword">null</span> || list.size()==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀失败&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.err.println(<span class="string">&quot;秒杀成功&quot;</span>);</span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724141952138.png" alt="image-20210724141952138"></p><h3 id="增加并发"><a href="#增加并发" class="headerlink" title="增加并发"></a>增加并发</h3><h4 id="连接有限制"><a href="#连接有限制" class="headerlink" title="连接有限制"></a>连接有限制</h4><p>b -n 2000 -c 200 -k -p postfile -T ‘application/x-www-form-urlencoded’ <a href="http://192.168.140.1:8080/seckill/doseckill">http://192.168.140.1:8080/seckill/doseckill</a></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724142055178.png" alt="image-20210724142055178"></p><p>增加-r参数，-r  Don’t exit on socket receive errors.</p><p><strong>ab -n 2000 -c 100 -r -p postfile -T ‘application/x-www-form-urlencoded’</strong> <a href="http://192.168.140.1:8080/seckill/doseckill"><strong>http://192.168.140.1:8080/seckill/doseckill</strong></a></p><h4 id="秒光还有库存"><a href="#秒光还有库存" class="headerlink" title="秒光还有库存"></a>秒光还有库存</h4><p>已经秒光，可是还有库存</p><p>ab -n 2000 -c 100 -p postfile -T ‘application/x-www-form-urlencoded’ <a href="http://192.168.137.1:8080/seckill/doseckill">http://192.168.137.1:8080/seckill/doseckill</a></p><p>已经秒光，可是还有库存。原因，就是乐观锁导致很多请求都失败。先点的没秒到，后点的可能秒到了。</p><h4 id="连接超时"><a href="#连接超时" class="headerlink" title="连接超时"></a>连接超时</h4><p>连接超时，通过连接池解决</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724142323355.png" alt="image-20210724142323355"></p><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>节省每次连接redis服务带来的消耗，把连接好的实例反复利用。</p><p>通过参数管理连接的行为</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JedisPoolUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getJedisPoolInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (JedisPoolUtil.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line">JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">poolConfig.setMaxTotal(<span class="number">200</span>);</span><br><span class="line">poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">poolConfig.setMaxWaitMillis(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">poolConfig.setBlockWhenExhausted(<span class="keyword">true</span>);</span><br><span class="line">poolConfig.setTestOnBorrow(<span class="keyword">true</span>);  <span class="comment">// ping  PONG</span></span><br><span class="line"> </span><br><span class="line">jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">&quot;192.168.44.168&quot;</span>, <span class="number">6379</span>, <span class="number">60000</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jedisPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != jedis) &#123;</span><br><span class="line">jedisPool.returnResource(jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接池参数</p><ul><li><p>MaxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了MaxTotal个jedis实例，则此时pool的状态为exhausted。</p></li><li><p> maxIdle：控制一个pool最多有多少个状态为idle(空闲)的jedis实例；</p></li><li><p> MaxWaitMillis：表示当borrow一个jedis实例时，最大的等待毫秒数，如果超过等待时间，则直接抛JedisConnectionException；</p></li><li><p> testOnBorrow：获得一个jedis实例的时候是否检查连接可用性（ping()）；如果为true，则得到的jedis实例均是可用的；</p></li></ul><h3 id="解决库存遗留"><a href="#解决库存遗留" class="headerlink" title="解决库存遗留"></a>解决库存遗留</h3><h4 id="lua脚本"><a href="#lua脚本" class="headerlink" title="lua脚本"></a>lua脚本</h4><ul><li>Lua 是一个小巧的<a href="http://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>，Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。</li><li>很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</li><li>这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</li><li><a href="https://www.w3cschool.cn/lua/">https://www.w3cschool.cn/lua/</a></li></ul><hr><p>LUA脚本在Redis中的优势：</p><ul><li><p>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</p></li><li><p>LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。</p></li><li><p>但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。</p></li><li><p>利用lua脚本淘汰用户，解决超卖问题。</p></li><li><p>redis 2.6版本以后，通过lua脚本解决<strong>争抢问题</strong>，实际上是<strong>redis</strong> <strong>利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p></li></ul><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724143222339.png" alt="image-20210724143222339"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> userid=KEYS[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">local</span> prodid=KEYS[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">local</span> qtkey=<span class="string">&quot;sk:&quot;</span>..prodid..<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> usersKey=<span class="string">&quot;sk:&quot;</span>..prodid.<span class="string">&quot;:usr&#x27;; </span></span><br><span class="line"><span class="string">local userExists=redis.call(&quot;</span>sismember<span class="string">&quot;,usersKey,userid);</span></span><br><span class="line"><span class="string">if tonumber(userExists)==1 then </span></span><br><span class="line"><span class="string">  return 2;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">local num= redis.call(&quot;</span>get<span class="string">&quot; ,qtkey);</span></span><br><span class="line"><span class="string">if tonumber(num)&lt;=0 then </span></span><br><span class="line"><span class="string">  return 0; </span></span><br><span class="line"><span class="string">else </span></span><br><span class="line"><span class="string">  redis.call(&quot;</span>decr<span class="string">&quot;,qtkey);</span></span><br><span class="line"><span class="string">  redis.call(&quot;</span>sadd<span class="string">&quot;,usersKey,userid);</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">return 1;</span></span><br></pre></td></tr></table></figure><h3 id="秒杀实现"><a href="#秒杀实现" class="headerlink" title="秒杀实现"></a>秒杀实现</h3><p>项目结构：</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724143708081.png" alt="image-20210724143708081"></p><h4 id="第一版，普通实现"><a href="#第一版，普通实现" class="headerlink" title="第一版，普通实现"></a>第一版，普通实现</h4><p>少量访问的情况下，秒杀正常，此时未达到并发效果。</p><p>使用工具ab模拟并发测试，会出现超卖情况。查看库存会出现负数。</p><h4 id="第二版，增加事务-乐观锁"><a href="#第二版，增加事务-乐观锁" class="headerlink" title="第二版，增加事务-乐观锁"></a>第二版，增加事务-乐观锁</h4><p>增加事务-乐观锁解决超卖问题，但出现遗留库存和连接超时</p><h4 id="第三版，连接池解决超时问题"><a href="#第三版，连接池解决超时问题" class="headerlink" title="第三版，连接池解决超时问题"></a>第三版，连接池解决超时问题</h4><h4 id="第四版，LUA脚本解决库存遗留问题"><a href="#第四版，LUA脚本解决库存遗留问题" class="headerlink" title="第四版，LUA脚本解决库存遗留问题"></a>第四版，LUA脚本解决库存遗留问题</h4><p>代码实现：</p><p>JedisPoolUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtil</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">JedisPoolUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getJedisPoolInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (JedisPoolUtil.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == jedisPool) &#123;</span><br><span class="line">JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">poolConfig.setMaxTotal(<span class="number">200</span>);</span><br><span class="line">poolConfig.setMaxIdle(<span class="number">32</span>);</span><br><span class="line">poolConfig.setMaxWaitMillis(<span class="number">100</span>*<span class="number">1000</span>);</span><br><span class="line">poolConfig.setBlockWhenExhausted(<span class="keyword">true</span>);</span><br><span class="line">poolConfig.setTestOnBorrow(<span class="keyword">true</span>);  <span class="comment">// ping  PONG</span></span><br><span class="line"> </span><br><span class="line">jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">&quot;192.168.44.168&quot;</span>, <span class="number">6379</span>, <span class="number">60000</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jedisPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(JedisPool jedisPool, Jedis jedis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != jedis) &#123;</span><br><span class="line">jedisPool.returnResource(jedis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecKill_redis.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.rolling.helper.IntegerTokenConverter;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.ShardedJedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKill_redis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Jedis jedis =<span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.44.168&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">System.out.println(jedis.ping());</span><br><span class="line">jedis.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//秒杀过程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1 uid和prodid非空判断</span></span><br><span class="line"><span class="keyword">if</span>(uid == <span class="keyword">null</span> || prodid == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 连接redis</span></span><br><span class="line"><span class="comment">//Jedis jedis = new Jedis(&quot;192.168.44.168&quot;,6379);</span></span><br><span class="line"><span class="comment">//通过连接池得到jedis对象</span></span><br><span class="line">JedisPool jedisPoolInstance = JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">Jedis jedis = jedisPoolInstance.getResource();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 拼接key</span></span><br><span class="line"><span class="comment">// 3.1 库存key</span></span><br><span class="line">String kcKey = <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:qt&quot;</span>;</span><br><span class="line"><span class="comment">// 3.2 秒杀成功用户key</span></span><br><span class="line">String userKey = <span class="string">&quot;sk:&quot;</span>+prodid+<span class="string">&quot;:user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监视库存</span></span><br><span class="line">jedis.watch(kcKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4 获取库存，如果库存null，秒杀还没有开始</span></span><br><span class="line">String kc = jedis.get(kcKey);</span><br><span class="line"><span class="keyword">if</span>(kc == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀还没有开始，请等待&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 判断用户是否重复秒杀操作</span></span><br><span class="line"><span class="keyword">if</span>(jedis.sismember(userKey, uid)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;已经秒杀成功了，不能重复秒杀&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span></span><br><span class="line"><span class="keyword">if</span>(Integer.parseInt(kc)&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀已经结束了&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7 秒杀过程</span></span><br><span class="line"><span class="comment">//使用事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"></span><br><span class="line"><span class="comment">//组队操作</span></span><br><span class="line">multi.decr(kcKey);</span><br><span class="line">multi.sadd(userKey,uid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(results == <span class="keyword">null</span> || results.size()==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;秒杀失败了....&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.1 库存-1</span></span><br><span class="line"><span class="comment">//jedis.decr(kcKey);</span></span><br><span class="line"><span class="comment">//7.2 把秒杀成功用户添加清单里面</span></span><br><span class="line"><span class="comment">//jedis.sadd(userKey,uid);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;秒杀成功了..&quot;</span>);</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SecKill_redisByScript.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.joran.conditional.ElseAction;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.ShardedJedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKill_redisByScript</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  org.slf4j.Logger logger =LoggerFactory.getLogger(SecKill_redisByScript.class) ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">JedisPool jedispool =  JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line"> </span><br><span class="line">Jedis jedis=jedispool.getResource();</span><br><span class="line">System.out.println(jedis.ping());</span><br><span class="line"></span><br><span class="line">Set&lt;HostAndPort&gt; set=<span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//doSecKill(&quot;201&quot;,&quot;sk:0101&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String secKillScript =<span class="string">&quot;local userid=KEYS[1];\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local prodid=KEYS[2];\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local qtkey=&#x27;sk:&#x27;..prodid..\&quot;:qt\&quot;;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local usersKey=&#x27;sk:&#x27;..prodid..\&quot;:usr\&quot;;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,usersKey,userid);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;if tonumber(userExists)==1 then \r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   return 2;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;end\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;local num= redis.call(\&quot;get\&quot; ,qtkey);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;if tonumber(num)&lt;=0 then \r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   return 0;\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;else \r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   redis.call(\&quot;decr\&quot;,qtkey);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;   redis.call(\&quot;sadd\&quot;,usersKey,userid);\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;end\r\n&quot;</span> + </span><br><span class="line"><span class="string">&quot;return 1&quot;</span> ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> String secKillScript2 = </span><br><span class="line"><span class="string">&quot;local userExists=redis.call(\&quot;sismember\&quot;,\&quot;&#123;sk&#125;:0101:usr\&quot;,userid);\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; return 1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doSecKill</span><span class="params">(String uid,String prodid)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">JedisPool jedispool =  JedisPoolUtil.getJedisPoolInstance();</span><br><span class="line">Jedis jedis=jedispool.getResource();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//String sha1=  .secKillScript;</span></span><br><span class="line">String sha1=  jedis.scriptLoad(secKillScript);</span><br><span class="line">Object result= jedis.evalsha(sha1, <span class="number">2</span>, uid,prodid);</span><br><span class="line"></span><br><span class="line">  String reString=String.valueOf(result);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals( reString )  ) &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;已抢空！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抢购成功！！！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals( reString )  )  &#123;</span><br><span class="line">System.err.println(<span class="string">&quot;该用户已抢过！！&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.err.println(<span class="string">&quot;抢购异常！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jedis.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SecKillServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.soap.AddressingFeature.Responses;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秒杀案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecKillServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecKillServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String userid = <span class="keyword">new</span> Random().nextInt(<span class="number">50000</span>) +<span class="string">&quot;&quot;</span> ;</span><br><span class="line">String prodid =request.getParameter(<span class="string">&quot;prodid&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean isSuccess=SecKill_redis.doSecKill(userid,prodid);</span></span><br><span class="line"><span class="keyword">boolean</span> isSuccess= SecKill_redisByScript.doSecKill(userid,prodid);</span><br><span class="line">response.getWriter().print(isSuccess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、Redis6持久化"><a href="#十、Redis6持久化" class="headerlink" title="十、Redis6持久化"></a>十、Redis6持久化</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724144454924.png" alt="image-20210724144454924"></p><p>Redis 提供了2个不同形式的持久化方式。</p><ul><li>RDB（Redis DataBase）</li><li>AOF（Append OfFile）</li></ul><h2 id="2-RDB"><a href="#2-RDB" class="headerlink" title="2. RDB"></a>2. RDB</h2><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724144602456.png" alt="image-20210724144602456"></p><hr><ul><li>RDB是什么？<ul><li>在指定的==时间间隔==内将内存中的数据集==快照==写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</li></ul></li><li>执行<ul><li>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。==<strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong>==。</li></ul></li><li>Fork<ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li><li> 在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</li><li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul></li></ul><hr><p>RDB持久化：</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724144922596.png" alt="image-20210724144922596"></p><hr><h3 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a><strong>dump.rdb文件</strong></h3><p>在redis.conf中配置文件名称，默认为dump.rdb</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724145004782.png" alt="image-20210724145004782"></p><p>配置：</p><p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p><p>dir “/myredis/“</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724145035673.png" alt="image-20210724145035673"></p><h3 id="如何触发RDB快照；保持策略"><a href="#如何触发RDB快照；保持策略" class="headerlink" title="如何触发RDB快照；保持策略"></a><strong>如何触发RDB快照；保持策略</strong></h3><p> 配置文件中默认的快照配置</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724145127453.png" alt="image-20210724145127453"></p><p>命令save VS bgsave</p><ul><li><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p></li><li><p>bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。</p></li><li><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p></li></ul><p>flushall命令：</p><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p><hr><p><strong>###SNAPSHOTTING快照###</strong></p><p>Save：</p><ul><li><p>格式：save 秒钟 写操作次数</p></li><li><p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p></li><li><p>默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次。</p></li><li><p>禁用</p></li><li><p>不设置save指令，或者给save传入空字符串</p></li></ul><p><strong>stop-writes-on-bgsave-error</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724145802515.png" alt="image-20210724145802515"></p><p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p><p><strong>rdbcompression</strong> <strong>压缩文件</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724145854277.png" alt="image-20210724145854277"></p><ul><li><p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p></li><li><p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p></li></ul><p><strong>rdbchecksum</strong> <strong>检查完整性</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724145941821.png" alt="image-20210724145941821"></p><ul><li><p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p></li><li><p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p></li><li><p>推荐yes.</p></li></ul><hr><p>rdb的备份</p><ul><li><p>先通过config get dir 查询rdb文件的目录 </p></li><li><p>将*.rdb的文件拷贝到别的地方</p></li><li><p>rdb的恢复</p><ul><li>关闭Redis</li><li>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</li><li> 启动Redis, 备份数据会直接加载</li></ul></li></ul><h3 id="RDB优势"><a href="#RDB优势" class="headerlink" title="RDB优势"></a>RDB优势</h3><ul><li><p>适合大规模的数据恢复</p></li><li><p>对数据完整性和一致性要求不高更适合使用</p></li><li><p>节省磁盘空间</p></li><li><p>恢复速度快</p></li></ul><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724150220032.png" alt="image-20210724150220032"></p><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul><li><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p></li><li><p>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</p></li><li><p>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</p></li></ul><h3 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h3><p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724150348015.png" alt="image-20210724150348015"></p><h2 id="3-AOF"><a href="#3-AOF" class="headerlink" title="3. AOF"></a>3. AOF</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</li></ul><h3 id="持久化流程"><a href="#持久化流程" class="headerlink" title="持久化流程"></a>持久化流程</h3><ol><li>客户端的请求写命令会被append追加到AOF缓冲区内；</li><li>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</li><li>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</li></ol><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724151327478.png" alt="image-20210724151327478"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h4><ul><li><p>可以在redis.conf中配置文件名称，默认为 appendonly.aof</p></li><li><p>AOF文件的保存路径，同RDB的路径一致。</p></li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</li></ul><h4 id="AOF启动、修复、恢复"><a href="#AOF启动、修复、恢复" class="headerlink" title="AOF启动、修复、恢复"></a>AOF启动、修复、恢复</h4><ul><li><p>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</p></li><li><p>正常恢复</p><ul><li>修改默认的appendonly no，改为yes</li><li>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li><li>恢复：重启redis然后重新加载</li></ul></li><li><p> 异常恢复</p></li><li><p> 修改默认的appendonly no，改为yes</p></li><li><p> 如遇到<strong>AOF文件损坏</strong>，通过/usr/local/bin/<strong>redis-check-aof–fix appendonly.aof</strong>进行恢复</p></li><li><p>备份被写坏的AOF文件</p></li><li><p>恢复：重启redis，然后重新加载</p></li></ul><h4 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h4><ul><li><p>appendfsync always</p><ul><li>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</li></ul></li><li><p>appendfsync everysec</p><ul><li>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</li></ul></li><li><p>appendfsync no</p><ul><li>redis不主动进行同步，把同步时机交给操作系统。</li></ul></li></ul><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a><strong>Rewrite压缩</strong></h4><ul><li><p>是什么：</p><ul><li>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</li></ul></li><li><p>重写原理，如何实现重写</p><ul><li>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</li></ul></li></ul><p>no-appendfsync-on-rewrite：</p><ul><li><p>如果 no-appendfsync-on-rewrite=yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p></li><li><p>如果 no-appendfsync-on-rewrite=no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p></li></ul><p>触发机制，何时重写</p><ul><li><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p></li><li><p>==重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写==。 </p></li><li><p>auto-aof-rewrite-percentage：设置重写的基准值，文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</p></li><li><p>auto-aof-rewrite-min-size：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p></li></ul><hr><p>例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,</p><p>如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </p><p>重写流程</p><ol><li><p>bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</p></li><li><p>主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p></li><li><p>子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p></li><li><ol><li>子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。</li><li>主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</li></ol></li><li><p>使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p></li></ol><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724152004141.png" alt="image-20210724152004141"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724152018815.png" alt="image-20210724152018815"></p><ul><li><p>备份机制更稳健，丢失数据概率更低。</p></li><li><p>可读的日志文本，通过操作AOF稳健，可以处理误操作。</p></li></ul><h3 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h3><ul><li><p>比起RDB占用更多的磁盘空间。</p></li><li><p>恢复备份速度要慢。</p></li><li><p>每次读写都同步的话，有一定的性能压力。</p></li><li><p>存在个别Bug，造成恢复不能。</p></li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724152119153.png" alt="image-20210724152119153"></p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><strong>用哪个好</strong></p><ul><li><p>官方推荐两个都启用。</p></li><li><p>如果对数据不敏感，可以选单独用RDB。</p></li><li><p>不建议单独用 AOF，因为可能会出现Bug。</p></li><li><p>如果只是做纯内存缓存，可以都不用。</p></li></ul><hr><p>官方：</p><ul><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p> AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾. </p></li><li><p> Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</p></li><li><p> 只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</p></li><li><p>同时开启两种持久化方式</p></li><li><p>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</p></li><li><p> RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？ </p></li><li><p> 建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p></li><li><p> 性能建议</p></li><li><p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</p></li><li><p>如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</p></li><li><p>代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</p></li><li><p>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</p></li><li><p>默认超过原大小100%大小时重写可以改到适当的数值。</p></li></ul><h1 id="十一、Redis6的主从复制"><a href="#十一、Redis6的主从复制" class="headerlink" title="十一、Redis6的主从复制"></a>十一、Redis6的主从复制</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ul><li>是什么<ul><li>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，<strong>Master</strong>以写为主，Slave以读为主</li></ul></li><li>能干什么<ul><li>读写分离，性能扩展</li><li>容灾快速恢复</li></ul></li></ul><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724152612945.png" alt="image-20210724152612945"></p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><ul><li><p>拷贝多个redis.conf文件include(写绝对路径)</p></li><li><p>开启daemonize yes</p></li><li><p>Pid文件名字pidfile</p></li><li><p>指定端口port</p></li><li><p>Log文件名字</p></li><li><p>dump.rdb名字dbfilename</p></li><li><p>Appendonly 关掉或者换名字</p></li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p> <strong>新建redis6379.conf，填写以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure><p><strong>新建redis6380.conf，填写以下内容</strong></p><p><strong>新建redis6381.conf，填写以下内容</strong></p><hr><p><code>slave-priority 10</code></p><p>设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认100</p><hr><p><strong>启动三台redis服务器</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724152948970.png" alt="image-20210724152948970"></p><p><strong>查看三台主机运行情况</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724153008873.png" alt="image-20210724153008873"></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724153015610.png" alt="image-20210724153015610"></p><hr><p><code>info replication</code></p><p>打印主从复制的相关信息</p><hr><p><strong>配从(库)不配主(库)</strong></p><p><code>slaveof &lt;ip&gt;&lt;port&gt;</code></p><p>成为某个实例的从服务器</p><ul><li><p>在6380和6381上执行: slaveof 127.0.0.1 6379<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724153125404.png" alt="image-20210724153125404"></p></li><li><p>在主机上写，在从机上可以读取数据。在从机上写数据报错</p></li><li><p>主机挂掉，重启就行，一切如初</p></li><li><p>从机重启需重设：slaveof 127.0.0.1 6379</p></li><li><p>可以将配置增加到文件中。永久生效。</p></li></ul><h3 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h3><h4 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h4><p>切入点问题：</p><ul><li><p>slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</p></li><li><p>从机是否可以写？set可否？ </p></li><li><p>主机shutdown后情况如何？从机是上位还是原地待命？</p></li><li><p>主机又回来了后，主机新增记录，从机还能否顺利复制？ </p></li><li><p>其中一台从机down后情况如何？依照原有它能跟上大部队吗？</p></li></ul><h4 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h4><ul><li><p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p></li><li><p>用 <code>slaveof &lt;ip&gt;&lt;port&gt;</code></p></li><li><p>中途变更转向:会清除之前的数据，重新建立拷贝最新的</p></li><li><p>风险是一旦某个slave宕机，后面的slave都没法备份</p></li><li><p>主机挂了，从机还是从机，无法写数据了</p></li></ul><h4 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h4><ul><li><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p></li><li><p>用 slaveof no one  将从机变为主机。</p></li></ul><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ul><li><p>Slave启动成功连接到master后会发送一个sync命令</p></li><li><p>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</p></li><li><p>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p></li><li><p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</p></li><li><p>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</p></li></ul><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724155322508.png" alt="image-20210724155322508"></p><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724155349919.png" alt="image-20210724155349919"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>调整为一主二仆模式，6379带着6380、6381<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724155452122.png" alt="image-20210724155452122"></li><li><strong>自定义的/myredis目录下新建sentinel.conf文件，名字绝不能错</strong></li><li> <strong>配置哨兵,填写内容</strong></li><li><code>sentinel monitor mymaster 127.0.0.1 6379 1</code></li><li>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。 </li><li>启动哨兵<ul><li>/usr/local/bin</li><li>redis做压测可以用自带的redis-benchmark工具</li><li>执行<code>redis-sentinel /myredis/sentinel.conf</code> </li></ul></li><li>当主机挂掉，从机选举中产生新的主机<ul><li>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</li><li>哪个从机会被选举为主机呢？根据优先级别：slave-priority </li><li>原主机重启后会变为从机。</li></ul></li><li>复制延时<ul><li>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</li></ul></li></ul><h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724155832383.png" alt="image-20210724155832383"></p><ul><li><p>优先级在redis.conf中默认：slave-priority 100，值越小优先级越高</p></li><li><p>偏移量是指获得原主机数据最全的</p></li><li><p>每个redis实例启动后都会随机生成一个40位的runid</p></li></ul><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisSentinelPool jedisSentinelPool=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Jedis <span class="title">getJedisFromSentinel</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(jedisSentinelPool==<span class="keyword">null</span>)&#123;</span><br><span class="line">            Set&lt;String&gt; sentinelSet=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            sentinelSet.add(<span class="string">&quot;192.168.11.103:26379&quot;</span>);</span><br><span class="line"></span><br><span class="line">            JedisPoolConfig jedisPoolConfig =<span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(<span class="number">10</span>); <span class="comment">//最大可用连接数</span></span><br><span class="line">jedisPoolConfig.setMaxIdle(<span class="number">5</span>); <span class="comment">//最大闲置连接数</span></span><br><span class="line">jedisPoolConfig.setMinIdle(<span class="number">5</span>); <span class="comment">//最小闲置连接数</span></span><br><span class="line">jedisPoolConfig.setBlockWhenExhausted(<span class="keyword">true</span>); <span class="comment">//连接耗尽是否等待</span></span><br><span class="line">jedisPoolConfig.setMaxWaitMillis(<span class="number">2000</span>); <span class="comment">//等待时间</span></span><br><span class="line">jedisPoolConfig.setTestOnBorrow(<span class="keyword">true</span>); <span class="comment">//取连接的时候进行一下测试 ping pong</span></span><br><span class="line"></span><br><span class="line">jedisSentinelPool=<span class="keyword">new</span> JedisSentinelPool(<span class="string">&quot;mymaster&quot;</span>,sentinelSet,jedisPoolConfig);</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、Redis6集群"><a href="#十二、Redis6集群" class="headerlink" title="十二、Redis6集群"></a>十二、Redis6集群</h1><h2 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p>容量不够，redis如何进行扩容？</p></li><li><p>并发写操作， redis如何分摊？</p></li></ul><p>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</p><p>之前通过代理主机来解决，但是redis3.0中提供了解决方案。就是无中心化集群配置。</p><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><ul><li><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p></li><li><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p></li></ul><h2 id="2-配置集群"><a href="#2-配置集群" class="headerlink" title="2. 配置集群"></a>2. 配置集群</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>删除持久化数据：将rdb,aof文件都删除掉。</p><p>制作六个实例，<strong>6379,6380,6381,6389,6390,6391</strong>。包括一主二从及对应的备份主机。</p><p>配置基本信息：</p><ul><li><p>开启daemonize yes</p></li><li><p>Pid文件名字</p></li><li><p>指定端口</p></li><li><p>Log文件名字</p></li><li><p>Dump.rdb名字</p></li><li><p>Appendonly 关掉或者换名字</p></li></ul><hr><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Redis cluster配置修改：</p><p>cluster-enabled yes  打开集群模式</p><p>cluster-config-file nodes-6379.conf 设定节点配置文件名</p><p>cluster-node-timeout 15000  设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include /home/bigdata/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">dir &quot;/home/bigdata/redis_cluster&quot;</span><br><span class="line">logfile &quot;/home/bigdata/redis_cluster/redis_err_6379.log&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><p>修改好redis6379.conf文件，拷贝多个redis.conf文件<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724160651124.png" alt="image-20210724160651124"></p><p>修改另外的五个文件<br>查找替换使用：:%s/6379/6380 </p><hr><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动6个redis服务</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724160837553.png" alt="image-20210724160837553"></p><p>将六个节点合成一个集群</p><p>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161017207.png" alt="image-20210724161017207"></p><p>组合：</p><p>cd /opt/redis-6.2.1/src</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.11.101:6379 192.168.11.101:6380 192.168.11.101:6381 192.168.11.101:6389 192.168.11.101:6390 192.168.11.101:6391</span><br></pre></td></tr></table></figure><p>此处不要用127.0.0.1， 请用真实IP地址</p><p>–replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>普通方式登录</p><p>可能直接进入读主机，存储数据时，会出现MOVED重定向操作。所以，应该以集群方式登录。</p><p>  <strong>-c</strong> <strong>采用集群策略连接，设置数据会自动切换到相应的写主机</strong></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161251072.png" alt="image-20210724161251072"></p><p>通过 cluster nodes 命令查看集群信息<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161315326.png" alt="image-20210724161315326"></p><p><strong>redis cluster</strong> <strong>如何分配这六个节点?</strong></p><p>一个集群至少要有三个主节点。</p><p>选项 –cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p><p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。</p><p><strong>什么是slots</strong></p><p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， </p><p>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p><p>节点 A 负责处理 0 号至 5460 号插槽。</p><p>节点 B 负责处理 5461 号至 10922 号插槽。</p><p>节点 C 负责处理 10923 号至 16383 号插槽。</p><hr><p><strong>在集群中录入值</strong></p><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p><p>redis-cli客户端提供了 –c 参数实现自动重定向。</p><p>如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</p><p>不在一个slot下的键值，是不能使用mget,mset等多键操作。<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161617057.png" alt="image-20210724161617057"></p><p>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161629056.png" alt="image-20210724161629056"></p><hr><p><strong>查询集群中的值</strong></p><p>CLUSTER GETKEYSINSLOT <slot><count> 返回 count 个 slot 槽中的键。<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161709591.png" alt="image-20210724161709591"></count></slot></p><hr><p><strong>故障恢复</strong></p><p>如果主节点下线？从节点能否自动升为主节点？注意：15秒超时<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724161758060.png" alt="image-20210724161758060"></p><p>主节点恢复后，主从关系会如何？主节点回来变成从机。</p><p>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。</p><p>redis.conf中的参数 cluster-require-full-coverage</p><h2 id="3-集群的Jedis开发"><a href="#3-集群的Jedis开发" class="headerlink" title="3. 集群的Jedis开发"></a>3. 集群的Jedis开发</h2><p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p><p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClusterTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">     Set&lt;HostAndPort&gt;set =<span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">     set.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;192.168.31.211&quot;</span>,<span class="number">6379</span>));</span><br><span class="line">     JedisCluster jedisCluster=<span class="keyword">new</span> JedisCluster(set);</span><br><span class="line">     jedisCluster.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">     System.out.println(jedisCluster.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-评价"><a href="#4-评价" class="headerlink" title="4. 评价"></a>4. 评价</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>实现扩容</p></li><li><p>分摊压力</p></li><li><p>无中心配置相对简单</p></li></ul><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><ul><li><p>多键操作是不被支持的 </p></li><li><p>多键的Redis事务是不被支持的。lua脚本不被支持</p></li><li><p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p></li></ul><h1 id="十三、Redis6应用问题解决"><a href="#十三、Redis6应用问题解决" class="headerlink" title="十三、Redis6应用问题解决"></a>十三、Redis6应用问题解决</h1><h2 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724162127252.png" alt="image-20210724162127252"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决方案：</p><ol><li> <strong>对空值缓存：</strong></li></ol><ul><li>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</li></ul><ol start="2"><li><p><strong>设置可访问的名单（白名单）：</strong></p><ul><li>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</li></ul></li><li><p> <strong>采用布隆过滤器</strong>：</p></li></ol><ul><li>(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</li><li>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)</li><li>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</li></ul><p>4。 <strong>进行实时监控：</strong></p><ul><li>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</li></ul><h2 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2. 缓存击穿"></a>2. 缓存击穿</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724162346641.png" alt="image-20210724162346641"></p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p><p>解决问题：</p><ol><li><p>预先设置热门数据：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p></li><li><p>实时调整：现场监控哪些数据热门，实时调整key的过期时长</p></li><li><p>使用锁：</p><ol><li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</li><li>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</li><li>  当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</li><li> 当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</li></ol></li></ol><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724162525787.png" alt="image-20210724162525787"></p><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><p>正常访问<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724162608772.png" alt="image-20210724162608772"></p><p>缓存失效瞬间<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724162627340.png" alt="image-20210724162627340"></p><h3 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h3><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><p>解决方案：</p><ol><li><p><strong>构建多级缓存架构：</strong>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p></li><li><p> <strong>使用锁或队列：</strong></p></li></ol><ul><li>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</li></ul><ol start="3"><li><p><strong>设置过期标志更新缓存：</strong></p><ul><li>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</li></ul></li><li><p> <strong>将缓存失效时间分散开：</strong></p></li></ol><ul><li>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ul><h2 id="4-分布式锁"><a href="#4-分布式锁" class="headerlink" title="4. 分布式锁"></a>4. 分布式锁</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis等）</p></li><li><p>基于Zookeeper</p></li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li><p>性能：redis最高</p></li><li><p>可靠性：zookeeper最高</p></li></ol><p>这里，我们就基于redis实现分布式锁。</p><h3 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h3><p>redis:命令</p><p># set sku:1:info “OK” NX PX 10000</p><p>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</p><p>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</p><p>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</p><p>XX ：只在键已经存在时，才对键进行设置操作。</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724162844897.png" alt="image-20210724162844897"></p><ol><li><p>多个客户端同时获取锁（setnx）</p></li><li><p>获取成功，执行业务逻辑{从db获取数据，放入缓存}，执行完成释放锁（del）</p></li><li><p>其他客户端等待重试</p></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Redis:set num 0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testLock&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1获取锁，setne</span></span><br><span class="line">    Boolean lock = redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="comment">//2获取锁成功、查询num的值</span></span><br><span class="line">    <span class="keyword">if</span>(lock)&#123;</span><br><span class="line">        Object value = redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">//2.1判断num为空return</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(value))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.2有值就转成成int</span></span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(value+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//2.3把redis的num加1</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>, ++num);</span><br><span class="line">        <span class="comment">//2.4释放锁，del</span></span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//3获取锁失败、每隔0.1秒再获取</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            testLock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务集群，通过网关压力测试：<br><code>ab -n 1000 -c 100 http://192.168.140.1:8080/test/testLock</code><br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163028906.png" alt="image-20210724163028906"></p><p>查看redis中num的值：<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163053387.png" alt="image-20210724163053387"></p><p>基本实现。</p><p>问题：setnx刚好获取到锁，业务逻辑出现异常，导致锁无法释放</p><p>解决：设置过期时间，自动释放锁。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h4><p>设置过期时间有两种方式：</p><ol><li><p>首先想到通过expire设置过期时间（缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放）</p></li><li><p>在set时指定过期时间（推荐）</p></li></ol><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163216881.png" alt="image-20210724163216881"></p><p>设置过期时间：<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163237082.png" alt="image-20210724163237082"></p><p>压力测试肯定也没有问题。自行测试</p><p>问题：可能会释放其他服务器的锁。</p><p>场景：如果业务逻辑的执行时间是7s。执行流程如下</p><ol><li><p>index1业务逻辑没执行完，3秒后锁被自动释放。</p></li><li><p>index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p></li><li><p>index3获取到锁，执行业务逻辑</p></li><li><p>index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s就被别人释放。</p></li></ol><p>最终等于没锁的情况。</p><p>解决：setnx获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p><h4 id="UUID防误删"><a href="#UUID防误删" class="headerlink" title="UUID防误删"></a>UUID防误删</h4><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163336647.png" alt="image-20210724163336647"></p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163342740.png" alt="image-20210724163342740"></p><p>问题：删除操作缺乏原子性。</p><p>场景：</p><ol><li><p>index1执行删除时，查询到的lock值确实和uuid相等<br>uuid=v1<br>set(lock,uuid)；<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163440362.png" alt="image-20210724163440362"></p></li><li><p>index1执行删除前，lock刚好过期时间已到，被redis自动释放<br>在redis中没有了lock，没有了锁。<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163452545.png" alt="image-20210724163452545"></p></li><li><p>index2获取了lock<br>index2线程获取到了cpu的资源，开始执行方法<br>uuid=v2<br>set(lock,uuid)；</p></li><li><p>index1执行删除，此时会把index2的lock删除<br>index1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，开始执行<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163532764.png" alt="image-20210724163532764"><br>删除的index2的锁！</p></li></ol><h4 id="LUA脚本保证删除的原子性"><a href="#LUA脚本保证删除的原子性" class="headerlink" title="LUA脚本保证删除的原子性"></a>LUA脚本保证删除的原子性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;testLockLua&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLockLua</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span></span><br><span class="line">    String uuid = UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span></span><br><span class="line">    String skuId = <span class="string">&quot;25&quot;</span>; <span class="comment">// 访问skuId 为25号的商品 100008348542</span></span><br><span class="line">    String locKey = <span class="string">&quot;lock:&quot;</span> + skuId; <span class="comment">// 锁住的是每个商品的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 获取锁</span></span><br><span class="line">    Boolean lock = redisTemplate.opsForValue().setIfAbsent(locKey, uuid, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一种： lock 与过期时间中间不写任何的代码。</span></span><br><span class="line">    <span class="comment">// redisTemplate.expire(&quot;lock&quot;,10, TimeUnit.SECONDS);//设置过期时间</span></span><br><span class="line">    <span class="comment">// 如果true</span></span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        <span class="comment">// 执行的业务逻辑开始</span></span><br><span class="line">        <span class="comment">// 获取缓存中的num 数据</span></span><br><span class="line">        Object value = redisTemplate.opsForValue().get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果是空直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span></span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(value + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 使num 每次+1 放入缓存</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;num&quot;</span>, String.valueOf(++num));</span><br><span class="line">        <span class="comment">/*使用lua脚本来锁*/</span></span><br><span class="line">        <span class="comment">// 定义lua 脚本</span></span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        <span class="comment">// 使用redis执行lua执行</span></span><br><span class="line">        DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">        redisScript.setScriptText(script);</span><br><span class="line">        <span class="comment">// 设置一下返回值类型 为Long</span></span><br><span class="line">        <span class="comment">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span></span><br><span class="line">        <span class="comment">// 那么返回字符串与0 会有发生错误。</span></span><br><span class="line">        redisScript.setResultType(Long.class);</span><br><span class="line">        <span class="comment">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span></span><br><span class="line">        redisTemplate.execute(redisScript, Arrays.asList(locKey), uuid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他线程等待</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 睡眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 睡醒了之后，调用方法。</span></span><br><span class="line">            testLockLua();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lua 脚本详解：<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163702282.png" alt="image-20210724163702282"></p><p>项目中正确使用：</p><ol><li>定义key，key应该是为每个sku定义的，也就是每个sku有一把锁。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String locKey =&quot;lock:&quot;+skuId; // 锁住的是每个商品的数据</span><br><span class="line">Boolean lock = redisTemplate.opsForValue().setIfAbsent(locKey, uuid,3,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724163733577.png" alt="image-20210724163733577"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 从redis中获取锁,set k1 v1 px 20000 nx</span></span><br><span class="line">String uuid = UUID.randomUUID().toString();</span><br><span class="line">Boolean lock = <span class="keyword">this</span>.redisTemplate.opsForValue()</span><br><span class="line">      .setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">2</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>使用lua释放锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 释放锁 del</span></span><br><span class="line">String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"><span class="comment">// 设置lua脚本返回的数据类型</span></span><br><span class="line">DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line"><span class="comment">// 设置lua脚本返回类型为Long</span></span><br><span class="line">redisScript.setResultType(Long.class);</span><br><span class="line">redisScript.setScriptText(script);</span><br><span class="line">redisTemplate.execute(redisScript, Arrays.asList(<span class="string">&quot;lock&quot;</span>),uuid);</span><br></pre></td></tr></table></figure><p>重试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">testLock();</span><br></pre></td></tr></table></figure><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p><p>- 互斥性。在任意时刻，只有一个客户端能持有锁。</p><p>- 不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p><p>- 解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p><p>- 加锁和解锁必须具有原子性。</p><h1 id="十四、Redis6-0新功能"><a href="#十四、Redis6-0新功能" class="headerlink" title="十四、Redis6.0新功能"></a>十四、Redis6.0新功能</h1><h2 id="1-ACL"><a href="#1-ACL" class="headerlink" title="1. ACL"></a>1. ACL</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p><p>（1）接入权限:用户名和密码 </p><p>（2）可以执行的命令 </p><p>（3）可以操作的 KEY</p><p>参考官网：<a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p><h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><p>1、使用acl list命令展现用户权限列表</p><p>（1）数据说明<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164048831.png" alt="image-20210724164048831"></p><p>2、使用acl cat命令</p><p>（1）查看添加权限指令类别<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164107855.png" alt="image-20210724164107855"></p><p>（2）加参数类型名可以查看类型下具体命令<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164124540.png" alt="image-20210724164124540"></p><p>3、使用acl whoami命令查看当前用户<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164140268.png" alt="image-20210724164140268"></p><p>4、使用aclsetuser命令创建和编辑用户ACL</p><p>（1）ACL规则</p><p>下面是有效ACL规则的列表。某些规则只是用于激活或删除标志，或对用户ACL执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</p><p>  ACL规则  ：</p><table><thead><tr><th>类型</th><th>参数</th><th></th></tr></thead><tbody><tr><td>启动和禁用用户</td><td>on</td><td>激活某用户账号</td></tr><tr><td></td><td>off</td><td>禁用某用户账号。注意，已验证的连接仍然可以工作。如果默认用户被标记为off，则新连接将在未进行身份验证的情况下启动，并要求用户使用AUTH选项发送AUTH或HELLO，以便以某种方式进行身份验证。</td></tr><tr><td>权限的添加删除</td><td><code>+&lt;command&gt;</code></td><td>将指令添加到用户可以调用的指令列表中</td></tr><tr><td></td><td><code>-&lt;command&gt;</code></td><td>从用户可执行指令列表移除指令</td></tr><tr><td></td><td><code>+@&lt;category&gt;</code></td><td>添加该类别中用户要调用的所有指令，有效类别为@admin、@set、@sortedset…等，通过调用ACL CAT命令查看完整列表。特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。</td></tr><tr><td></td><td><code>-@&lt;actegory&gt;  </code></td><td>从用户可调用指令中移除类别</td></tr><tr><td></td><td><code>allcommands</code></td><td>+@all的别名</td></tr><tr><td></td><td><code>nocommand</code></td><td>-@all的别名</td></tr><tr><td>可操作键的添加或删除</td><td><code>~&lt;pattern&gt;</code></td><td>添加可作为用户可操作的键的模式。例如~*允许所有的键</td></tr></tbody></table><p>（2）通过命令创建新用户默认权限</p><p>acl setuser user1<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164851893.png" alt="image-20210724164851893"></p><p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p><p>（3）设置有用户名、密码、ACL权限、并启用的用户</p><p>acl setuser user2 on &gt;password ~cached:* +get|<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164912130.png" alt="image-20210724164912130"></p><p>(4)切换用户，验证权限<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724164933886.png" alt="image-20210724164933886"></p><h2 id="2-IO多线程"><a href="#2-IO多线程" class="headerlink" title="2. IO多线程"></a>2. IO多线程</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><p>Redis6终于支撑多线程了，告别单线程了吗？</p><p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Redis 6 加入多线程,但跟 Memcached 这种从 IO处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:<br><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165036380.png" alt="image-20210724165036380"></p><p>另外，多线程IO默认也是不开启的，需要再配置文件中配置</p><p>io-threads-do-reads yes </p><p>io-threads 4</p><h2 id="3-工具支持Cluster"><a href="#3-工具支持Cluster" class="headerlink" title="3. 工具支持Cluster"></a>3. 工具支持Cluster</h2><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测。</p><p><img src="/2021/07/22/SQL-2021-07-22-Redis6/image-20210724165122703.png" alt="image-20210724165122703"></p><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><p>Redis6新功能还有：</p><p>1、RESP3新的 Redis 通信协议：优化服务端与客户端之间通信</p><p>2、Client side caching客户端缓存：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。</p><p>3、Proxy集群代理模式：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用cluster的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多Key操作。</p><p>4、Modules API</p><p>Redis 6中模块API开发进展非常大，因为Redis Labs为了开发复杂的功能，从一开始就用上Redis模块。Redis可以变成一个框架，利用Modules来构建不同系统，而不需要从头开始写然后还要BSD许可。Redis一开始就是一个向编写各种系统开放的平台。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;NoSQL数据库简介&lt;/li&gt;
&lt;li&gt;Redis6概述和安装&lt;/li&gt;
&lt;li&gt;常用五大数据类型&lt;/li&gt;
&lt;li&gt;Redis6配置文件详解&lt;/li&gt;
&lt;li&gt;Redis6的发布和订阅&lt;/li&gt;
&lt;li&gt;Redis6新数据类型&lt;/li&gt;
&lt;li&gt;Jedis操作</summary>
      
    
    
    
    <category term="工具" scheme="http://stary2020.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Redis" scheme="http://stary2020.gitee.io/tags/Redis/"/>
    
    <category term="数据库" scheme="http://stary2020.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JVM入门</title>
    <link href="http://stary2020.gitee.io/2021/07/22/java-2021-07-22-JVM/"/>
    <id>http://stary2020.gitee.io/2021/07/22/java-2021-07-22-JVM/</id>
    <published>2021-07-22T01:25:34.000Z</published>
    <updated>2021-08-19T02:34:08.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、jvm概述"><a href="#一、jvm概述" class="headerlink" title="一、jvm概述"></a>一、jvm概述</h1><p>jvm与java体系结构</p><ul><li>前言</li><li>面向人群及参考书目</li><li>java及jvm简介</li><li>java发展的重大事件</li><li>虚拟机与java虚拟机</li><li>jvm的整体结构</li><li>java代码执行流程</li><li>jvm发架构模型</li><li>jvm的生命周期</li><li>jvm的发展历程</li></ul><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>问题：</p><ul><li>运行着的线上系统突然卡死，系统无法访问，甚至直接OOM==（ OOM，全称“Out Of Memory”==，翻译成中文就是“内存用完了”，来源于java.lang.OutOfMemoryError。当JVM因为没有足够的内存来为对象分配空间并且垃圾回收器也已经没有空间可回收时，就会抛出这个error（注：非exception，因为这个问题已经严重到不足以被应用处理）。）</li><li>想解决线上jvm GC问题，但却无从下手</li><li>新项目上线，对各种jvm参数设置不了解</li><li>面试：实际项目中如何调优jvm参数，如何解决GC、OOM等问题</li></ul><p>应用程序–》框架–》java API–》jvm</p><p>架构师：</p><ul><li>应该如何让系统更快</li><li>如何避免系统出现瓶颈</li></ul><p>高年薪：</p><ul><li>参与现有系统的性能优化，重构，保证平台性能和稳定性</li><li>根据业务场景和需求，决定技术方向，做技术选型</li><li>能够独立架构和设计海量数据下高并发分布式解决方案，满足功能和非功能需求</li><li>解决各类潜在系统风险，核心功能的架构与代码编写</li><li>分析系统瓶颈。解决各种疑难杂症，性能调优等</li></ul><p>GC（Garbage Collection）：</p><ul><li>垃圾收集机制为我们打理了很多繁琐的工作，大大提高了开发的效率，但是，垃圾收集也不是万能的，懂得JVM内部的内存结构，工作机制，是设计高扩展性应用和诊断运行时问题的基础，也是java工程师进阶的必备技能。</li></ul><h2 id="2-面向人群"><a href="#2-面向人群" class="headerlink" title="2.面向人群"></a>2.面向人群</h2><ul><li>拥有一定开发经验的java平台开发人员</li><li>软件设计师、架构师</li><li>系统调优人员</li><li>有一定的java编程基础并希望进一步理解java的程序员</li><li>虚拟机爱好者，jvm实践者</li></ul><p>参考书目：</p><p>《The java Virtual Machine Specification》</p><p>中文版：《深入理解Java虚拟机》第三版</p><h2 id="3-java及jvm简介"><a href="#3-java及jvm简介" class="headerlink" title="3.java及jvm简介"></a>3.java及jvm简介</h2><h4 id="java生态圈"><a href="#java生态圈" class="headerlink" title="java生态圈"></a>java生态圈</h4><ul><li>平台</li><li>文化</li><li>社区</li></ul><h4 id="跨平台的语言：java"><a href="#跨平台的语言：java" class="headerlink" title="跨平台的语言：java"></a>跨平台的语言：java</h4><p>java程序–》字节码文件–》win版JVM、Linux版JVM、Mac版JVM</p><p>java程序可以在多个平台上运行，“一次编译，四处运行”</p><h4 id="跨语言的平台：JVM"><a href="#跨语言的平台：JVM" class="headerlink" title="跨语言的平台：JVM"></a>跨语言的平台：JVM</h4><p>不同种类的语言，编译成字节码文件后，都可以在JVM上运行</p><p>字节码：</p><ul><li>我们平时说的java字节码，指的是用java语言编译成的字节码。准确的说，任何能在JVM平台上执行的字节码格式都是一样的。所以应该统称为：JVM字节码</li><li>不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的JVM上运行</li><li>Java虚拟机与Java语言并没有必然的联系，它只与特定的二进制文件格式——Class文件格式所关联，Class文件中包含了java虚拟机指令集（或者称为字节码、bytecodes）和符号表，还有一些其他辅助信息。</li></ul><p>多语言混合编程：</p><ul><li>java平台上的多语言混合编程正成为主流，通过特定领域的语言去解决特定领域的问题是当前软件开发应对日趋复杂的项目需求的一个方向</li><li>例如：一个项目之中，并行处理用Clojure语言编写，展示层使用JRuby/Rails，中间层则是Java，每个应用层都将使用不同的编程语言来完成，而且，接口对每一层的开发者都是透明的，各种语言之间的交互不存在任何困难，就像使用自己的语言的原生API一样方便，因为他们最终都运行在一个虚拟机之上。</li><li>对这些运行与java虚拟机之上、java之外的语言，来自系统级的、底层的支持正在快速增强，以JSR-292为核心的一系列项目和功能改进，推动Java虚拟机从“java语言的虚拟机”向“多语言虚拟机”的方向发展</li></ul><h2 id="4-java发展的重大事件"><a href="#4-java发展的重大事件" class="headerlink" title="4.java发展的重大事件"></a>4.java发展的重大事件</h2><ul><li>1990年，在Sun计算机公司中，由Patrick Naughton、 MikeSheridan及James Gosling 领导的小组Green Team,开发出的新的程序语言，命名为0ak,后期命名为Java</li><li>1995年，Sun正式发 布Java和HotJava产品，Java 首次公开亮相。</li><li>1996年1月23日Sun Microsystems发布 了JDK 1.0。</li><li>1998年，JDK 1.2版本发布。同时，Sun发布了JSP/Servlet、 EJB规范，以及将Java分成了J2EE、 J2SE和J2ME。这 表明了Java开始向企业、 桌面应用和移动设备应用3大领域挺进。</li><li>2000年，JDK 1.3发布，Java HotSpot Virtual Machinei正式发布，成为Java的默认虚拟机。</li><li>2002年，JDK 1.4发布，古老的Classic虚拟机退出历史舞台。</li><li>2003年年底，Java平台的Scalai正式发布，同年Groovy也加入了Java阵营。</li><li>2004年，JDK 1.5发布。同时JDK 1.5改 名为JavaSE 5.0。</li><li>2006年，JDK 6发布。同年，Java开源并建立了OpenJDK。 顺理成章，Hotspot虚拟机也成为了OpenJDK中的默认虚拟机。</li><li>2007年，Java平台迎来了新伙伴Clojure。</li><li>2008年，Oracle收购了BEA, 得到了JRockit 虚拟机。</li><li>2009年，Twitter宜布把后台大部分程序从Ruby迁移到Scala,这是Java平台的又一次大规模应用。.</li><li>2010年，oracle收购了Sun,获得Java商标和最具价值的Hotspot虚拟机。此时，0racle拥有市场占用率最高的两款虚拟机Hotspot和JRockit,并计划在未来对它们进行整合: HotRockit</li><li>2011年，JDK7发布。在JDK 1.7u4中，正式启用了新的垃圾回收器G1。</li><li>2014年三月，JDK8发布。历史性版本。</li><li>2017年，JDK9发布。将G1设置为默认GC，替代CHS</li><li>同年，IBM的J9开源，形成了现在的open J9社区</li><li>2018年，Android的Java侵权案判决，Google赔偿oracleit88亿美元</li><li>同年，Oracle宣告JavaEE成为历史名词，JDBC、 JMS、Servlet赠了Eclipse基金会</li><li>同年，JDK11发布， LTS版木的JDK, 发布革命性的zGC,调整JDK授权许可</li><li>2019年，JDK12发布， 加入RedHat领导开发的Shenandoah GC<br>A</li></ul><h2 id="5-虚拟机与java虚拟机"><a href="#5-虚拟机与java虚拟机" class="headerlink" title="5.虚拟机与java虚拟机"></a>5.虚拟机与java虚拟机</h2><ul><li>所谓虚拟机（Virtual Machine），就是一台虚拟的计算机，它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机<ul><li>Visual Box，VMware就属于系统虚拟机，他们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台</li><li>程序虚拟机的典型代表就是Java虚拟机，它专门为执行单个计算机程序而设计，在Java虚拟机中执行的指令我们称为Java字节码指令</li></ul></li><li>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中</li><li>JVM是运行在操作系统之上的，它与硬件没有直接的交互</li></ul><h2 id="6-jvm的整体结构"><a href="#6-jvm的整体结构" class="headerlink" title="6.jvm的整体结构"></a>6.jvm的整体结构</h2><ul><li>HotSpot VM是目前市面上高性能虚拟机的代表作之一</li><li>它采用解释器与即时编译器并存的架构</li><li>在今天，Java程序的运行性能已经渐渐达到了可以和C、C++一较高下的地步</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722191927638.png" alt="image-20210722191927638"></p><h2 id="7-java代码执行流程"><a href="#7-java代码执行流程" class="headerlink" title="7.java代码执行流程"></a>7.java代码执行流程</h2><ul><li>java源码</li><li>java编译器<ul><li>词法分析</li><li>语法分析</li><li>语法、抽象语法树</li><li>语义分析</li><li>注解抽象语法树</li><li>字节码生成器</li></ul></li><li>字节码</li><li>Java虚拟机<ul><li>类加载器</li><li>字节码校验器</li><li>翻译字节码</li><li>JIT编译器（编译执行）</li></ul></li><li>操作系统</li></ul><p>注意：</p><ul><li>java编译器编译过程中，任何一个节点执行失败就会造成编译失败</li><li>虽然各个平台的Java虚拟机内部实现细节不尽相同，但是他们共同执行的字节码内容却是一样的</li><li>JVM的主要任务就是负责将字节码装载到其内部，解释、编译为对应平台上的机器指令。即：汇编语言，执行。</li><li>Java虚拟机使用类加载器（Class Loader）装载class文件</li><li>类加载完成之后，会进行字节码校验，字节码校验通过之后，JVM解释器会把字节码翻译成机器码，即汇编语言，交由操作系统执行</li><li>但不是所有的代码都是解释执行的，JVM对此做了优化，比如，以HotSpot虚拟机来说，它本身提供了JIT（Just In Time）</li></ul><h2 id="8-jvm发架构模型"><a href="#8-jvm发架构模型" class="headerlink" title="8.jvm发架构模型"></a>8.jvm发架构模型</h2><p>Java编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种指令集结构则是基于寄存器的指令集架构</p><p>具体来说，这两种架构之间的区别：</p><ul><li>基于栈式架构的特点<ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题，使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令。其执行过程依赖于操作栈。指令集更小，编译器容易实现。</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ul></li><li>基于寄存器架构的特点<ul><li>典型的应用是X86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机</li><li>指令集架构则完全依赖硬件，可移植差</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成一项操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主</li></ul></li></ul><p>举例，同样执行2+3这种逻辑操作，其指令分别如下：</p><ul><li><p>基于栈式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iconst_2 <span class="comment">//常量2入栈</span></span><br><span class="line">istor_l</span><br><span class="line">iconst_3  <span class="comment">//常量3入栈</span></span><br><span class="line">istore_2</span><br><span class="line">iload_1</span><br><span class="line">iload_2</span><br><span class="line">iadd <span class="comment">//常量2、3出栈，执行相加</span></span><br><span class="line">istore_0<span class="comment">//结果5入栈</span></span><br></pre></td></tr></table></figure></li><li><p>基于寄存器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax,<span class="number">2</span> <span class="comment">//将eax寄存器的值设为2</span></span><br><span class="line">add eax,<span class="number">3</span> <span class="comment">//使eax寄存器的值+3</span></span><br></pre></td></tr></table></figure></li></ul><p>总结</p><ul><li>==由于跨平台性的设计，Java的指令都是根据栈来设计的==。不同平台的CPU架构不同，所以不能设计为基于寄存器的。优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样功能需要更多的指令。</li></ul><p>栈：</p><ul><li>跨平台性能，指令集小，指令多，执行性能比寄存器差</li></ul><h2 id="9-jvm的生命周期"><a href="#9-jvm的生命周期" class="headerlink" title="9.jvm的生命周期"></a>9.jvm的生命周期</h2><p>虚拟机的启动：</p><ul><li>Java虚拟机的启动是通过引导类加载器（BootStrap class loader）创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的</li></ul><p>虚拟机的执行</p><ul><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序。</li><li>程序开始执行时它才运行，程序结束时他就停止</li><li>==执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程==</li></ul><h2 id="10-jvm的发展历程"><a href="#10-jvm的发展历程" class="headerlink" title="10.jvm的发展历程"></a>10.jvm的发展历程</h2><h3 id="Sun-Classic-VM"><a href="#Sun-Classic-VM" class="headerlink" title="Sun Classic VM"></a>Sun Classic VM</h3><ul><li>早在1996年Java1.0版本的时候，Sun公司发布了一款名为Sun Classic VM的Java虚拟机，它同时也是世界上第- -款商用Java虚拟机，JDK1 . 4时完全被淘汰。</li><li>这款虚拟机内部只提供解释器。</li><li>如果使用JIT编译器，就需要进行外挂。但是一旦使用了JIT编译器，JIT就会接管虚拟机的执行系统。解释器就不再工作。解释器和编译器不能配合工作。</li><li>现在hotspot内置了此虚拟机。</li></ul><h3 id="Exact-VM"><a href="#Exact-VM" class="headerlink" title="Exact VM"></a>Exact VM</h3><ul><li>为了解决 上一个虚拟机问题，jdk1.2时, sun提供了此虚拟机。</li><li>Exact Memory Management: 准确式内存管理<ul><li>也可以叫Non-Conservative/Accurate Memory Management</li><li>虚拟机可以知道内存中某个位置的数据具体是什么类型。</li></ul></li><li>具备现代高性能虚拟机的雏形<ul><li>热点探测</li><li>编译器与解释器混合工.作模式</li><li>只在Solaris平台短暂使用， 其他平台上还是classic vm .</li><li>英雄气短，终被Hotspot虚拟机替换</li></ul></li></ul><h3 id="SUN公司的HotSpot-VM"><a href="#SUN公司的HotSpot-VM" class="headerlink" title="SUN公司的HotSpot VM"></a>SUN公司的HotSpot VM</h3><ul><li>HotSpot历史<ul><li>最初由一家名为”Longview tchnologies”的小公司设计</li><li>1997年, 此公司被Sun收购:;2009年, Sun公司被甲骨文收购。</li><li>JDK1.3时，HotSpot VIM成为默认虚拟机</li></ul></li><li>目前Hotspot占有绝对的市场地位，称霸武林。<ul><li>不管是现在仍在广泛使用的JDK6,还是使用比例较多的JDK8中，默认的虚拟机都是HotSpot</li><li>Sun/oracle JDK和OpenJDK的默认虚拟机</li><li>因此本课程中默认介绍的虚拟机都是HotSpot,相关机制也主要是指HotSpot的GC机制。(比如其他两个商用虚拟机都没有方法区的概念)</li></ul></li><li>从服务器、桌而到移动端、嵌入式都有应用。</li><li>名称中的HotSpot指的就是它的热点代码探测技术。<ul><li>通过计数器找到最具编译价值代码，触发即时编译或栈上:替换</li><li>通过编译器与解释器协同工作，在最优化的程序响应时间与最佳执行性能中取得平衡</li></ul></li></ul><h3 id="BEA的JRockit"><a href="#BEA的JRockit" class="headerlink" title="BEA的JRockit"></a>BEA的JRockit</h3><ul><li><p>专注于服务器端应用</p><ul><li>它可以不太关注程序启动速度，囚此JRockit内部不包含解析器实现， 全部代码<br>都靠即时编译器编译后执行。|</li></ul></li><li><p>大量的行业基准测试显示，JRockit JVM是世界上最快的JVM。</p><ul><li>使用JRockit产品，客户已经体验到了显著的性能提高(一些超过了70号)和硬件成本的减少(达50%)。</li></ul></li><li><p>优势:全面的Java运行时解决方案组合</p><ul><li>JRockit面向延迟敏感型应用的解决方案JRockit Real Time提供以毫秒或 微秒级的JVM响应时间，适合财务、军事指挥、电信网络的需要 </li><li>MissionContro1服务套件，它是一组以极低的开销来监控、管理和分析生产 环境中的应用程序的L具。 </li></ul></li><li><p>2008年，BEA被Oracle收购，</p></li><li><p>Oracle表达了整合两大优秀虚拟机的工作，大致在JDK 8中完成。整合的方式是在 HotSpot的基础上,移JRockit的优秀特性。 </p></li><li><p>高斯林:目前就职于谷歌，研究人工智能和水下机器人 </p></li></ul><h3 id="KVM和ICDC-CLDC-Hotspot"><a href="#KVM和ICDC-CLDC-Hotspot" class="headerlink" title="KVM和ICDC/CLDC Hotspot"></a>KVM和ICDC/CLDC Hotspot</h3><ul><li>Oracle在Java ME产品线上:的两款虚拟机为: CDC/CLDC HotSpot Implementation VM</li><li>KVM (Kilobyte) 是CLDC-HI早期产品</li><li>目前移动领域地位尴尬，智能手机被Android和ios.二分天下。</li><li>KVM简单、轻量、高度可移植，面向更低端的设备上还维持自己的一片市场<ul><li>智能控制器、传感器</li><li>老人手机、经济欠发达地区的功能手机</li></ul></li><li>所有的虚拟机的原则:一次编译,到处运行。</li></ul><h3 id="Azul-VM"><a href="#Azul-VM" class="headerlink" title="Azul VM"></a>Azul VM</h3><ul><li>前面三大“高性能Java虚拟机”使用在通用硬件平台上</li><li>这里Azul VM和BEA Liquid VM是与特定硬件平台绑定、软硬件配合的专有虚拟机<ul><li>高性能Java虚拟机中的战斗机。</li></ul></li><li>Azul VM是Azul Systems公司在Hotspot基础上进行大量改进，运行于 Azul Systems公司的专有硬件Vega系统上的Java虚拟机。</li><li>每个Azul VM实例都可以管理至少数十个CPU和数百GB内存的硬件资源，并提供在巨大内存范围内实现可控的C时间的垃圾收集器、传有硬件优化的线程调度等优秀特性。</li><li>2010年，Azul systems公司开始从硬件转向软件， 发布了自己的zing JVM，可以在通用x86平台 上提供接近于Vega系统的特性。</li></ul><h3 id="TaobaoJVM"><a href="#TaobaoJVM" class="headerlink" title="TaobaoJVM"></a>TaobaoJVM</h3><ul><li><p>由AliJVM团队发布。阿里，国内使用Java最强大的公司， 覆盖云计算，金融、物流、电商等众多领城，需要解决高并发、 高可用、分布式的复合问题。有大量的开源产品。</p></li><li><p>基于OpenJDK开发了自己的定制版本AlibabaJDK, 简称AJDK. 是整个阿里Java体<br>系的基石。</p></li><li><p>基于OpenfDK HotSpot VM发布的国内第一 个优化、深度定制且开源的高性能服务器版Java虚拟机。</p><ul><li>创新的GCIH (GC invisible heap ) 技术实现了off-heap ,即将生命周期较长的Java对象Wheap中移到heap之外，并ALGC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升Gc的回收效率的目的。</li><li>GCIH中的对象还能够在多个Java虚拟机进程中实现共享</li><li>使用crc32指令实现JVM intrinsic降低JNI的调用开销</li><li>PMU hardware的Java profiling tool和诊断协助功能</li><li>针对大数据场录的ZenGC</li></ul></li><li><p>taobao vm应用在阿里产品上:性能高， 硬件严重依赖intel的cpu, 损失了兼容性,但<br>提高了性能</p><ul><li>目前已经在淘宝、天猫上线， 把oracle 官方JVM版本全部替换了。</li></ul></li></ul><h3 id="Dalvik-VM"><a href="#Dalvik-VM" class="headerlink" title="Dalvik VM:"></a>Dalvik VM:</h3><ul><li><p>谷歌开发的，应用于FAndroid系统，并在Android2.2中提供了JIT, 发展迅猛。</p></li><li><p>Dalvik VM只能称作虚拟机，而不能称作“Java 虚拟机”，它没有遵循Java虚拟机规范</p></li><li><p>不能直接执行Java 的Class文件</p></li><li><p>基于寄存器架构,不是jvm的栈架构。</p></li><li><p>执行的是编译以后的dex (Dalvik Executable) 文件。执行效率比较高。</p><ul><li>它执行的dex (Dalvik Executable)文件可以通过Class文件转化而来，使用Java语法编写应用程序，可以直接使用大部分的Java API等。</li></ul></li><li><p>Android 5.0使用支持提前编译(Ahead Of Time Compilation, AOT)的ART VM替换Dalvik WM。</p></li></ul><h3 id="Graal-VM"><a href="#Graal-VM" class="headerlink" title="Graal VM"></a>Graal VM</h3><ul><li><p>2018年4月，Oracle Labs公开了Graal VM,号称”Run Programs Faster Anywhere”,勃勃野心。与1995年java的” write once, run anywhere” 遏相呼应。</p></li><li><p>Graal VM在HotSpot VM基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”<br>的运行平台使用。语言包括: Java、 Scala, Groovy, Kotlin; C. C++.JavaScript、Ruby、 Python、 R等</p></li><li><p>支持不同语言中混用对方的接口和对象， 支持这些语言使用已经编写好的木地库文件</p></li><li><p>工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被Graal VM接受的中间表示。Graal VM提供Truffle工具集快速构建面向一种新语言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。</p></li><li><p>如果说HotSpot有一天 真的被取代，Graal VM希 望最大。但是Java的软件生态没有丝毫变化。</p></li></ul><h1 id="二、类加载子系统"><a href="#二、类加载子系统" class="headerlink" title="二、类加载子系统"></a>二、类加载子系统</h1><ul><li>内存结构概述</li><li>类加载器与类的加载过程</li><li>类加载器分类</li><li>ClassLoader的使用说明</li><li>双亲委派机制</li><li>其他</li></ul><h2 id="1-内存结构概述"><a href="#1-内存结构概述" class="headerlink" title="1.内存结构概述"></a>1.内存结构概述</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722112228303.png" alt="image-20210722112228303"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722112240202.png" alt="image-20210722112240202"></p><p>如果自己动手写一个java虚拟机，主要考虑结构：类加载器、执行引擎</p><h2 id="2-类加载器与类的加载过程"><a href="#2-类加载器与类的加载过程" class="headerlink" title="2.类加载器与类的加载过程"></a>2.类加载器与类的加载过程</h2><h3 id="类加载子系统的作用"><a href="#类加载子系统的作用" class="headerlink" title="类加载子系统的作用"></a>类加载子系统的作用</h3><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722112816870.png" alt="image-20210722112816870"></p><ul><li>类加载器子系统负责从文件系统或者网络中加载class文件，class文件所在问价开头有特定的文件标识</li><li>ClassLoader只负责class文件的加载，至于文件是否可运行，则由Execution Engine决定</li><li>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是class文件中常量池部分的内存映射）</li></ul><h3 id="类加载器ClassLoader角色"><a href="#类加载器ClassLoader角色" class="headerlink" title="类加载器ClassLoader角色"></a>类加载器ClassLoader角色</h3><ol><li>class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例</li><li>class file加载到jvm中，被称为DNA元数据模板，放在方法区</li><li>在.class文件–》JVM–》最终成为元数据模板，此过程就需要一个运输工具（类装载器Class Loader），扮演一个快递员的角色</li></ol><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ul><li>加载</li><li>链接<ul><li>验证</li><li>准备</li><li>解析</li></ul></li><li>初始化</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722113355272.png" alt="image-20210722113355272"></p><p>加载：</p><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li><li>加载.class文件的方式：<ul><li>从本地系统中直接加载</li><li>通过网络获取，典型场景：web Applet</li><li>从zip压缩包中读取，成为日后jar、war格式的基础、</li><li>运行时计算生成，使用得最多的是：动态代理技术</li><li>由其他文件生成，典型场景：jsp应用</li><li>从专有数据库中提取.class文件，比较少见</li><li>从加密文件中获取，典型的防Class文件被反编译的保护措施</li></ul></li></ol><p>验证：</p><ul><li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全</li><li>主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证</li></ul><p>准备：</p><ul><li>为类变量分配内存并设置该类变量的默认初始值，即零值</li><li>这里不包含用final修饰的static，因为final在编译时就会自动分配了，准备阶段会显式初始化</li><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中</li></ul><p>解析：</p><ul><li>将常量池内的符号引用转换为直接引用的过程</li><li>事实上没解析操作往往会伴随着jvm在执行完初始化之后再执行</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_indo、CONSTANT_Methodref_info等。</li></ul><h2 id="3-类加载器的分类"><a href="#3-类加载器的分类" class="headerlink" title="3.类加载器的分类"></a>3.类加载器的分类</h2><ul><li>jvm支持两种类型的类加载器，分别为引导类加载器（Bootstrap Classloader）和自定义类加载器（User-Defined Classloader）</li><li>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是java虚拟机规范将所有派生于抽象类Classloader的类加载器都划分为自定义类加载器</li><li>程序中常见的类加载器只有三个：Bootstrap Classloader、Extension Classloader、System Classloader。都是继承于Classloader。</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722094252090.png" alt="image-20210722094252090"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其上层：扩展类加载器</span></span><br><span class="line">        ClassLoader extClassLoader = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(extClassLoader);<span class="comment">//sun.misc.Launcher$ExtClassLoader@1540e19d</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取其上层：获取不到引导类加载器</span></span><br><span class="line">        ClassLoader bootstrapClassLoader = extClassLoader.getParent();</span><br><span class="line">        System.out.println(bootstrapClassLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于用户自定义类来说：默认使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String类使用引导类加载器进行加载的。---&gt; Java的核心类库都是使用引导类加载器进行加载的。</span></span><br><span class="line">        ClassLoader classLoader1 = String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虚拟机自带的加载器</p><ul><li>启动类加载器（引导类加载器，Bootstrap Classloader）<ul><li>这个类加载使用c/c++语言实现，嵌套在jvm内部</li><li>它用来加载java的核心库（JAVA_HOME/jre/lib/rt.jar、resource.jar或sun.boot.class.path路径下的内容），用于提供自身需要的类</li><li>并不继承自java.lang.Classloader，没有父加载器</li><li>加载拓展类和程序类加载器，并指定为他们的父类加载器</li><li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun、等开头的类</li></ul></li><li>拓展类加载器（Extension Classloader)<ul><li>java语言编写，由sun.misc.Launcher$ExtClassloader实现</li><li>派生与Classloader类</li><li>父类加载器为启动类加载器</li><li>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录（拓展目录）下加载类库。如果用户创建的jar放在此目录下，也会自动由扩展类加载器加载。</li></ul></li><li>应用程序类加载器（系统类加载器，AppClassloader）<ul><li>java语言编写，由sun.misc.launcher$AppClassloader实现</li><li>派生与ClassLoader类</li><li>父类加载器为扩展类加载器</li><li>它负责加载环境变量classpath或系统属性：java.class.path 指定路径下的类库</li><li>该类加载是程序中默认的类加载器，一般来说，java应用的类都是由它来完成加载</li><li>通过Classloader#getSystemClassloader（）方法可以获取到该类加载器</li></ul></li></ul><p>用户自定义类加载器</p><ul><li>在java的日常应用程序开发中，类加载几乎是由上述三种类加载器互相配合执行的，在必要时，用户可以自定义类加载器，来定制类的加载方式</li><li>原因：<ul><li>隔离加载类</li><li>修改类的加载方式</li><li>扩展加载源</li><li>放置源码泄露</li></ul></li><li>实现<ol><li>继承抽象类java.lang.ClassLoader类</li><li>在jdk1.2之前，在自定义类加载器时，总会去继承Classloader类并重写loadClass（）方法，从而实现自定义的类加载类。在jdk1.2之后，建议吧自定义的类加载逻辑写在findClass（）方法中</li><li>在编写自定义类加载类时，如果没有太多过于复杂的需求，可以直接继承URLClassloader类，避免自己编写findClass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁</li></ol></li></ul><h2 id="4-ClassLoader的使用说明"><a href="#4-ClassLoader的使用说明" class="headerlink" title="4.ClassLoader的使用说明"></a>4.ClassLoader的使用说明</h2><p>ClassLoader：一个抽象类，其后所有的类加载器都继承自Classloader（不包括启动类加载器Bootstrap ClassLoader）</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>getParent（）</td><td>返回该类加载器的超类加载器</td></tr><tr><td>loadClass（String name)</td><td>加载名称为name的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>findClass(String name)</td><td>查找名称为name的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>findLoadClass(String name)</td><td>查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例</td></tr><tr><td>defineClass(String name,byte[] b,int off,int len)</td><td>把字节数组b中的内容转换为一个java类，返回结果为java.lang.Class类的实例</td></tr><tr><td>resloveClass(Class&lt;?&gt; c)</td><td>连接指定的一个java类</td></tr></tbody></table><p>sun.misc,Launcher是一个java虚拟机的入口应用</p><h3 id="获取Classloader"><a href="#获取Classloader" class="headerlink" title="获取Classloader"></a>获取Classloader</h3><ol><li>获取当前类的ClassLoader：clazz.getClassLoader()</li><li>获取当前线程上下文的ClassLoader：Thread.currentThread().getContextClassLoader()</li><li>获取系统的ClassLoader：ClassLoader.getSystemClassLoader()</li><li>获取调用者的ClassLoader：DriverManager.getCallerClassLoader()</li></ol><h2 id="5-双亲委派机制"><a href="#5-双亲委派机制" class="headerlink" title="5.双亲委派机制"></a>5.双亲委派机制</h2><p>java虚拟机对class文件采用的是按需加载的方式，当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，java虚拟机采用的是双亲委派模式，即把请求交给父类处理，它是一种任务委派模式</p><ul><li><p>工作原理</p><ol><li>如果一个类加载器收到了类加载的请求，它不会自己先去加载，而是把这个请求委托给父类的加载器去执行</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器</li><li>如果父类加载器可以完成类加载任务，则成功返回，否则，其子类加载器尝试自己去加载</li></ol><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210722110502837.png" alt="image-20210722110502837"></p></li><li><p>优势</p><ul><li>避免类的重复加载</li><li>保护程序安全，防止核心API被随意篡改</li></ul></li></ul><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\lang\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的String类，这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是自定义的String类的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//错误: 在类 java.lang.String 中找不到 main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,String&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h2><ul><li>在JVM中表示两个class对象是否为同一个了存在的两个必要条件：<ul><li>类的完整类名必须一致，包括包名</li><li>加载这个类的ClassLoader必须相同</li></ul></li><li>在JVM中，即使两个类对象来源同一个Class文件，被同一个虚拟机所加载，但只要加载他们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</li><li>对类加载器的引用：JVM必须要知道一个类型是由启动加载器加载还是由用户类加载器加载的。如果一个类型是由用户加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的</li><li>类的主动使用和被动使用：<ul><li>主动使用：<ol><li>创建类的实例</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>调用类的静态方法</li><li>反射</li><li>初始化一个类的子类</li><li>java虚拟机启动时被标明为启动类的类</li><li>jdk7开始提供的动态语言支持：<br>java.lang.invoke.MethodHandle实例的解析结果<br>REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化</li></ol></li><li>除了以上七种情况，其他使用java类的方式都被看作是对类的被动使用，都不会导致类的初始化</li></ul></li></ul><h1 id="三、运行时数据区概述及线程"><a href="#三、运行时数据区概述及线程" class="headerlink" title="三、运行时数据区概述及线程"></a>三、运行时数据区概述及线程</h1><ul><li>概述</li><li>线程</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723135417340.png" alt="image-20210723135417340"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723135453262.png" alt="image-20210723135453262"></p><ul><li>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对内存的划分方式和管理机制存在着部分差异。</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723135831346.png" alt="image-20210723135831346"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723135839778.png" alt="image-20210723135839778"></p><ul><li>java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而自动创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</li><li>下图中，灰色的为单独线程私有的，红色的为多个线程共享的。即：<ul><li>每个线程：独立包括程序计数器、栈、本地栈。</li><li>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</li></ul></li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723140233739.png" alt="image-20210723140233739"></p><p>关于线程间共享的说明：</p><p>每个JVM只有一个Runtime实例。即为运行时环境，相当于内存结构的中间的部分：运行时环境。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><ul><li>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行</li><li>在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。<ul><li>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。</li></ul></li><li>操作系统负责所有的线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run（）方法。</li></ul><p>守护线程、普通线程：</p><ul><li>如果使用jconsole或者任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用pubic static void main（String[] args)的main线程以及所有这个main线程自己创建的线程。</li><li>这些主要的后台系统线程在Hotspot JVM里主要是以下几个：<ul><li>虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括“stop-the-word”的垃圾收集，线程收集，线程挂起以及偏向锁撤销。</li><li>周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。</li><li>GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。</li><li>编译线程：这种线程在运行时会将字节码编译成本地代码。</li><li>信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li></ul></li></ul><h1 id="四、程序计数器（PC寄存器）"><a href="#四、程序计数器（PC寄存器）" class="headerlink" title="四、程序计数器（PC寄存器）"></a>四、程序计数器（PC寄存器）</h1><ul><li>PC Register 介绍</li><li>举例说明</li><li>两个常见问题</li></ul><h2 id="1-PC-Register-介绍"><a href="#1-PC-Register-介绍" class="headerlink" title="1. PC Register 介绍"></a>1. PC Register 介绍</h2><ul><li>JVm中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能运行。</li><li>这里，并非是广义上所指的物理寄存器，将之称为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中PC寄存器是对物理PC寄存器的一种抽象模拟。</li><li>作用：<ul><li>PC寄存器用来存储向下一条指令的地址，也即将要执行的指令的代码。由执行引擎读取下一条指令。</li></ul></li><li>说明：<ul><li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域。</li><li>在JVM规范中，每个线程都有他自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</li><li>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果实在执行native方法，则是未知的值（underfined）。</li><li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li><li>它是唯一一个在Java虚拟机规范中没有规定任何OutOtMemoryError情况的区域</li></ul></li></ul><h2 id="2-举例说明"><a href="#2-举例说明" class="headerlink" title="2. 举例说明"></a>2. 举例说明</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723142904937.png" alt="image-20210723142904937"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723163819844.png" alt="image-20210723163819844"></p><h2 id="3-两个常见问题"><a href="#3-两个常见问题" class="headerlink" title="3. 两个常见问题"></a>3. 两个常见问题</h2><ul><li><p>使用PC寄存器存储字节码指令地址有什么用？</p></li><li><p>为什么使用PC寄存器记录当前线程的执行地址？</p><ul><li>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。</li><li>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</li></ul></li><li><p>PC寄存器为什么会被设定为线程私有？</p><ul><li>所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复。为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法便是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</li><li>由于CPU时间片轮限制，众多线程在并发执行的过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</li><li>这样必然导致经常中断或恢复。如何保证分毫不差？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</li></ul></li><li><p>CPU时间片</p><ul><li>CPU时间片，即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片</li><li>在宏观上，PC上可以打开多个应用程序，每个程序并行不悖，同时运行。</li><li>在微观上，，由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法是引入时间片，每个程序轮流执行。</li></ul></li><li><p>==并行和并发==</p><ul><li>并行：vs串行</li><li>并发：cpu快速切换以达到模拟并行的效果</li></ul></li></ul><h1 id="五、虚拟机栈"><a href="#五、虚拟机栈" class="headerlink" title="五、虚拟机栈"></a>五、虚拟机栈</h1><ul><li>1.虚拟机栈概述</li><li>2.栈的存储单位</li><li>3.局部变量表</li><li>4.操作数栈</li><li>5.代码追踪</li><li>6.栈顶缓存技术</li><li>7.动态链接</li><li>8.方法的调用：解析与分派</li><li>9.方法返回地址</li><li>10.一些附加信息</li><li>11.栈的相关面试题</li></ul><h2 id="1-虚拟机栈概述"><a href="#1-虚拟机栈概述" class="headerlink" title="1.虚拟机栈概述"></a>1.虚拟机栈概述</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。</li><li>==优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令==。</li></ul><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><ul><li>栈是运行时的单位，堆是存储的单位。<ul><li>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。</li><li>堆解决的是数据存储问题，即数据怎么放、放在哪。</li></ul></li></ul><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li>Java虚拟机栈是什么？<ul><li>Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用。</li><li>是线程私有的</li></ul></li><li>生命周期<ul><li>生命周期与线程一致</li></ul></li><li>作用<ul><li>主管Java程序的运行，它保存方法的局部变量（8种基本数据类型、对象的引用地址【对象实际存储在堆空间中】、部分结果，并参与方法的调用和返回。</li><li>局部变量：vs成员变量（或属性）</li><li>基本数据变量：vs引用类型变量（类、数组、接口）</li></ul></li><li>特点<ul><li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</li><li>JVM直接对Java栈的操作只有两个：<ul><li>每个方法执行：伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作</li></ul></li><li>对于栈来说不存在垃圾收集的问题<ul><li>==栈可能存在OOM，但是不存在GC==</li></ul></li></ul></li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>面试题：开发中遇到的异常有哪些？</p><p>栈中可能出现的异常：</p><ul><li>Java虚拟机规范允许Java栈的大小是动态的或者固定不变的。<ul><li>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机允许的最大容量，Java虚拟机将会抛出一个==StackOverflowError异常==。</li><li>如果Java虚拟机栈可以动态扩展，并且尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个==OutOfMemoryError异常==</li><li><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723151032215.png" alt="image-20210723151032215"></li></ul></li><li>设置栈内存大小<ul><li>我们可以使用参数-Xss 选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</li><li><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723151235829.png" alt="image-20210723151235829"></li></ul></li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723182611919.png" alt="image-20210723182611919"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/2021-06-29-hexoInstallAndUse/image-20210723182652414.png" alt="image-20210723182652414"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723182728027.png" alt="image-20210723182728027"></p><h2 id="2-栈的存储单位"><a href="#2-栈的存储单位" class="headerlink" title="2.栈的存储单位"></a>2.栈的存储单位</h2><p>栈中存储什么？</p><ul><li>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在。</li><li>在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li></ul><p>复习：</p><ul><li>OOP（Object Oriented Programming）的基本概念：类、对象</li><li>类中的基本结构：field（属性、字段、域）、method</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>JVM直接对Java栈的操作只有两个，就是对栈帧的==压栈==和==出栈==，遵循==“先进后出”/“后进先出”原则==</li><li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为==当前栈帧（Current Frame）==，与当前栈帧对应的方法就是==当前方法（Current Method）==，定义这个方法的类就是==当前类（Current Class)==。</li><li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作</li><li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前帧。</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723152139975.png" alt="image-20210723152139975"></p><ul><li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧</li><li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</li><li>Java方法有两种返回函数的方式，==一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。==</li></ul><h3 id="栈帧的内部结构"><a href="#栈帧的内部结构" class="headerlink" title="栈帧的内部结构"></a>栈帧的内部结构</h3><p>每个栈帧中存储着：</p><ul><li>==局部变量表（Local Variables）==</li><li>==操作数栈（Operand Stack）（或表达式栈）==</li><li>动态链接（Dynamic Linking）（或指向运行时常量池的方法引用）</li><li>方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）</li><li>一些附加信息</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723152831789.png" alt="image-20210723152831789"></p><h2 id="3-局部变量表"><a href="#3-局部变量表" class="headerlink" title="3.局部变量表"></a>3.局部变量表</h2><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><ul><li>局部变量表也被称之为局部变量数组或本地变量表</li><li>==定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量==，这些数据类型包括各类基本数据类型、对象引用（Reference)，以及returnAddress类型</li><li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此==不存在数据安全问题==</li><li>==局部变量表所需要的容量大小是在编译期确定下来的==，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。</li><li>==方法嵌套调用的次数由栈的大小决定==。一般来说，==栈越大，方法嵌套调用次数越多==。对于一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数会减少。</li><li>==局部变量表中的变量只在当前方法调用中有效==。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。==当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。==</li></ul><h3 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h3><ul><li>参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束。</li><li>局部变量表，最基本的存储单元是Slot（变量槽）</li><li>局部变量中存放编译器可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量</li><li>在局部变量里，==32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。==<ul><li>byte、short、char在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true</li><li>long和double则占两个slot</li></ul></li><li>JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</li><li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会==按照顺序被复制==到局部变量表中的每一个slot上</li><li>==如果需要访问局部变量中一个64bit的局部变量值，只需要使用前一个索引即可==</li><li>如果当前帧是由构造方法或者实例方法创建的，那么==该对象引用this将会存放在index为0的slot处==，其余的参数按照参数表顺序继续排列</li></ul><p>Slot的重复利用</p><ul><li>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</li></ul><h3 id="静态变量与局部变量的对比"><a href="#静态变量与局部变量的对比" class="headerlink" title="静态变量与局部变量的对比"></a>静态变量与局部变量的对比</h3><ul><li>参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配</li><li>我们知道类变量表有两次初始化的机会，第一次是在“==准备阶段==”，执行系统初始化，对类变量设置零值，来一次则是在“==初始化==”阶段，赋予程序员在代码中定义的初始值。</li><li>和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用</li><li><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723155347082.png" alt="image-20210723155347082"></li></ul><p>变量的分类：</p><ul><li>按照数据类型分：<ul><li>基本数据类型</li><li>引用数据类型</li></ul></li><li>按照在类中声明的位置分：<ul><li>成员变量：在使用前，都经历过默认初始化赋值<ul><li>类变量：linking的prepare阶段，给类变量赋默认值—》initial阶段，给类变量显式赋值即静态代码赋值</li><li>实例变量：随着对象的创建，会在堆空间分配实例变量空间，并进行默认赋值</li></ul></li><li>局部变量：在使用前，必须进行显式赋值，否则编译不通过</li></ul></li></ul><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul><li>在栈帧中，与性能调优关系最为密切的部分就是局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递</li><li>==局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。==</li></ul><h2 id="4-操作数栈"><a href="#4-操作数栈" class="headerlink" title="4.操作数栈"></a>4.操作数栈</h2><ul><li>每一个独立的栈帧中除了包含局部变量表以外，还包含一个==后进先出==的操作数栈，也可以称之为==表达式栈==</li><li>==操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈（push）/出栈（pop)==<ul><li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用他们后再把结果压入栈</li><li>比如：执行复制、交换、求和等操作</li></ul></li></ul><hr><ul><li>操作数栈，==主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。==</li><li>操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，==这个方法的操作数栈是空的==</li><li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的code属性中，为max_stack的值</li><li>栈中任何一个元素都是可以任意的Java数据类型<ul><li>32bit的类型占用一个栈单位深度</li><li>64bit的类型占用两个栈单位深度</li></ul></li><li>操作数栈==并非采用访问索引的方式来进行数据访问==的，而是只能通过标准的入栈（push）和出栈（pop)操作来完成一次数据访问</li></ul><hr><ul><li>==如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中==，并更新PC寄存器中下一条需要执行的字节码指令</li><li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证</li><li>另外，我们说Java虚拟机的==解释引擎是基于栈的执行引擎==，其中的栈指的就是操作数栈。</li></ul><h2 id="5-代码追踪"><a href="#5-代码追踪" class="headerlink" title="5.代码追踪"></a>5.代码追踪</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723195639171.png" alt="image-20210723195639171"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/2021-06-29-hexoInstallAndUse/image-20210723195646274.png" alt="image-20210723195646274"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723195701605.png" alt="image-20210723195701605"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723195719108.png" alt="image-20210723195719108"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210723195728664.png" alt="image-20210723195728664"></p><p>常见i++和++i的区别</p><h2 id="6-栈顶缓存技术"><a href="#6-栈顶缓存技术" class="headerlink" title="6.栈顶缓存技术"></a>6.栈顶缓存技术</h2><ul><li>基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也意味着将需要更多的指令分派(instruction dispatch)次数和内存读/写次数</li><li>由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，Hotspot JVM的设计者们提出了栈顶缓存技术，==将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率。==</li></ul><h2 id="7-动态链接"><a href="#7-动态链接" class="headerlink" title="7.动态链接"></a>7.动态链接</h2><ul><li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking）。比如invokedynamic指令</li><li>在java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</li></ul><hr><p>为什么需要常量池？</p><p>常量池的作用，就是为了提供一些符号和常量，便于指令的识别。</p><h2 id="8-方法的调用：解析与分派"><a href="#8-方法的调用：解析与分派" class="headerlink" title="8.方法的调用：解析与分派"></a>8.方法的调用：解析与分派</h2><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关</p><ul><li>==静态链接==<ul><li>当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译器可知，且运行期间保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</li></ul></li><li>==动态链接==<ul><li>如果被调用的方法在编译期间无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。</li></ul></li></ul><hr><p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</p><ul><li>==早期绑定==<ul><li>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</li></ul></li><li>==晚期绑定==<ul><li>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期间根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。</li></ul></li></ul><hr><p>随着高级语言的横空出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是他们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然==这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式。==</p><p>Java中任何一个普通的方法其实都具备虚函数的特征，它们相当于C++语言中的虚函数（C++中则需要使用关键字virtual来显示定义）。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字final来标记这个方法。</p><hr><h3 id="虚方法与非虚方法"><a href="#虚方法与非虚方法" class="headerlink" title="虚方法与非虚方法"></a>虚方法与非虚方法</h3><p>非虚方法：</p><ul><li>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为虚方法。</li><li>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法。</li><li>其他方法称为虚方法</li></ul><p>在类加载的解析阶段就可以进行解析，如下是非虚方法举例<br><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724102300938.png" alt="image-20210724102300938"></p><p>虚拟机中提供了以下几条方法调用指令：</p><ul><li>普通调用指令：<ol><li>invokestatic：调用静态方法，解析阶段确定唯一方法版本</li><li>invokespecial：调用&lt;init&gt;方法，私有及父类方法，解析阶段确定唯一方法版本</li><li>invokevirtual：调用所有虚方法</li><li>invokeinterface：调用所有接口方法</li></ol></li><li>动态调用指令：<ol start="5"><li>invokedynamic：动态解析出需要调用的方法，然后执行</li></ol></li></ul><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。</p><h3 id="invokedynamic"><a href="#invokedynamic" class="headerlink" title="invokedynamic"></a>invokedynamic</h3><ul><li>JVM字节码指令集一直比较稳定，知道Java7中才增加了一个invokedynamic指令，这是Java为了实现【动态类型语言】支持而做的一种改进</li><li>但是在Java7中并没有提供直接生成invokedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令。知道Java8的Lambda表达式出现，invokedynamic指令的生成在Java中才有了直接的生成方式。</li><li>Java7中增加对动态语言类型支持的本质是对Java虚拟机规范的修改，而不是对Java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在Java平台的动态语言编译器。</li></ul><p>动态类型语言和静态类型语言：</p><ul><li>动态类型语言和静态类型语言两者的区别就在于对类型的检查是编译期还是在运行期，满足前者就是静态类型语言，反之就是动态类型语言</li><li>说的再直白一点就是，静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。</li></ul><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>Java语言中方法重写的本质：</p><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。</li><li>如果在类型C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError异常</li><li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</li></ol><p>IllegalAccessError：</p><ul><li>程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。</li></ul><h3 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h3><ul><li>在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话，就可能影响到执行效率。因此，为了提高性能，JVM采用在类的方法区建立一个虚方法表（Virtual method table）（非虚方法不会出现在表中）来实现。使用索引表来代替查找。</li><li>每个类中都有一个虚方法表，表中存放着各个方法的实际入口</li><li>虚方法表的创建：<ul><li>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。</li></ul></li></ul><h2 id="9-方法返回地址"><a href="#9-方法返回地址" class="headerlink" title="9.方法返回地址"></a>9.方法返回地址</h2><ul><li>存放调用该方法的PC寄存器的值</li><li>一个方法的结束，有两种方式：<ul><li>正常执行完成</li><li>出现未处理的异常，非正常退出</li></ul></li><li>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，==调用者的PC计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址==。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</li></ul><hr><p>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p><p>==正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。==</p><hr><p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p><ol><li>执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称正常完成出口。<ul><li>一个方法在正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定。</li><li>在字节码指令中，返回指令包含ireturn（当返回值是Boolean、byte、char、short和int类型时使用、lreturn、freturn、dreturn以及areturn，另外还有一个return指令供声明为void的方法、实例初始化方法、类和接口的初始化方法使用</li></ul></li><li>在方法执行的过程中遇到了异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称异常完成出口</li></ol><p>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码</p><hr><p>本质上，方法的退出就是当前栈帧出栈的过程。，此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p><p>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给它的上层调用者产生任何的返回值</p><h2 id="10-一些附加信息"><a href="#10-一些附加信息" class="headerlink" title="10.一些附加信息"></a>10.一些附加信息</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724111024676.png" alt="image-20210724111024676"></p><p>栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息。</p><h2 id="11-栈的相关面试题"><a href="#11-栈的相关面试题" class="headerlink" title="11.栈的相关面试题"></a>11.栈的相关面试题</h2><ul><li>举例栈溢出的情况？（StackOverflowError)<ul><li>通过-Xss设置栈的大小；OOM</li></ul></li><li>调整栈大小，就能保证不出现溢出吗？不能</li><li>分配的栈内存越大越好吗？不是</li><li>垃圾回收是否会设计到虚拟机栈？不会的</li><li>方法中定义的局部变量是否线程安全？具体问题具体分析。</li></ul><h1 id="六、本地方法接口"><a href="#六、本地方法接口" class="headerlink" title="六、本地方法接口"></a>六、本地方法接口</h1><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724123523449.png" alt="image-20210724123523449"></p><h2 id="什么是本地方法？"><a href="#什么是本地方法？" class="headerlink" title="什么是本地方法？"></a>什么是本地方法？</h2><ul><li>简单地讲，一个Native Method 就是一个Java调用非Java代码的接口。一个Native Method是这样一个Java方法；该方法的实现由非Java语言实现，比如C。这个特征并非Java所特有，很多其它的编程语言都有这样一个机制，比如在C++中，你可以使用extern “C”告知C++编译器去调用C的一个函数。</li><li>“A native method is a Java method whose implementation is provided by non-java code.”</li><li>在定义一个native method时，并不提供实现体（有些像定义一个Java interface），因为其实现体是由非Java所用，它的初衷是融合C/C++程序。</li></ul><p>例子：</p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724125029029.png" alt="image-20210724125029029"></p><p>==标识符native可以与所有其它的java标识符连用，但是abstract除外==</p><h2 id="为什么要使用Native-Method"><a href="#为什么要使用Native-Method" class="headerlink" title="为什么要使用Native Method"></a>为什么要使用Native Method</h2><p>Java使用起来非常方便，然而有些层次的任务用Java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p><ul><li>与Java环境外交互：<ul><li>==有时候Java应用需要与Java外面的环境交互，这是本地方法存在的主要原因。==你可以想想Java需要与一些底层系统，如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</li></ul></li><li>与操作系统交互<ul><li>JVM支持着Java语言本身和运行时库，它是Java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。==通过使用本地方法，我们得以用Java实现了jre的域底层系统的交互，甚至JVM的一些部分就是用C写的。==还有，如果我们要使用一些Java语言本身没有提供封装的操作系统特性时，我们也需要使用本地方法。</li></ul></li><li>sun’s Java<ul><li>S==un的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互==。jre大部分是用Java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread的setPriority（）方法是用Java实现的，但是它实现调用的是该类里的本地方法setPriorty（）。这个本地方法是用C实现的，并被植入JVM内部，在windows 95的平台上，这个本地方法啊最终将调用win32 SetPriority（） API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</li></ul></li></ul><p>现状：</p><ul><li>==目前该方法的使用越来越少了，除非是与硬件有关的应用，==比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以在使用Socket通信，也可以使用Web Service等等。</li></ul><h1 id="七、本地方法栈"><a href="#七、本地方法栈" class="headerlink" title="七、本地方法栈"></a>七、本地方法栈</h1><ul><li>==Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。==</li><li>本地方法栈，也是线程私有的</li><li>允许被实现成固定或者是可动态扩展的内存大小。（在内存溢出方面是相同的）<ul><li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将会抛出一个StackOverflowError异常。</li><li>如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么Java虚拟机将会抛出一个OutOfMemoryError异常</li></ul></li><li>本地方法是使用C语言实现的</li><li>它的具体做法是Native Method Stack 中登记native方法，在Execution Engine执行时加载本地方法库</li></ul><hr><ul><li>==当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限。==<ul><li>本地方法可以通过本地方法接口来==访问虚拟机内部的运行时数据区==</li><li>它甚至可以直接使用本地处理器中的寄存器</li><li>直接从本地内存的堆中分配任意数量的内存。</li></ul></li><li>==并不是所有的JVM都支持本地方法。因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等==。如果JVM产品不打算支持native方法，也可以无需实现本地方法栈。</li><li>在Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一。</li></ul><h1 id="八、堆"><a href="#八、堆" class="headerlink" title="八、堆"></a>八、堆</h1><ul><li>堆的核心概述</li><li>设置堆内存大小与OOM</li><li>年轻代与老年代</li><li>图解对象分配过程</li><li>Minor GC、Major GC、Full GC</li><li>堆空间分代思想</li><li>内存分配策略</li><li>为对象分配内存：TLAB</li><li>小结堆空间的参数设置</li><li>堆是分配对象的唯一选择吗</li></ul><h2 id="1-堆的核心概述"><a href="#1-堆的核心概述" class="headerlink" title="1. 堆的核心概述"></a>1. 堆的核心概述</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724184900268.png" alt="image-20210724184900268"></p><ul><li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li><li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。<ul><li>堆内存的大小是可以调节的。</li></ul></li><li>《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</li><li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</li><li>《Java虚拟机规范》中对堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。<ul><li>从实际使用角度看，应该是“几乎”所有的对象实例都在这里分配内存。</li></ul></li><li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li><li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</li><li>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724185643895.png" alt="image-20210724185643895"></p><p>现代垃圾收集器大部分都是基于分代收集理论设计，堆空间细分为：</p><p>Java7及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p><ul><li>Young Generation Space 新生区 Young/New<ul><li>又被划分为Eden区和Survivor区</li></ul></li><li>Tenure Generation Space 养老区 Old/Tenure</li><li>Permanent Space  永久区  Perm</li></ul><p>Java8及之后堆内存逻辑上分为三个部分：新生区+养老区+元空间</p><ul><li>Young Generation Space 新生区 Young/New<ul><li>又被划分为Eden区和Survivor区</li></ul></li><li>Tenure Generation Space 养老区 Old/Tenure</li><li>Meta Space 元空间  Meta</li></ul><p>约定：</p><ul><li>新生区=新生代=年轻代</li><li>养老区=老年区=老年代</li><li>永久区=永久代</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724190408530.png" alt="image-20210724190408530"></p><h2 id="2-设置堆内存大小与OOM"><a href="#2-设置堆内存大小与OOM" class="headerlink" title="2. 设置堆内存大小与OOM"></a>2. 设置堆内存大小与OOM</h2><p>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，可以通过选项”-Xmx”和”-Xms”来进行设置。</p><ul><li>“-Xmx”用于表示堆区的起始内存，等价于-XX:InitialHeapSize</li><li>“-Xms”则用于表示堆区的最大内存，等价于-XX:MaxHeapSize</li></ul><p>一旦堆区中的内存大小超过”-Xms”所指定的最大内存时，将会抛出OutOfMemoryError异常</p><p>通常会将”-Xmx”和”-Xms”两个参数配置相同的值，其==目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。==</p><p>默认情况下，初始内存大小：物理电脑内存大小/64。最大内存大小：物理电脑内存大小/4。</p><p>OOM举例</p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724191238285.png" alt="image-20210724191238285"></p><h2 id="3-年轻代与老年代"><a href="#3-年轻代与老年代" class="headerlink" title="3. 年轻代与老年代"></a>3. 年轻代与老年代</h2><p>存储在JVM中的Java对象可以被划分为两类：</p><ul><li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速</li><li>另一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致</li></ul><p>Java堆区进一步细分的话，可以划分为年轻代和老年代</p><p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）<br><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724191604855.png" alt="image-20210724191604855"></p><p>下面这些参数开发中一般不会调：<br><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724191702658.png" alt="image-20210724191702658"></p><p>新时代与老年代在堆结构的占比：</p><ul><li>默认-XX:NewRatio=2，表示新时代占1，老年代占2，新时代占整个堆的1/3</li><li>可以修改-XX:NewRatio=4，表示新时代占1，老年代占4，新时代占整个堆的1/5</li></ul><p>在Hotspot中，Eden空间和另外两个Survivor空间缺省所占的比例是8:1:1</p><p>开发人员可以通过选项”-XX:SurvivorRatio”调整这个空间比例。比如”-XX:SurvivorRatio=8”</p><p>==几乎所有的==Java对象都是在Eden区被New出来的</p><p>绝大部分的Java对象的销毁都在新时代进行了。</p><ul><li>IBM公司的专门研究表明，新时代中80%的对象都是“朝生暮死”的</li></ul><p>可以使用选项”-Xmn”设置新时代的最大内存大小</p><ul><li>这个参数一般使用默认值就可以了</li></ul><h2 id="4-图解对象分配过程"><a href="#4-图解对象分配过程" class="headerlink" title="4. 图解对象分配过程"></a>4. 图解对象分配过程</h2><p>为新对象分配内存是一件非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p><ol><li>new的对象先放在伊甸园区，此区有大小限制。</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾收集器将对伊甸园区进行垃圾回收（Minor GC），将伊甸园区中不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区。</li><li>然后将伊甸园中的剩余对象移动到幸存者0区</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存区0的，如果没有回收，就会放到幸存者1区</li><li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区</li><li>啥时候能去养老区？可以设置次数，默认是15次。<ul><li>==可以设置参数：-XX:MaxTenuringThreshold=&lt;N&gt;进行设置==</li></ul></li><li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理。</li><li>若养老区执行了Major GC之后发现依然无法进行对象的保存，就会产生OOM异常</li></ol><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724193456788.png" alt="image-20210724193456788"></p><hr><p>总结：</p><ul><li>针对幸存者s0、s1区的总结：复制之后有交换，谁空谁是to</li><li>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210724193543173.png" alt="image-20210724193543173"></p><hr><p>常用调优工具：</p><ul><li>JDK命令行</li><li>Eclipse：Memory Analyzer Tool</li><li>Jconsole</li><li>VisualVM</li><li>Jprofiler</li><li>Java Flight Recorder</li><li>GCViewer</li><li>GC Easy</li></ul><h2 id="5-Minor-GC、Major-GC、Full-GC"><a href="#5-Minor-GC、Major-GC、Full-GC" class="headerlink" title="5. Minor GC、Major GC、Full GC"></a>5. Minor GC、Major GC、Full GC</h2><p>JVM在进行GC时，并非每次都对上面三个内存（新生代、老年代：方法区）区域一起回收的，大部分时候回收都是指新生代。</p><p>针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分手机（Partial GC），一种是整堆收集（Full GC）</p><p>部分收集：不是完整收集整个Java堆的垃圾收集器。其中又分为：</p><ul><li>新生代收集（Minor GC / Young GC）：只是新生代的垃圾收集</li><li>老年代收集（Major GC /old GC）：只是老年代的垃圾收集器。<ul><li>目前，只有CMS GC会有单独收集老年代的行为</li><li>注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。</li></ul></li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。<br>目前，只有G1 GC会有这种行为</li></ul><p>整堆收集（Full GC）：收集整个java堆和方法区的垃圾收集</p><p>年轻代GC（Minor GC）触发机制：当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存）。因为Java对象大多具有朝生夕死的特性，所以Minor GC非常频繁，一般回收速度也会比较快。这一定义既清晰又易于理解。Minor GC会引发STW，暂停其他用户的进程，等待垃圾回收结束，用户线程才恢复运行。</p><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><h4 id="老年代GC（Major-GC-Full-GC）触发机制"><a href="#老年代GC（Major-GC-Full-GC）触发机制" class="headerlink" title="老年代GC（Major GC/Full GC）触发机制:"></a>老年代GC（Major GC/Full GC）触发机制:</h4><p>指发生在老年代的GC,对象从老年代消失时,我们说”Major GC” 或”Full GC”发生了.</p><p>出现了Major GC,经常会伴随至少一次的Minor GC(但非绝对,在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程)。也就是在老年代空间不足时,会先尝试触发Minor GC</p><p>Major GC的速度一般会比Minor GC慢10倍以上,STW的时间更长</p><p>如果Major GC后,内存还不足,就报爆OOM了,</p><p>Major GC的速度一般会比Minor GC慢10倍以上。</p><h4 id="Full-GC触发机制"><a href="#Full-GC触发机制" class="headerlink" title="Full GC触发机制"></a>Full GC触发机制</h4><p>触发Full GC执行的情况有如下五种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.调用System.gc()时,系统建议执行Full GC,但是不必然执行</span><br><span class="line">2.老年代空间不足</span><br><span class="line">3.方法区空间不足</span><br><span class="line">4.通过Minor GC后进入老年代的平均大小大于老年代的可用内存</span><br><span class="line">5. 由于Eden区,survivor Space0(From)区向survivor Space1(To)区复制时,对象大小小于To Space可用内存,则把该对象转存到老年代,且老年代的可用内存小于该对象的大小。</span><br></pre></td></tr></table></figure><p>说明:Full GC是开发或调优中尽量要避免的,这样暂停时间会短一些</p><h2 id="6-堆空间分代思想"><a href="#6-堆空间分代思想" class="headerlink" title="6. 堆空间分代思想"></a>6. 堆空间分代思想</h2><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>为什么需要把Java堆分代?不分代就不能正常工作了吗?</p><p>经研究,不同对象的生命周期不同。70%-99%的对象都是临时对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新生代:有Eden、两块大小相同的Survivor(又称为from/to,s0/s1)构成,to总为空。</span><br><span class="line">老年代:存放新生代中经历多次GC仍然存活的对象。</span><br></pre></td></tr></table></figure><p>其实不分代完全可以,分代的唯一理由就是优化GC性能。如果没有分代,那所有的对象都在一块,就如同把一个学校的人都关在一个教室。GC的时候就要找到哪些对象没用,这样就会对堆的所有区域进行扫描。而很多对象都是朝生暮死的,如果分代的话,把新创建的对象放到某一地方,当GC的时候先把这块存储朝生暮死对象的区域进行回收,这样就会腾出很大的空间出来</p><h2 id="7-内存分配策略"><a href="#7-内存分配策略" class="headerlink" title="7. 内存分配策略"></a>7. 内存分配策略</h2><p>如果对象在Eden出生并经历第一次Minor GC后任然存活,并且能被Survivor容纳的话,将被移动到Survivor空间中,并将对象年龄设为1.对象在Survivor区中每熬过一次Minor GC,年龄就增加1岁,当它的年龄增加到一定程度(默认是15岁,其实每个GC都有所不同)时,就会被晋升到老年代中。</p><p>对象那个晋升到老年代的年龄阈值,可以通过选项:-XX:MaxTenuringThreshold来设置。</p><p>针对不同年龄段的对象分配原则如下所示:</p><ul><li>优先分配到Eden</li><li>打对象直接分配到老年代——尽量避免程序中出现过多的大对象</li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断:如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半,年龄大于或等于该年龄的对象可以直接进入老年代,无需等到MaxTenuringThreshold中要求的年龄</li><li>空间分配担保:-XX:HandlePromotionFailure</li></ul><h2 id="8-为对象分配内存：TLAB"><a href="#8-为对象分配内存：TLAB" class="headerlink" title="8. 为对象分配内存：TLAB"></a>8. 为对象分配内存：TLAB</h2><p>为什么有TLAB(Thread Local Allocation Buffer)?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">堆区是线程共享区域,任何线程都可以访问到堆区中的共享数据</span><br><span class="line">由于对象实例的创建在JVM中非常频繁,因此在并发环境下从堆区中划分内存空间是线程不安全的</span><br><span class="line">为避免多个线程操作同一地址,需要使用加锁等机制,进而影响分配速度。</span><br></pre></td></tr></table></figure><p>什么是TLAB?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从内存模型而不是垃圾收集的角度,对Eden区域继续进行划分,JVM为每个线程分配了一个私有缓存区域,它包含在Eden空间内。</span><br><span class="line">多线程同时分配内存时,使用TALB可以避免一系列的非线程安全问题,同时还能够提升内存分配的吞吐量,因此我们可以将这种内存分配方式称之为快速分配策略。</span><br><span class="line">(据说)所有的OpenJDK衍生出来的JVM都提供了TLAB的设计。</span><br></pre></td></tr></table></figure><p>说明:</p><p>尽管不是所有的对象实例都能够在TLAB中成功分配内存,但是==JVM确实是将TLAB作为内存分配的首选==<br>在程序中,开发人员可以通过选项”-XX:UserTLAB”设置是否开启TLAB空间</p><p>默认情况下,TLAB空间的内存非常小,仅占整个Eden空间的1%,当然我们可以通过选项”-XX:TLABWasteTargetPercent”设置TLAB空间所占用Eden空间的百分比大小。</p><p>一旦对象在TLAB空间分配内存失败时,JVM就会尝试通过==使用加锁机制==确保数据操作的原子性,从而直接在Eden空间中分配内存。</p><h2 id="9-小结堆空间的参数设置"><a href="#9-小结堆空间的参数设置" class="headerlink" title="9. 小结堆空间的参数设置"></a>9. 小结堆空间的参数设置</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727131541260.png" alt="image-20210727131541260"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727131555702.png" alt="image-20210727131555702"></p><p>在发生Minor GC之前,==虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。==</p><p>如果大于,则此次Minor GC是安全的</p><p>如果小于,则虚拟机会查看-XX:HandlePromotionFailure设置是否允许担保失败。</p><ul><li>如果HandlePromotionFailure=true,那么会继续==检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。==<ul><li>如果大于,则尝试进行一次Minor GC,但这次Minor GC依然是有风险的,</li><li>如果小于,则改为进行一次Full GC</li></ul></li><li>如果HandlePromotionFailure=false,则改进为进行一次Full GC</li></ul><p>在JDK6 update=24之后,HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略,观察OpenJDK中的源码变化,虽然源码中还定义了HandlePromotionFailure参数,但是在代码中已经不会再使用它。==JDK6 update24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC,否则将进行Full GC==。</p><h2 id="10-堆是分配对象的唯一选择吗"><a href="#10-堆是分配对象的唯一选择吗" class="headerlink" title="10. 堆是分配对象的唯一选择吗"></a>10. 堆是分配对象的唯一选择吗</h2><p>《深入理解Java虚拟机》中关于堆内存的描述:随着JIT编译期的发展与==逃逸分析技术==逐渐成熟,==栈上分配、标量替换优化技术==将会导致一些微妙的变化,所有的对象都分配到堆上也渐渐变得不那么”绝对”了。</p><p>在Java虚拟机中,对象是在Java堆中分配内存的,这是一个普遍的常识。但是,有一种特殊的情况,那就是==如果经过逃逸分析(Escape Analysis)后发现,一个对象并没有逃逸出方法的话,那么就可能被优化成栈上分配==。这样就无需在堆上分配内存,也无须进行垃圾回收了,这也是最常见的堆外存储技术。</p><p>此外,前面提到的基于OpenJDK深度定制的TaoBaoVM,其中创新的GCIH(GC invisible heap)技术实现off-heap,将生命周期较长的Java对象从heap中移至heap外,并且GC不能管理GCIH内部的Java对象,以此达到降低GC的回收频率和提升GC回收效率的目的。</p><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><p>如何将堆上的对象分配到栈,需要使用逃逸分析手段。</p><p>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</p><p>通过逃逸分析,Java HotSpot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</p><p>逃逸分析的基本行为就是分析对象动态作用域:</p><ul><li>当一个对象在方法中被定义后,对象只在方法内部使用,则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后,它被外部方法所 引用,则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727134156197.png" alt="image-20210727134156197"></p><p>参数设置:</p><ul><li>在JDK 6u23版本之后,HotSpot中默认就已经开启了逃逸分析。</li><li>如果使用的是较早的版本,开发人员则可通过:<ul><li>选项”-XX:+DoEscapeAnalysis”显式开启逃逸分析</li><li>通过选项”-XX:+PrintEscapeAnalysis”查看逃逸分析的筛选结果</li></ul></li></ul><p>==结论:开发中能使用局部变量的,就不要使用在方法外定义==</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>使用逃逸分析,编译器可以对代码做如下优化:</p><p>一、栈上分配。将堆分配转化为栈分配。如果一个对象在子程序中被分配,要使指向该对象的指针永远不会逃逸,对象可以是栈分配的候选,而不是堆分配。</p><p>二、同步省略。如果一个对象被发现只能从一个线程访问到,那么对于这个对象的操作可以不考虑同步</p><p>三、分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到,那么对象的部分(或全部)可以不存储在内部,而是存储在CPU寄存器中。</p><p>JIT编译器在编译期间根据逃逸分析的结果,发现如果一个对象并没有逃逸出方法的话,就可能被优化成栈上分配。分配完成之后,继续在调用栈内执行,最后线程结束,栈空间被回收,局部变量对象也被回收。这样就无须进行垃圾回收了。</p><p>常见的栈上分配场景:给成员变量赋值、方法返回值]实例引用传递。</p><h4 id="同步消除"><a href="#同步消除" class="headerlink" title="同步消除"></a>同步消除</h4><p>线程同步的代价是相当高的,同步的后果是降低并发性和性能。</p><p>在动态编译同步块的时候,JIT编译器可以借助逃逸分析来==判断同步块所使用的锁对象是否只能被一个线程访问而没有被发布到其他线程==。如果没有,那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略,也叫==锁消除==。</p><h4 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h4><p>==标量(Scalar)==是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。相对的,那些还可以分解的数据叫做==聚合量(Aggregate)==,Java中的对象就是聚合量,因为它可以分解成其他聚合量和标量。</p><p>在JIT阶段,如果经过逃逸分析,发现一个对象不会被外界访问的话,那么经过JIT优化,就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p><p>==标量替换后,可以大大减少堆内存的占用==。因为一旦不需要创建对象了,那么久不需要分配堆内存了</p><p>标量替换为栈上分配提供了很好的基础。</p><p>标量替换参数设置:-XX:+EliminateAllocations:开启了标量替换(默认打开),允许将对象打散分配在栈上。</p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727140819791.png" alt="image-20210727140819791"></p><h4 id="逃逸分析小结"><a href="#逃逸分析小结" class="headerlink" title="逃逸分析小结"></a>逃逸分析小结</h4><p>==逃逸分析并不成熟==</p><p>关于逃逸分析的论文在1999年就已经发表了,但是直到JDK1.6才有实现,而且这项技术到如今也不是十分成熟。</p><p>其根本原因就是==无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的,这其实也是一个相对耗时的过程。==</p><p>一个极端的例子,就是经过逃逸分析 之后,发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p><p>虽然项技术并不十分成熟,但是它也是==即时编译器优化技术中一个十分重要的手段。==</p><p>注意到一些观点,认为通过逃逸分析,JVM会在栈上分配那些不会逃逸的对象,这在理论上是可行的,但是取决于JVM设计者的选择。(据说)Oracle HotSpot JVM中并没有这么做,所有的对象实例都是创建在堆上的</p><p>==!!==</p><p>目前很多书籍都还是基于JDK7以前的版本,但是JDK以及发生了很大的变化,intern字符串的缓存和静态变量曾经都被分配在永久代上,而永久代已经被元数据区取代。但是,intern字符串缓存和静态变量并不是转移到元数据区,而是直接在堆上分配,所以这一点同样符合前面的结论;==对象实例都是分配在堆上。==</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>年轻代是对象的诞生、成长、消亡的区域,一个对象在这里产生、应用,最后被垃圾回收器收集,结束生命。</p><p>老年代 放置长生命周期的对象,通常都是从Survivor区域筛选拷贝过来的Java对象。当然,也有特殊情况,我们知道普通的对象会被分配在TLAB上,如果对象较大,JVM会试图直接分配在Eden其他位置上,如果对象太大,完全无法再新时代找到足够长的连续空闲空间,JVM就会直接分配到老年代。</p><p>当GC只发生在年轻代中,回收年轻代对象的行为被称为Minor GC。当GC发生在老年代时,则被称为Major GC,或者Full GC。一般的,Minor GC的发送频率要比Major GC高很多,即老年代中垃圾回收发送的频率大大低于年轻代。</p><h1 id="九、方法区"><a href="#九、方法区" class="headerlink" title="九、方法区"></a>九、方法区</h1><p>栈、堆、方法区的交互关系</p><p>方法区的理解</p><p>设置方法区大小与OOM</p><p>方法区的内部结构</p><p>方法区的使用举例</p><p>方法区的演进细节</p><p>方法区的垃圾回收</p><p>总结</p><h2 id="1-栈、堆、方法区的交互关系"><a href="#1-栈、堆、方法区的交互关系" class="headerlink" title="1. 栈、堆、方法区的交互关系"></a>1. 栈、堆、方法区的交互关系</h2><p>运行时数据区结构图</p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727172018327.png" alt="image-20210727172018327"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727172128638.png" alt="image-20210727172128638"></p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727172143017.png" alt="image-20210727172143017"></p><h2 id="2-方法区的理解"><a href="#2-方法区的理解" class="headerlink" title="2. 方法区的理解"></a>2. 方法区的理解</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727172216547.png" alt="image-20210727172216547"></p><p>《Java虚拟机规范》中明确说明:”尽管所有的方法区在逻辑上是属于堆的一部分,但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于HotSpotJVM而言,方法区还有一个别名叫做Non-Heap(非堆),目的就是要和堆分开。所以,==方法区看做是一块独立于Java堆的内存空间。==</p><hr><p>基本理解:</p><p>方法区(Method Area)与Java堆一样,是各个线程共享的内存区域。</p><p>方法区在JVM启动的时候被创建,并且它的实际的物理内存空间和Java堆区一样都可以是不连续的。</p><p>方法区的大小,根堆空间一样,可以选择固定大小或者可拓展。</p><p>方法区的大小决定了系统可以保存多少个类,如果系统定义了太多的类,导致方法区溢出,虚拟机同样会抛出内存溢出错误:java.lang.OutOfMemoryError:PermGen space或者java.lang.OutOfMemoryError:Metespace。加载大量的第三方的jar包:Tomcat部署的工程多(30-50个),大量动态的生成反射类。</p><p>关闭JVM就会释放这个区域的内存。</p><hr><p>HotSpot中方法区的演进:</p><p>在jdk7及以前，习惯上把方法区，称为永久代。jdk8开始，使用元空间取代了永久代。</p><p>本质上，方法区和永久代并不等价。仅是对hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit / IBM J9 中不存在永久代的概念。</p><p>现在来看，当年使用永久代，不是好的idea。导致Java程序更容易OOM（超过<code>-XX:MaxPermsize</code>上限）</p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727193041713.png" alt="image-20210727193041713"></p><p>而到了JDK8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替</p><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727193102354.png" alt="image-20210727193102354"></p><p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存</p><p>永久代、元空间二者并不只是名字变了，内部结构也调整了</p><p>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常</p><h2 id="3-设置方法区大小与OOM"><a href="#3-设置方法区大小与OOM" class="headerlink" title="3. 设置方法区大小与OOM"></a>3. 设置方法区大小与OOM</h2><p>设置方法区内存的大小</p><p>方法区的大小不必是固定的，JVM可以根据应用的需要动态调整。</p><p><strong>jdk7及以前</strong></p><ul><li><p>==通过来设置永久代初始分配空间。默认值是20.75M==<code>-XX:Permsize</code></p></li><li><p>==通过来设定永久代最大可分配空间。32位机器默认是64M，64位机器模式是82M==<code>-XX:MaxPermsize</code></p></li><li><p>当JVM加载的类信息容量超过了这个值，会报异常<code>OutOfMemoryError:PermGen space</code>。</p></li></ul><p><img src="/2021/07/22/java-2021-07-22-JVM/image-20210727193408965.png" alt="image-20210727193408965"></p><p><strong>JDK8以后</strong></p><ul><li><p>元数据区大小可以使用参数 <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code>指定</p></li><li><p>默认值依赖于平台。windows下，<code>-XX:MetaspaceSize=21M -XX:MaxMetaspaceSize=-1//即没有限制</code>。</p></li><li><p>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常<code>OutOfMemoryError:Metaspace</code></p></li><li><p><code>-XX:MetaspaceSize</code>：设置初始的元空间大小。对于一个64位的服务器端JVM来说，其默认的<code>-XX:MetaspaceSize</code>值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过<code>MaxMetaspaceSize</code>时，适当提高该值。如果释放空间过多，则适当降低该值。</p></li><li><p>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk8中：</span></span><br><span class="line"><span class="comment"> * -XX:MetaspaceSize=10m-XX:MaxMetaspaceSize=10m</span></span><br><span class="line"><span class="comment"> * jdk6中：</span></span><br><span class="line"><span class="comment"> * -XX:PermSize=10m-XX:MaxPermSize=10m</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMTest</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            OOMTest test = <span class="keyword">new</span> OOMTest();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//创建Classwriter对象，用于生成类的二进制字节码</span></span><br><span class="line">                ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//指明版本号，public，类名，包名，父类，接口</span></span><br><span class="line">                classWriter.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">&quot;Class&quot;</span> + i, nu1l, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">//返回byte[]</span></span><br><span class="line">                <span class="keyword">byte</span>[] code = classWriter.toByteArray();</span><br><span class="line">                <span class="comment">//类的加载</span></span><br><span class="line">                test.defineClass(<span class="string">&quot;Class&quot;</span> + i, code, <span class="number">0</span>, code.length); <span class="comment">//CLass对象</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>解决:</p><ol><li>要解决OOM异常或者heap space的异常,一般的手段是首先通过内存印象分析工具对dump出来的堆转储快照进行分析,重点是确认内存中的对象是否是必要的,也就是要先分清楚到底是出现了内存泄露(Memory Leak)还是内存溢出(Memory Overflow)。</li><li>如果是内存泄露,可进一步通过工具查看泄露对象到GC Roots的引用链。于是就能找到泄露对象时通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄露对象的类型信息,以及GC Roots引用链的信息,就可以比较准确地定位出泄露代码的位置。</li><li>如果不存在内存泄露,换句话说就是内存中的对象确实都还必须存活着,那就应当检查虚拟机的堆参数(-Xmx与-Xmx),与机器物理内存对比看是否还可以调大,从优化代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况,尝试减少程序运行期间的内存消耗。</li></ol><h2 id="4-方法区的内部结构"><a href="#4-方法区的内部结构" class="headerlink" title="4. 方法区的内部结构"></a>4. 方法区的内部结构</h2><p><img src="/2021/07/22/java-2021-07-22-JVM/8a5fcba10ccb773f185288ac22bde206.png" alt="image-20200708161728320"></p><p>方法区(Method Area)中存储什么?</p><p>《深入理解Java虚拟机》中对方法区(Method Area)存储内容描述如下:<br>它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</p><p><img src="/2021/07/22/java-2021-07-22-JVM/fbe3915506e7979c7d591d17c216fbb1.png" alt="image-20200708161856504"></p><h3 id="方法区的内部结构"><a href="#方法区的内部结构" class="headerlink" title="方法区的内部结构:"></a>方法区的内部结构:</h3><p>类型信息:</p><p>对每个加载的类型(类class、接口interface、枚举enum、注解annotation),JVM必须在方法区中存储以下类型信息:</p><ol><li>这个类型的完整有效名称(全类名=包名.类名)</li><li>这个类型直接父亲的完整有效名(对于interface或者是java.lang.object,都没有父类)</li><li>这个类型的修饰符(public,abstract,final的某个子集)</li><li>这个类型直接接口的一个有序列表</li></ol><p>域(Field)信息:</p><p>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。域的相关信息包括:域名称、域类型、域修饰符(public,private,protected,static,final,volatile,transient的某个子集)</p><p>方法(Method)信息:</p><p>JVM必须保存所有的方法的以下信息,同域信息一样包括声明顺序:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、jvm概述&quot;&gt;&lt;a href=&quot;#一、jvm概述&quot; class=&quot;headerlink&quot; title=&quot;一、jvm概述&quot;&gt;&lt;/a&gt;一、jvm概述&lt;/h1&gt;&lt;p&gt;jvm与java体系结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前言&lt;/li&gt;
&lt;li&gt;面向人群及参考书目&lt;/l</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="jvm" scheme="http://stary2020.gitee.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb书城项目传统版</title>
    <link href="http://stary2020.gitee.io/2021/07/14/java-2021-07-14-JavaWebBookCity/"/>
    <id>http://stary2020.gitee.io/2021/07/14/java-2021-07-14-JavaWebBookCity/</id>
    <published>2021-07-14T13:57:09.000Z</published>
    <updated>2021-08-19T02:35:14.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>javaWeb书城项目传统版是在尚硅谷的web培训教程的基础上，进一步完善的，具体资源以及教程都来自/参考尚硅谷课程。</p><p>本次复盘，是在老师原有上课的基础上，补充一些未完成的细节，完善功能，使整个项目看起来更合理一些。因时间原因，项目仍有很多缺点不足，有待改进。加之jsp技术过于老旧，后面可能采取SpringBoot的方式实现类似功能的项目。</p><h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><p>整个项目主要由以下几个部分组成：</p><ul><li>注册登录</li><li>图书模块</li><li>订单模块</li><li>数据库交互</li><li>MVC架构</li></ul><h3 id="注册登录"><a href="#注册登录" class="headerlink" title="注册登录"></a>注册登录</h3><p>注册登录模块主要是实现用户的管理，用户应该分为两种类型，即：常规买家用户和管理员用户，二者权限不同，对于非管理员用户，登录后，应该只能查看自己的订单，与执行签收操作，后台管理部分对其而言应该是隐藏的。</p><p>普通用户的操作有：查看商品，加入购物车，下单付款，确认收货。</p><p>管理员用户还需要维护图书模块和订单模块（发货等操作），所有的权限对管理员开放</p><p>注册与登录的实现：</p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>注册的时候需要用户输入用户名称、用户密码、确认密码、电子邮箱以及验证码等信息，如下图</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210716132522512.png" alt="image-20210716132522512"></p><p>其中，用户名和密码、邮箱等，采用正则表达式在前端jsp页面进行检测，验证码使用的是google提供的验证码生成包。</p><p>若注册时用户名已存在，则采用ajax的形式部分刷新前端页面，重新注册。</p><p>注册成功后，将注册数据写入数据库表</p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>登录的凭据是用户名和密码，采用cookie缓存登录信息（待补充），经由servlet处理后，返回登录结果</p><h3 id="图书模块"><a href="#图书模块" class="headerlink" title="图书模块"></a>图书模块</h3><p>图书模块主要是向用户展示图书商品项</p><h4 id="后台图书管理"><a href="#后台图书管理" class="headerlink" title="后台图书管理"></a>后台图书管理</h4><p>首先，在后台图书管理模块，需要实现以下功能：图书修改、图书删除、图书添加、以及最重要的图书查询。</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210716133230918.png" alt="image-20210716133230918"></p><p>这部分主要是与数据库进行交互，基于CRUD实现</p><h4 id="图书信息展示"><a href="#图书信息展示" class="headerlink" title="图书信息展示"></a>图书信息展示</h4><p>不管是在后台还是在首页，都需要将图书信息展示出来，并且采用分页的形式输出</p><p>分页部分需要新建一个page对象，里面存储分页的相关信息，然后根据分页情况进行查询并返回查询结果到展示页面。</p><p>注意分页条的设计实现</p><p>也可以利用其它分页插件实现</p><p>此外，在首页，还需要设计一个根据价格区间查询图书的功能，底层原理是SQL的条件查询</p><h3 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h3><p>订单模块包括了订单查询、订单管理、以及购物车几个部分，底层也是数据库</p><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><p>购物车部分采用的是session域来保存数据，避免页面跳转、重定向时丢失数据，理论上应该将数据存到数据库。这部分功能有待完善。</p><h4 id="订单管理"><a href="#订单管理" class="headerlink" title="订单管理"></a>订单管理</h4><p>用户将商品添加到购物车后，可以选择付款，付款后，会由系统自动生成一个订单号，并将订单数据保存到数据库</p><p>用户可以在“我的订单”处查看已有的订单，并执行“签收”操作</p><p>管理员可以在后台查看所有的订单，并执行“发货”操作</p><h4 id="订单查询"><a href="#订单查询" class="headerlink" title="订单查询"></a>订单查询</h4><p>订单查询类似图书查询功能，但对普通用户而言，只能查看自己的订单项。</p><p>需要采用分页设计，待改进</p><h3 id="数据库交互"><a href="#数据库交互" class="headerlink" title="数据库交互"></a>数据库交互</h3><p>使用Druid数据库连接池服务。通过jdbcUtils连接数据库，所有的SQL操作类都继承自BaseDao类，所有的CRUD都归结于update和“查询”两个操作。考虑到查询的特殊性，查询又分为返回单个值的和返回对象列表两个种类。这三个基本类几乎涵盖了所有的基础的dao操作。后续需要实现的所有数据库操作，都可以由此得到。</p><h4 id="jdbcUtils"><a href="#jdbcUtils" class="headerlink" title="jdbcUtils"></a>jdbcUtils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DataSourceClosedException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> JdbcUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/29 21:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DruidDataSource dataSource;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; conns=<span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            properties.load(inputStream);</span><br><span class="line"></span><br><span class="line">            dataSource= (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"><span class="comment">//            com.mysql.cj.jdbc.ConnectionImpl@4f9a3314</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn=conns.get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>  &#123;</span><br><span class="line">                <span class="comment">//从数据库连接池获取连接</span></span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                <span class="comment">//保存到ThreadLocal对象中，供后面的jdbc操作使用</span></span><br><span class="line">                conns.set(conn);</span><br><span class="line">                <span class="comment">//设置为手动管理</span></span><br><span class="line">                conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务，并关闭释放连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commitAndClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection=conns.get();</span><br><span class="line">        <span class="comment">//说明使用过连接操作过数据库</span></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.commit();<span class="comment">//提交事务</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();<span class="comment">//关闭连接</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行remove操作（因为tomcat服务器底层使用了线程池）</span></span><br><span class="line">        conns.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务，并关闭释放连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollbackAndClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection connection=conns.get();</span><br><span class="line">        <span class="comment">//说明使用过连接操作过数据库</span></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();<span class="comment">//提交事务</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();<span class="comment">//关闭连接</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行remove操作（因为tomcat服务器底层使用了线程池）</span></span><br><span class="line">        conns.remove();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*   public static void close(Connection conn)&#123;</span></span><br><span class="line"><span class="comment">        if(conn!=null)</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                conn.close();</span></span><br><span class="line"><span class="comment">            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BaseDao"><a href="#BaseDao" class="headerlink" title="BaseDao"></a>BaseDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.proxy.jdbc.JdbcParameter;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.utils.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.QueryResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> BaseDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/4/30 13:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用dbUtils操作数据库</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql,Object ...args)</span></span>&#123;</span><br><span class="line">        Connection connection= JdbcUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.update(connection,sql,args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">queryForOne</span><span class="params">(Class&lt;T&gt;type,String sql,Object ...args)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">new</span> JdbcUtils().getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(connection,sql,<span class="keyword">new</span> BeanHandler&lt;T&gt;(type),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">queryForList</span><span class="params">(Class&lt;T&gt;type, String sql, Object ...args)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">new</span> JdbcUtils().getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(connection,sql,<span class="keyword">new</span> BeanListHandler&lt;T&gt;(type),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">queryForSingleValue</span><span class="params">(String sql,Object...args)</span></span>&#123;</span><br><span class="line">        Connection connection=JdbcUtils.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(connection,sql,<span class="keyword">new</span> ScalarHandler(),args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h3><p>mvc三层架构：dao、service、servlet，三层。dao层负责数据库交互，service层负责业务处理，servlet层负责页面分发。</p><p>基本逻辑是：前端页面访问servlet获取服务。servlet通过service处理请求。service调用dao层获取数据。</p><p>dao层与数据库保持一致，service层负责需要处理的各项业务，实现例如查询全部图书、修改订单状态之类的功能。而servlet层从前端获取数据，调用service获得返回值，然后将结果以页面的形式展现</p><h4 id="BaseServlet"><a href="#BaseServlet" class="headerlink" title="BaseServlet"></a>BaseServlet</h4><p>BaseServlet是servlet层最核心的一个类，其他子类通过继承他，可以简化其他类的操作。通过反射实现对前端请求的响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> BaseServlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/7 20:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="comment">//解决中文乱码</span></span><br><span class="line">       req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">       resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String action = req.getParameter(<span class="string">&quot;action&quot;</span>);</span><br><span class="line">        <span class="comment">//反射实现</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = <span class="keyword">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            method.invoke(<span class="keyword">this</span>, req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);<span class="comment">//把异常抛给servlet程序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       doPost(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="WebUtils"><a href="#WebUtils" class="headerlink" title="WebUtils"></a>WebUtils</h4><p>WebUtils是一个工具类，其主要具有两项功能：</p><ul><li>包装，即将前端传输过来的数据包装成bean类</li><li>转换，将前端传送过来的String类型变量转化为Integer类型，并设置默认值（0），避免空指针异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.pojo.User;</span><br><span class="line"><span class="comment">//import com.sun.deploy.net.HttpResponse;</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> stary</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/5/7 20:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">copyParamToBean</span><span class="params">(Map values, T bean)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(bean,values);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String strInt,<span class="keyword">int</span> defaultValue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(strInt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="过滤器与事务处理"><a href="#过滤器与事务处理" class="headerlink" title="过滤器与事务处理"></a>过滤器与事务处理</h4><p>在实际应用中，考虑到会出现许多问题，所以在对数据库进行操作的时候，需要进行事务管理，避免因为意外导致数据库错误，出现脏读、幻读等</p><p>其次，采用过滤器对权限进行管理。</p><h1 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>打开idea，新建一个项目，注意命名方式，任何时候，命名方式都尽量保持无空格无中文</p><p>在新的项目下，新建一个模块，作为开发的主体</p><p>右键模块名，为模块添加框架支持</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715155654832.png" alt="image-20210715155654832"></p><p>勾选web application ，为模块添加web支持。记得勾选创建 web.xml，这是web工程的配置文件，点击OK完成</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715155824642.png" alt="image-20210715155824642"></p><p>导入前端文件，前端文件包括了页面（存储在page目录下），静态资源（jQuery、css、image等，存储在static下），首页index</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715161929147.png" alt="image-20210715161929147"></p><p>至此，前端准备工作基本完成，后期根据需求进行修改</p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>接下来需要配置运行环境，用的是tomcat</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715162125997.png" alt="image-20210715162125997"></p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715162302557.png" alt="image-20210715162302557"></p><p>先配置artifact，修改项目名称</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715162553300.png" alt="image-20210715162553300"></p><p>接下来配置服务器，根据需求配置，建议修改为热部署，其他默认就好。</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715162659632.png" alt="image-20210715162659632"></p><h3 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h3><p>本次是在之前的基础上复盘，这里直接导入所有需要使用的jar包，在WEB-INF目录下，新建lib文件夹，导入需要使用的jar包，这里包括了后端前端所需要使用的jar包</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715163056095.png" alt="image-20210715163056095"></p><p>选中全体jar包，右键，添加到库</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715163303721.png" alt="image-20210715163303721"></p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715163331348.png" alt="image-20210715163331348"></p><p>最后，jar包出现可以展开的符号，表示添加成功</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715163408118.png" alt="image-20210715163408118"></p><p>也可以使用File、Project Structure的方式导入jar包<img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715163449343.png" alt="image-20210715163449343"></p><p>运行tomcat，浏览器正确打开首页，</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715163637421.png" alt="image-20210715163637421"></p><p>至此，前期准备工作完成</p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>前期准备基本完成，但是考虑到后面需要使用到数据库，也一并配置数据库</p><p>包括一个用户表和商品表</p><p>sql参考</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_book`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">11</span>, <span class="number">2</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sales` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `stock` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `img_path` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">30</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_book` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;java从入门到放弃&#x27;</span>, <span class="number">80.00</span>, <span class="string">&#x27;国哥&#x27;</span>, <span class="number">10009</span>, <span class="number">9</span>, <span class="string">&#x27;static/img/default.jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_book` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;数据结构与算法&#x27;</span>, <span class="number">78.50</span>, <span class="string">&#x27;严敏君&#x27;</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="string">&#x27;static/img/default.jpg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin@atguigu.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此外还需要存储购物车和订单等的数据表，此处略，后面添加</p><h2 id="2-登录与注册"><a href="#2-登录与注册" class="headerlink" title="2. 登录与注册"></a>2. 登录与注册</h2><p>登录注册功能，当前端点击登录、注册的按钮时，会触发相应的功能，详情见总体设计</p><h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><p>User类的主要字段，后期需要修改增加权限控制字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><p>数据库中存在相同的表单项，保存用户的信息。注册是将前端传来的数据写入，登录则是比较前端数据与数据库是否一致。</p><p>Dao层需要实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByUsernameAndPassword</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>service层需要实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existsUsername</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><p>servlet层，对于UserServlet，继承自BaseDao，提供三个服务，regist、login、loginOut。注意servlet需要在web.xml中注册。</p><p>判断验证码是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取并删除验证码</span></span><br><span class="line">       String token=(String) req.getSession().getAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">       req.getSession().removeAttribute(KAPTCHA_SESSION_KEY);</span><br><span class="line">       String code = req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">           System.out.println(<span class="string">&quot;code=&quot;</span>+code);</span><br><span class="line">           System.out.println(<span class="string">&quot;token=&quot;</span>+token);</span><br></pre></td></tr></table></figure><p>注意登录成功后，需要将数据回传给前端，登录注册失败、登录错误也需要回传数据</p><h2 id="3-页面优化"><a href="#3-页面优化" class="headerlink" title="3. 页面优化"></a>3. 页面优化</h2><p>将前端的页面进行优化，抽取相同的页面元素放在common，便于后期维护</p><p>这部分主要是前端的工作，目前对前端技术掌握不是太好，只是有个基本了解，此处就不再具体赘述</p><h2 id="4-图书管理"><a href="#4-图书管理" class="headerlink" title="4. 图书管理"></a>4. 图书管理</h2><h3 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h3><p>Book的pojo类，数据库中同样要存在类似的表，用来存储图书信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer sales;</span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="keyword">private</span> String imgPath=<span class="string">&quot;static/img/default.jpg&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Page的pojo类，用来实现分页功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer page_size=<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNo;</span><br><span class="line">    <span class="comment">//总页码</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageTotal;</span><br><span class="line">    <span class="comment">//当前页显示数量</span></span><br><span class="line">    <span class="keyword">private</span>  Integer pageSize=page_size;</span><br><span class="line">    <span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageTotalCount;</span><br><span class="line">    <span class="comment">//当前页数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; items;</span><br><span class="line">    <span class="comment">//分页条地址</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要实现的dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.pojo.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加图书</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="comment">//删除图书</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//更新书籍信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">queryBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//查询所有图书</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">queryBooks</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//查询分页数</span></span><br><span class="line">    <span class="function">Integer <span class="title">queryForPageTotalCount</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//查询指定区间的图书</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">queryForPageItems</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line">    <span class="comment">//按价格区间查询分页数</span></span><br><span class="line">    <span class="function">Integer <span class="title">queryForPageTotalCountByPrice</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询指定价格区间中指定分页区间的图书</span></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">queryForPageItemsByPrice</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Book book)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">queryBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">queryBooks</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;Book&gt; <span class="title">page</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;Book&gt; <span class="title">pageByPrice</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="servlet-1"><a href="#servlet-1" class="headerlink" title="servlet"></a>servlet</h3><p>add、update、delete、list、getBook、page几个功能。其中page实现分页功能，实际应用的过程中，会替换掉list（查询全部书籍），getBook是获取要修改的图书的信息。</p><p>分页实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">page</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求参数pageNo、pageSize</span></span><br><span class="line">        <span class="keyword">int</span> pageNo= WebUtils.parseInt(req.getParameter(<span class="string">&quot;pageNo&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> pageSize=WebUtils.parseInt(req.getParameter(<span class="string">&quot;pageSize&quot;</span>), Page.page_size);</span><br><span class="line">        <span class="comment">//调用bookservice。page</span></span><br><span class="line">        Page&lt;Book&gt; page=bookService.page(pageNo,pageSize);</span><br><span class="line">        page.setUrl(<span class="string">&quot;client/clientbookServlet?action=page&quot;</span>);</span><br><span class="line">        <span class="comment">//保存page对象到request域中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/pages/client/index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pageByPrice</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求参数pageNo、pageSize</span></span><br><span class="line">        <span class="keyword">int</span> pageNo= WebUtils.parseInt(req.getParameter(<span class="string">&quot;pageNo&quot;</span>),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> pageSize=WebUtils.parseInt(req.getParameter(<span class="string">&quot;pageSize&quot;</span>), Page.page_size);</span><br><span class="line">        <span class="keyword">int</span> min=WebUtils.parseInt(req.getParameter(<span class="string">&quot;min&quot;</span>),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> max=WebUtils.parseInt(req.getParameter(<span class="string">&quot;max&quot;</span>),Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用bookservice。page</span></span><br><span class="line">        Page&lt;Book&gt; page=bookService.pageByPrice(pageNo,pageSize,min,max);</span><br><span class="line"></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder(<span class="string">&quot;client/clientbookServlet?action=pageByPrice&quot;</span>);</span><br><span class="line">        <span class="comment">//若有min请求参数，追加到分页条地址请求参数中</span></span><br><span class="line">        <span class="keyword">if</span>(req.getParameter(<span class="string">&quot;min&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            sb.append(<span class="string">&quot;&amp;min=&quot;</span>).append(req.getParameter(<span class="string">&quot;min&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若有min请求参数，追加到分页条地址请求参数中</span></span><br><span class="line">        <span class="keyword">if</span>(req.getParameter(<span class="string">&quot;max&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            sb.append(<span class="string">&quot;&amp;max=&quot;</span>).append(req.getParameter(<span class="string">&quot;max&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        page.setUrl(sb.toString());</span><br><span class="line">        <span class="comment">//保存page对象到request域中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line">        <span class="comment">//请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/pages/client/index.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-订单管理"><a href="#5-订单管理" class="headerlink" title="5. 订单管理"></a>5. 订单管理</h2><p>订单管理模块又细分为购物车和订单管理</p><h3 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h3><p>dao层有四个pojp类，分别归属于购物车和订单。</p><p>其中Cart记录购物车的基础信息，CartItem保存购物车中的详细商品项。</p><p>同理，Order记录订单基础信息，OrderItem保存订单中的详细商品项。</p><p>Cart</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer totalCount;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal totalPrice;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,CartItem&gt; items=<span class="keyword">new</span> LinkedHashMap&lt;Integer,CartItem&gt;();</span><br></pre></td></tr></table></figure><p>CartItem</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal totalPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Order</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="comment">//0未发货，1已发货，2表示已签收</span></span><br><span class="line">    <span class="keyword">private</span> Integer status=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br></pre></td></tr></table></figure><p>OrderItem</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> Integer count;</span><br><span class="line">   <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">   <span class="keyword">private</span> BigDecimal totalPrice;</span><br><span class="line">   <span class="keyword">private</span> String orderId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要实现的接口：</p><p>由于购物车模块没有保存到数据库中，所以这里的购物车就不需要与数据库进行交互</p><p>OrderDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveOrder</span><span class="params">(Order order)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">queryOrders</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">changeOrderStatus</span><span class="params">(String status,String orderId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">queryOrdersByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderItemDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderItemDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveOrderItem</span><span class="params">(OrderItem orderItem)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">queryOrderItemByOrderId</span><span class="params">(String orderId)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h3><p>service层也只有订单项一种服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生成订单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createOrder</span><span class="params">(Cart cart,Integer userId)</span></span>;</span><br><span class="line">    <span class="comment">//查询全部订单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">showAllOrders</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//发货</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOrder</span><span class="params">(String orderId)</span></span>;</span><br><span class="line">    <span class="comment">//查看订单详情</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title">showOrderDetail</span><span class="params">(String orderId)</span></span>;</span><br><span class="line">    <span class="comment">//查看我的订单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">showMyOrders</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//签收订单、确认收货</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveOrder</span><span class="params">(String orderId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意生成订单的服务：</p><p>生成订单项，需要将购物车中的数据，转化为订单项的数据，保存到数据库后，清空购物车。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">createOrder</span><span class="params">(Cart cart, Integer userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       String orderId=System.currentTimeMillis()+<span class="string">&quot;&quot;</span>+userId;</span><br><span class="line">       Order order=<span class="keyword">new</span> Order(orderId,<span class="keyword">new</span> Date(),cart.getTotalPrice(),<span class="number">0</span>,userId);</span><br><span class="line">       orderDao.saveOrder(order);</span><br><span class="line">       <span class="comment">//遍历购物车中每一个商品项，转化为订单项保存到数据库</span></span><br><span class="line">       <span class="keyword">for</span>(Map.Entry&lt;Integer, CartItem&gt;entry:cart.getItems().entrySet())&#123;</span><br><span class="line">           <span class="comment">//获取每个购物车中的商品项</span></span><br><span class="line">           CartItem cartItem=entry.getValue();</span><br><span class="line">           <span class="comment">//转换为每一个订单项</span></span><br><span class="line">           OrderItem orderItem=<span class="keyword">new</span> OrderItem(<span class="keyword">null</span>,cartItem.getName(),cartItem.getCount(),cartItem.getPrice(),cartItem.getTotalPrice(),orderId);</span><br><span class="line">           <span class="comment">//保存订单项到数据库</span></span><br><span class="line">           orderItemDao.saveOrderItem(orderItem);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//更新库存和销量</span></span><br><span class="line">           Book book = bookDao.queryBookById(cartItem.getId());</span><br><span class="line">           book.setSales(book.getSales()+cartItem.getCount());</span><br><span class="line">           book.setStock(book.getStock()-cartItem.getCount());</span><br><span class="line">           bookDao.updateBook(book);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//清空购物车</span></span><br><span class="line">       cart.clear();</span><br><span class="line">       <span class="keyword">return</span> orderId;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="servlet-2"><a href="#servlet-2" class="headerlink" title="servlet"></a>servlet</h3><p>OrderServlet和CartServlet两个servlet，分别处理购物车和订单的请求</p><ul><li>CartServlet：addItem添加（被ajaxAddItem替换）、deleteItem删除、clear清空、updateCount修改数量</li><li>OrderServlet：createOrder生成订单、showAllOrder查看所有订单、sendOrder发货、showOrderDetail查看订单详情、showMyOrder查看我的订单、receiveOrder签收订单</li></ul><p>ajaxAddItem：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ajaxAddItem</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数、商品编号</span></span><br><span class="line">    <span class="keyword">int</span> id= WebUtils.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>),<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//调用bookservice。queryBookById，得到图书信息</span></span><br><span class="line">    Book book = bookService.queryBookById(id);</span><br><span class="line">    <span class="comment">//把图书信息转换为cartItem信息</span></span><br><span class="line">    CartItem cartItem = <span class="keyword">new</span> CartItem(book.getId(), book.getName(), <span class="number">1</span>, book.getPrice(), book.getPrice());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用cart。addItem，添加商品项</span></span><br><span class="line">    Cart cart=(Cart)req.getSession().getAttribute(<span class="string">&quot;cart&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(cart==<span class="keyword">null</span>)&#123;</span><br><span class="line">        cart=<span class="keyword">new</span> Cart();</span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;cart&quot;</span>,cart);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cart.addItem(cartItem);</span><br><span class="line">    <span class="comment">//保存最后一次添加的商品名称到session域</span></span><br><span class="line">    req.getSession().setAttribute(<span class="string">&quot;lastName&quot;</span>,cartItem.getName());</span><br><span class="line">    <span class="comment">//ajax返回</span></span><br><span class="line">    Map&lt;String ,Object&gt; resultMap=<span class="keyword">new</span> HashMap&lt;String ,Object&gt;();</span><br><span class="line">    resultMap.put(<span class="string">&quot;totalCount&quot;</span>,cart.getTotalCount());</span><br><span class="line">    resultMap.put(<span class="string">&quot;lastName&quot;</span>,cartItem.getName());</span><br><span class="line">    Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">    String resultMapJsonString=gson.toJson(resultMap);</span><br><span class="line">    resp.getWriter().write(resultMapJsonString);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>泛型的使用。</li><li>反射的应用。</li><li>面向接口编程</li><li>空指针异常</li><li>前后端交互。json数据流与对象</li><li>MVC三层架构</li><li>事务处理与权限管理（拦截器）</li><li>“导包”。使用功能前，必“导包”，包括jar包和html、jsp的引用</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="时区报错，"><a href="#时区报错，" class="headerlink" title="时区报错，"></a>时区报错，</h3><p>修改配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/book?serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715181248446.png" alt="image-20210715181248446"></p><h3 id="tomcat乱码"><a href="#tomcat乱码" class="headerlink" title="tomcat乱码"></a>tomcat乱码</h3><p>修改配置文件。找到tomcat安装目录conf下logging.properties文件，打开后搜索：java.util.logging.ConsoleHandler.encoding修改为GBK</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715195227139.png" alt="image-20210715195227139"></p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715195419241.png" alt="image-20210715195419241"></p><h3 id="查询为空"><a href="#查询为空" class="headerlink" title="查询为空"></a>查询为空</h3><p>查询时出现查出数据为空的情况：大概率是pojo类与数据表项名字不一致，解决方式：在sql语句中添加别名</p><p><img src="/2021/07/14/java-2021-07-14-JavaWebBookCity/image-20210715213802248.png" alt="image-20210715213802248"></p><p>foreach查询不出数据，在jsp中添加&lt;%@taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;%&gt;">http://java.sun.com/jsp/jstl/core&quot;%&gt;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;javaWeb书城项目传统版是在尚硅谷的web培训教程的基础上，进一步完善的，具体资源以及教程都来自/参考尚硅谷课程。&lt;/p&gt;
&lt;p&gt;本次复</summary>
      
    
    
    
    <category term="java" scheme="http://stary2020.gitee.io/categories/java/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="web" scheme="http://stary2020.gitee.io/tags/web/"/>
    
    <category term="jsp" scheme="http://stary2020.gitee.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://stary2020.gitee.io/2021/07/11/tools-2021-07-11-DesignPatterns/"/>
    <id>http://stary2020.gitee.io/2021/07/11/tools-2021-07-11-DesignPatterns/</id>
    <published>2021-07-11T01:37:47.000Z</published>
    <updated>2021-08-19T02:34:19.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><h2 id="1-经典面试题"><a href="#1-经典面试题" class="headerlink" title="1.经典面试题"></a>1.经典面试题</h2><h3 id="原型设计模式"><a href="#原型设计模式" class="headerlink" title="原型设计模式"></a>原型设计模式</h3><ol><li>有请使用UML类图画出原型模式核心角色 </li><li> 原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写 clone方法实现深拷贝、使用序列化来实现深拷贝) </li><li> 在Spring框架中哪里使用到原型模式，并对源码进行分析 beans.xml </li><li>Spring中原型bean的创建，就是原型模式的应用 </li><li> 代码分析+Debug源码</li><li>设计模式的七大原则: 要求：<ol><li>七大设计原则核心思想 </li><li> 能够以类图的说明设计原则</li><li> 在项目实际开发中，你在哪里使用到了ocp原则</li></ol></li></ol><p>金融借贷平台项目：借贷平台的订单，有审核发布-抢单 等等 步骤，随着操作的不同，会改 变订单的状态, 项目中的这个模块实现就会使用 到状态模式，请你使用状态模式进行设计，并 完成实际代码<br>问题分析 ： 这类代码难以应对变化，在添加一种状态时， 我们需要手动添加if/else，在添加一种功能时， 要对所有的状态进行判断。因此代码会变得越 来越臃肿，并且一旦没有处理某个状态，便会 发生极其严重的BUG，难以维护</p><h3 id="解释器设计模式"><a href="#解释器设计模式" class="headerlink" title="解释器设计模式"></a>解释器设计模式</h3><ol><li>介绍解释器设计模式是什么? </li><li>画出解释器设计模式的UML类图, 分析设计模式中的各个角色是什 么? </li><li> 请说明Spring的框架中，哪里 使用到了解释器设计模式，并 做源码级别的分析</li><li>解释器模式在Spring框架应用的源码剖析 <ol><li>Spring框架中 SpelExpressionParser就使用到解释器模式 </li><li> 代码分析+Debug源码+模式角色分析说明</li></ol></li></ol><h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>单例设计模式一共有几种实现方式？请分别用代码实现，并说明各个实现方式的 优点和缺点? </p><p>单例设计模式一共有8种写法，</p><ol><li>饿汉式 两种 </li><li>懒汉式 三种 </li><li>双重检查</li><li> 静态内部类</li><li>枚举</li></ol><h2 id="2-概述设计模式"><a href="#2-概述设计模式" class="headerlink" title="2.概述设计模式"></a>2.概述设计模式</h2><h3 id="设计模式的重要性-："><a href="#设计模式的重要性-：" class="headerlink" title="设计模式的重要性 ："></a>设计模式的重要性 ：</h3><ol><li>软件工程中，设计模式（design pattern）是对软件设计中<strong>普遍存在（反复出现）</strong> 的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人 在1990年代从建筑设计领域引入到计算机科学的</li><li>大厦 VS 简易房</li><li>拿实际工作经历来说, 当一个项目开发完后，如果<strong>客户提出增新功能</strong>，怎么办?。</li><li>如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (<strong>维护性</strong>[可读性、 规范性]) </li><li>目前程序员门槛越来越高，一线IT公司(大厂)，都会问你在实际项目中　<font color="red"> <strong>使用过什么 设计模式，怎样使用的，解决了什么问题。</strong></font></li><li>设计模式在软件中哪里？面向对象(oo)=&gt;功能模块[设计模式+算法(数据结构)]=&gt;框 架[使用到多种设计模式]=&gt;架构 [服务器集群] </li><li>如果想成为合格软件工程师，那就花时间来研究下设计模式是非常必要的.</li></ol><h3 id="设计原则核心思想"><a href="#设计原则核心思想" class="headerlink" title="设计原则核心思想"></a>设计原则核心思想</h3><ol><li>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起</li><li>针对接口编程，而不是针对实现编程</li><li>为了交互对象之间的<strong>松耦合设计而努力</strong></li></ol><h2 id="3-UML类图"><a href="#3-UML类图" class="headerlink" title="3.UML类图"></a>3.UML类图</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>UML——Unified modeling language UML  (统一建模语言)，是一种用于软件系统 分析和设计的语言工具，它用于帮助软 件开发人员进行思考和记录思路的结果 </li><li> UML本身是一套符号的规定，就像数学 符号和化学符号一样，这些符号用于描 述软件模型中的各个元素和他们之间的 关系，比如类、接口、实现、泛化、依 赖、组合、聚合等，如右图: </li><li>使用UML来建模，常用的工具有 Rational  Rose , 也可以使用一些插件来建模</li></ol><p>画UML图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理， </p><p>UML图分类：</p><ol><li>用例图(use case) </li><li>静态结构图：类图、对象图、包图、组件图、部署图</li><li>动态行为图：交互图（时序图与协作图）、状态图、活动图</li></ol><p>UML类图：</p><ol><li>用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。</li><li> 类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合</li><li>依赖：只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编 绎都通过不了<br>小结<ol><li>类中用到了对方</li><li>如果是类的成员属性 </li><li> 如果是方法的返回类型</li><li>是方法接收的参数类型 </li><li>方法中使用到</li></ol></li><li>泛化：泛化关系实际上就是继承关系，他是依赖关系的特例<br>小结：<ol><li>泛化关系实际上就是继承关系</li><li> 如果A类继承了B类，我们就说A和B存在泛化关系</li></ol></li><li>实现：实现关系实际上就是A类实现B接口，他是依赖关系的特例</li><li>关联：关联关系实际上就是类与类之间的联系，他是依赖关系的特例 关联具有导航性：即双向关系或单向关系 关系具有多重性：如“1”（表示有且仅有一个），“0…”（表示0个或者多个）， “0，1”（表示0个或者一个），“n…m”(表示n到 m个都可以),“m…*”（表示至少m 个）。 </li><li>聚合：聚合关系（Aggregation）表示的是整体和部分的关系，整体与部分可以分开。<br>聚 合关系是关联关系的特例，所以他具有关联的导航性与多重性。 如：一台电脑由键盘(keyboard)、显示器(monitor)，鼠标等组成；组成电脑的各个 配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示：</li><li>组合：组合关系：也是整体与部分的关系，但是整体与部分不可以分开。<br>再看一个案例：在程序中我们定义实体：Person与IDCard、Head, 那么 Head 和 Person 就是 组合，IDCard 和 Person 就是聚合。</li></ol><h1 id="2-七大原则"><a href="#2-七大原则" class="headerlink" title="2.七大原则"></a>2.七大原则</h1><h2 id="1-设计模式目的"><a href="#1-设计模式目的" class="headerlink" title="1.设计模式目的"></a>1.设计模式目的</h2><p>编写软件过程中，程序员面临着来自<strong>耦合性、内聚性以及可维护性、可拓展性、重用性、灵活性</strong>等多方面的挑战，设计模式是为了让程序（软件）具有更好的：</p><ol><li>代码重用性 (即：相同功能的代码，不用多次编写) </li><li>可读性 (即：编程规范性, 便于其他程序员的阅读和理解) </li><li> 可扩展性 (即：当需要增加新的功能时，非常的方便，称为可维护)</li><li>可靠性 (即：当我们增加新的功能后，对原来的功能没有影响)</li><li>使程序呈现高内聚，低耦合的特性</li></ol><p>分享金句： </p><ol><li>设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计 （OOA/D）的精要”</li><li> Scott Mayers 在其巨著《Effective C++》就曾经说过：C++老手和 C++新手的区别就是 前者手背上有很多伤疤</li></ol><h2 id="2-七大原则-1"><a href="#2-七大原则-1" class="headerlink" title="2.七大原则"></a>2.七大原则</h2><p>设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么这样设计的依据）</p><p>七大原则：</p><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转（倒置）原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特原则</li><li>合成复用原则</li></ol><h2 id="3-单一职责原则"><a href="#3-单一职责原则" class="headerlink" title="3. 单一职责原则"></a>3. 单一职责原则</h2><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>对类来说的，即<strong>一个类应该只负责一项职责</strong>。如类A负责两个不同的职责：职责1、职责2，当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1、A2</p><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><p>略</p><h4 id="注意事项与细节："><a href="#注意事项与细节：" class="headerlink" title="注意事项与细节："></a>注意事项与细节：</h4><ol><li>降低类的复杂度，一个类只负责一项职责</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li><li>通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违反单一职责原则，只有类中方法数量足够少，可以在方法级别保持单一职责原则</li></ol><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</li><li><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210711140553369.png" alt="image-20210711140553369"></li><li>类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对类A和类C来说不是最小接口，那么类B和类D必须去实现他们不需要的方法</li><li>按隔离原则优化：将接口Interface1拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。</li><li><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210711140913112.png" alt="image-20210711140913112"></li></ol><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>依赖倒转原则是指：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li><strong>抽象不应该依赖细节，细节应该依赖抽象</strong></li><li>依赖倒转的中心思想是面向接口编程</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定得多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不设计任何具体的操作，把展现细节的任务交给他们的实现类去完成</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.inversion.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//客户端无需改变</span></span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.receive(<span class="keyword">new</span> Email());</span><br><span class="line"></span><br><span class="line">person.receive(<span class="keyword">new</span> WeiXin());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;电子邮件信息: hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加微信</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">IReceiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;微信信息: hello,ok&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里我们是对接口的依赖</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(IReceiver receiver )</span> </span>&#123;</span><br><span class="line">System.out.println(receiver.getInfo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="细节说明"><a href="#细节说明" class="headerlink" title="细节说明"></a>细节说明</h4><p>依赖关系传递的三种方式：</p><ol><li>接口传递</li><li>构造方法传递</li><li>setter方式传递</li></ol><p>注意：</p><ol><li>低层模块尽量有抽象类或接口，或者两者都有，程序稳定性更好</li><li>变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象之间，就存在一个缓冲层，利于程序的拓展和优化</li><li>继承时遵循里氏替换原则</li></ol><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><h3 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>OO中的继承性：</p><ol><li>继承包含这样的一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏</li><li><strong>继承在给程序设计带来便利的同时，也带来了弊端</strong>。比如使用继承类会给程序带来<strong>侵入性</strong>，程序的可移植性降低，增加对象之间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到的子类的功能都有可能产生故障</li><li>问题提出：<strong>在编程中，如何正确的使用继承？====》里氏替换原则</strong></li></ol><p>基本介绍：</p><ol><li>里氏替换原则在1988年，由麻省理工学院的一位姓里的女士提出的</li><li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，<strong>所有引用积累的地方必须能透明底使用其子类的对象</strong></li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法</li><li>里氏替换原则告诉我们，继承实际上让两个类的耦合性增强了，在适当的情况下，可以通过　<font color="red"> 聚合，组合，依赖 </font>来解决问题</li></ol><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><h3 id="基本介绍-4"><a href="#基本介绍-4" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>开闭原则是编程中<strong>最基础、最重要</strong>的设计原则</li><li>一个软件实体如类、模块和函数，应该<strong>对拓展开放（对提供方）</strong>，对<strong>修改关闭（对使用方）</strong>。用抽象构建框架，用实现拓展细节</li><li>当软件需要变化时，尽量通过拓展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li><li>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则</li></ol><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.principle.ocp.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用看看存在的问题</span></span><br><span class="line">GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line">graphicEditor.drawShape(<span class="keyword">new</span> OtherGraphic());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span> </span>&#123;</span><br><span class="line"><span class="comment">//接收Shape对象，调用draw方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">s.draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m_type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Rectangle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Circle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增画三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">Triangle() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增一个图形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherGraphic</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">OtherGraphic() &#123;</span><br><span class="line"><span class="keyword">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">&quot; 绘制其它图形 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><h3 id="基本介绍-5"><a href="#基本介绍-5" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>一个对象应该对其他对象保持最少的了解</li><li>类与类的关系越密切，耦合度越大</li><li>迪米特原则也叫<strong>最少知道原则</strong>，即一个类<strong>对自己依赖的类知道的越少越好</strong>。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的public方法，不对外泄露任何信息</li><li>迪米特原则还有个更简单的定义：只与直接的朋友通信</li><li><strong>直接的朋友</strong>：每个对象都会与其他的对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现<strong>成员变量、方法参数】方法返回值</strong>中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部</li></ol><h3 id="细节注意"><a href="#细节注意" class="headerlink" title="细节注意"></a>细节注意</h3><ol><li>迪米特原则的核心是降低类之间的耦合</li><li>注意：由于每个类都减少了不必要的依赖，依次迪米特原则只是要求降低类间（对象间）的耦合关系，并不是要求完全没有依赖。</li></ol><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><h3 id="基本介绍-6"><a href="#基本介绍-6" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>原则是尽量使用合成、聚合的方式，而不是使用聚合</p><p><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210711144757978.png" alt="image-20210711144757978"></p><h1 id="3-二十三种设计模式"><a href="#3-二十三种设计模式" class="headerlink" title="3.二十三种设计模式"></a>3.二十三种设计模式</h1><h2 id="设计模式介绍"><a href="#设计模式介绍" class="headerlink" title="设计模式介绍"></a>设计模式介绍</h2><ol><li>设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验， 模式不是代码，而是某类问题的通用解决方案，设计模式（Design pattern） 代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段时 间的试验和错误总结出来的。</li><li>设计模式的本质提高 软件的维护性，通用性和扩展性，并降低软件的复杂 度。 </li><li>&lt;&lt;设计模式&gt;&gt; 是经典的书，作者是 Erich Gamma、Richard Helm、Ralph  Johnson 和 John Vlissides Design（俗称 “四人组 GOF”） </li><li> 设计模式并不局限于某种语言，java，php，c++ 都有设计模式.</li></ol><h2 id="设计模式类型"><a href="#设计模式类型" class="headerlink" title="设计模式类型"></a>设计模式类型</h2><p>设计模式分为三种类型，共23种 </p><ol><li>创建型模式：单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式。</li><li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享 元模式、代理模式。 </li><li> 行为型模式：模版方法模式、命令模式、访问者模式、迭代器模式、观察者 模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、状态模 式、策略模式、职责链模式(责任链模式)。</li></ol><h2 id="单例设计模式-1"><a href="#单例设计模式-1" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>所谓单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类==只能存在一个对象实例==，并且该类只提供一个取得其对象实例的方法（静态方法）。</p><p>比如Hibernate的SessionFactory，它充当数据存储源的代理，并且负责创建Session对象。SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFanctory就够，这就是单例模式</p><p>单例模式的八种方式：</p><ol><li>==饿汉式（静态常量）==</li><li>==饿汉式（静态代码块）==</li><li>懒汉式（线程不安全）</li><li>懒汉式（线程安全，同步方法）</li><li>懒汉式（线程安全，同步代码块）</li><li>==双重检查==</li><li>==静态内部类==</li><li>==枚举==</li></ol><h3 id="饿汉式（静态常量）"><a href="#饿汉式（静态常量）" class="headerlink" title="饿汉式（静态常量）"></a>饿汉式（静态常量）</h3><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><p>步骤：</p><ol><li>构造器私有化（防止new）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法。getInstance</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式(静态变量)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造器私有化, 外部能new</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li>优点：这种写法比较简单，就是在类加载的时候就完成实例化。避免了线程同步的问题</li><li>缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终未使用过这个实例，则会造成内存的浪费</li><li>这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式（或其他的静态方法）导致类装载，这时候初始化instance就没有达到Lazy Loading的效果</li><li>结论：这种单例模式==可用，但可能造成内存浪费==。</li></ol><h3 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h3><h4 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式(静态变量)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构造器私有化, 外部能new</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123; <span class="comment">// 在静态代码块中，创建单例对象</span></span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><ol><li>和和饿汉式（静态常量）类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点同饿汉式（静态常量）</li><li>结论：这种单例模式可用，但是可能造成内存浪费</li></ol><h3 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h3><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><ol><li>起到了Lazy Loading的效果，但是只能在单线程下使用</li><li>如果在多线程下，一个线程进入了if（singleton==null）判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</li><li>结论：在实际开发中，不要使用这种方式</li></ol><h3 id="懒汉式（线程安全，同步方法）"><a href="#懒汉式（线程安全，同步方法）" class="headerlink" title="懒汉式（线程安全，同步方法）"></a>懒汉式（线程安全，同步方法）</h3><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line"><span class="comment">//即懒汉式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><ol><li>解决了线程不安全的问题</li><li>效率太低，每个线程在想获得类的实例的时候，执行getInstance（）方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得的该类实例，直接return就行了。方法进行同步效率太低</li><li>结论：在实际开发中，不推荐使用这种方式</li></ol><h3 id="懒汉式（线程安全，同步代码块）"><a href="#懒汉式（线程安全，同步代码块）" class="headerlink" title="懒汉式（线程安全，同步代码块）"></a>懒汉式（线程安全，同步代码块）</h3><h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步代码块)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><ol><li>这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，改为同步产生实例化的代码块</li><li>==但是这种同步并不能起到线程同步的作用==。跟第三种实现方式遇到的情形一直，加入一个线程进入if（singleton==null）判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例</li><li>结论：在实际开发中，不能使用这种方式</li></ol><h3 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h3><h4 id="应用-3"><a href="#应用-3" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题</span></span><br><span class="line"><span class="comment">//同时保证了效率, 推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h4><ol><li>Double-Check概念是多线程开发中常使用到的，如代码中所示，我们进行了两次if（singleton==null）检查，这样就可以保证线程安全了</li><li>这样，实例化代码只用执行一次，后面再次进行访问时，判断if（singleton==null），直接return实例化对象，也避免反复进行方法同步</li><li>线程安全，延迟加载，效率较高</li><li>结论：在实际开发中，推荐使用这种单例设计模式</li></ol><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h4 id="应用-4"><a href="#应用-4" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态内部类完成， 推荐使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个静态内部类,该类中有一个静态属性 Singleton</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h4><ol><li>这种方式采用了类装载的机制来保证初始化实例时只有一个线程</li><li>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</li><li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的</li><li>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高</li><li>结论：推荐使用</li></ol><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h4 id="应用-5"><a href="#应用-5" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用枚举，可以实现单例, 推荐</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">INSTANCE; <span class="comment">//属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ok~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="说明-7"><a href="#说明-7" class="headerlink" title="说明"></a>说明</h4><ol><li>这借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程的同步问题，而且还能防止反序列化重新创建新的对象</li><li>这种方式是Effective Java作者Josh Bloch提倡的方式</li><li>结论：推荐使用</li></ol><h3 id="单例模式在JDK应用的源码分析"><a href="#单例模式在JDK应用的源码分析" class="headerlink" title="单例模式在JDK应用的源码分析"></a>单例模式在JDK应用的源码分析</h3><ol><li>在JDK中，java.lang.Runtime就是经典的单例模式（饿汉式）</li><li></li></ol><h3 id="单例模式说明"><a href="#单例模式说明" class="headerlink" title="单例模式说明"></a>单例模式说明</h3><ol><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</li><li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</li><li>单例模式使用的场景：<ul><li>需要频繁的进行创建和销毁的对象</li><li>创建对象时耗时过多或耗费资源过多（即：重量级对象），但又经常用到的对象</li><li>工具类对象</li><li>频繁访问数据库或文件的对象（比如数据源、Session工厂等）</li></ul></li></ol><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>看一个披萨的项目：要便于披萨种类的扩展，要便于维护 </p><ol><li>披萨的种类很多(比如 GreekPizz、CheesePizz 等) </li><li>披萨的制作有 prepare，bake, cut, box  </li><li>完成披萨店订购功能。</li></ol><p>传统方式的优缺点：</p><ol><li>优点是比较好理解，简单易操作。 </li><li>缺点是违反了设计模式的ocp原则，即对扩展开放，对修改关闭。即当我们给类增 加新功能的时候，尽量不修改代码，或者尽可能少修改代码. </li><li>比如我们这时要新增加一个Pizza的种类(Pepper披萨)，我们需要做修改</li><li>改进：<br>分析：修改代码可以接受，但是如果我们在其它的地方也有创建Pizza的代码，就意味 着，也需要修改，而创建Pizza的代码，往往有多处。<br>思路：把创建Pizza对象封装到一个类中，这样我们有新的Pizza种类时，只需要修改该 类就可，其它有创建到Pizza对象的代码就不需要修改了.-&gt; 简单工厂模式</li></ol><h4 id="基本介绍-7"><a href="#基本介绍-7" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>简单工厂模式是属于创建型模式，是工厂模式的一种。==简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例==。简单工厂模式是工厂模式家族中最简单实用的模式</li><li>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）</li><li>在软件开发中，当我们会用到大量的创建某种、某类或者某批对象时，就会使用到工厂模式。</li></ol><h4 id="应用-6"><a href="#应用-6" class="headerlink" title="应用"></a>应用</h4><ol><li><p>简单工厂模式的设计方案：定义一个可以实例化对象的类，封装创建对象的代码</p></li><li><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用简单工厂模式~~&quot;</span>);</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;cheese&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;greek&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;pepper&quot;</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">            <span class="keyword">return</span> pizza;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如 北京的奶酪pizza、 北京的胡椒pizza 或者是伦敦的奶酪pizza、伦敦的胡椒pizza。</p><p>思路1：使用简单工厂模式，创建不同的简单工厂类，比如BJPizzaSimpleFactory、LDPizzaSimpleFactory等，但是考虑到项目规模扩大、以及软件的可维护性、可拓展性，这种方式不是太好</p><p>思路2：使用工厂方法模式</p><h4 id="基本介绍-8"><a href="#基本介绍-8" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现</li><li>工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将<strong>对象的实例化推迟到子类</strong></li></ol><h4 id="应用-7"><a href="#应用-7" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### 抽象工厂模式</span><br><span class="line"></span><br><span class="line">#### 基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 抽象工厂模式：定义了一个<span class="class"><span class="keyword">interface</span>用于创建相关或有依赖关系的对象簇，而无需指明具体的类</span></span><br><span class="line"><span class="class">2. 抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合</span></span><br><span class="line"><span class="class">3. 从设计层面看，抽象工厂模式就是对简单工厂模式的改进（或称为进一步抽象）</span></span><br><span class="line"><span class="class">4. 将工厂抽象成两层，<span class="title">AbsFactory</span>和具体实现的工厂子类。程序员可以根据创建对象使用对应的工厂子类。这样将单个的简单工厂类变成了工厂簇，更利于代码的维护和扩展</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#### 应用</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">~~~<span class="title">java</span></span></span><br></pre></td></tr></table></figure><h3 id="工厂模式小结"><a href="#工厂模式小结" class="headerlink" title="工厂模式小结"></a>工厂模式小结</h3><p>工厂模式在JdK-Calendar中的应用：</p><ul><li>应用了简单工厂模式</li></ul><p>工厂模式意义：</p><ul><li>将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的拓展和维护性</li></ul><p>三种工厂模式：</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><p>设计模式的抽象原则：</p><ul><li>创建对象实例时，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，并返回。有的书上说，变量不要直接持有具体类的引用。</li><li>不要让类继承具体类，而是继承抽象类或者是实现interface接口</li><li>不要覆盖基类中已经实现的方法</li></ul><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>现有一只羊tom，姓名为tom，年龄为1，颜色为白，请编写程序创建和tom羊属性完全相同的10只羊</p><h3 id="传统模式"><a href="#传统模式" class="headerlink" title="传统模式"></a>传统模式</h3><p>分析：</p><ol><li>优点是容易理解，简单易操作</li><li>在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低</li><li>总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活</li><li>改进思路：<br>java中Object类是所有类的根类，Object类提供了一个clone（）方法，该方法可以将一个java对象复制一份，但是需要实现clone的java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制能力===》原型模式</li></ol><h3 id="原型模式-1"><a href="#原型模式-1" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="基本介绍-9"><a href="#基本介绍-9" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>原型模式（Prototype模式）是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型，创建新的对象</li><li>原型模式是一种创建型设计模式，允许一个对象在创建另一个可定制的对象，无需知道如何创建的细节</li><li>工作原理是：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实现创建，即：对象.clone()</li></ol><h4 id="说明-8"><a href="#说明-8" class="headerlink" title="说明"></a>说明</h4><p>uml图：</p><p><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210714090836038.png" alt="image-20210714090836038"></p><ol><li>Prototype：原型类，声明一个克隆自己的接口</li><li>ConcretePrototype：具体的原型类，实现一个克隆自己的操作</li><li>Client：让一个原型对象克隆自己，从而创建一个新的对象（属性一样）</li></ol><h4 id="应用-8"><a href="#应用-8" class="headerlink" title="应用"></a>应用</h4><p>使用原型模式改进传统方式，让程序具有更高的效率和拓展性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#### 实际应用</span><br><span class="line"></span><br><span class="line">Spring中原型bean的创建，就是 原型模式的应用</span><br><span class="line"></span><br><span class="line">#### 拷贝</span><br><span class="line"></span><br><span class="line">浅拷贝介绍：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象</span><br><span class="line"><span class="number">2.</span> 对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</span><br><span class="line"><span class="number">3.</span> 浅拷贝使用默认的clone()方法来实现，例如：sheep=（Sheep）<span class="keyword">super</span>.clone()；</span><br><span class="line"></span><br><span class="line">深拷贝介绍：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 复制对象的所有基本数据类型的成员变量值</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 深拷贝的实现方式<span class="number">1</span>：重写clone方法实现深拷贝</span><br><span class="line"></span><br><span class="line">   ~~~java</span><br></pre></td></tr></table></figure><ol start="4"><li><p>深拷贝的实现方式2：通过对象序列化实现深拷贝（推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   ~~~</span><br><span class="line"></span><br><span class="line">### 细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</span><br><span class="line"><span class="number">2.</span> 不用重新初始化对象，而是动态地获得对象运行时的状态</span><br><span class="line"><span class="number">3.</span> 如果原始对象发生变化（增加或者减少属性），其他克隆的对象也会发生相应的变化，无需修改代码</span><br><span class="line"><span class="number">4.</span> 在实现深克隆的时候可能需要比较复杂的代码</span><br><span class="line"><span class="number">5.</span> **缺点**：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改器源代码，违背了OCP原则。</span><br><span class="line">   OCP原则：开闭原则，Open Closed Principle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 建造者模式</span><br><span class="line"></span><br><span class="line">### 需求</span><br><span class="line"></span><br><span class="line">盖房项目需求：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 需要建房子：这一过程为打桩、砌墙、封顶</span><br><span class="line"><span class="number">2.</span> 房子有各种各样的，比如普通房、高楼、别墅，各种房子的建造过程虽然一样，但是要求不要相同的</span><br><span class="line"></span><br><span class="line">### 传统方式</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure></li></ol><ol><li>优点是比较好理解，简单易操作</li><li>设计的程序结构，过于简单，没有设计缓存层对象，程序的扩展和维护不好，也就是说，这种设计方案，把产品（房子）和创建产品的过程（建造房子的流程）封装在一起，耦合性增强了</li><li>解决方案：将产品和产品建造的过程解耦==》建造者模式</li></ol><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h4 id="基本介绍-10"><a href="#基本介绍-10" class="headerlink" title="基本介绍"></a>基本介绍</h4><ol><li>建造者模式（Builder Pattern），又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构建出不同表现（属性）的对象</li><li>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节</li></ol><p>建造者模式的四个角色：</p><ol><li>Product，产品角色：衣蛾具体的产品对象</li><li>Builder，抽象建造者：创建一个Product对象的各个部件指定的接口/抽象类。</li><li>ConcreteBuilder，具体建造者：实现接口，构建和装配各个部件</li><li>Director，指挥者：构建一个使用Builder接口的对象，它主要是用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程</li></ol><p>建造者模式的原理图：</p><p><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210714093947025.png" alt="image-20210714093947025"></p><h4 id="应用-9"><a href="#应用-9" class="headerlink" title="应用"></a>应用</h4><p>解决盖房子需求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">源码应用：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> java.lang.StringBuilder中的建造者模式：</span><br><span class="line">   源码中建造者模式角色分析 ：</span><br><span class="line">   * Appendable 接口定义了多个append方法(抽象方法), 即Appendable 为抽象建 造者, 定义了抽象方法 </span><br><span class="line">   *  AbstractStringBuilder 实现了 Appendable 接口方法，这里的 AbstractStringBuilder 已经是建造者，只是不能实例化 </span><br><span class="line">   *  StringBuilder 即充当了指挥者角色，同时充当了具体的建造者，建造方法的 实现是由 AbstractStringBuilder 完成, 而StringBuilder 继承了 AbstractStringBuilder</span><br><span class="line"></span><br><span class="line">### 细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 客户端（使用程序）==不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象==</span><br><span class="line"><span class="number">2.</span> 每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以方便地替换具体建造者或增加新的具体建造者，==用户使用不同的具体建造者即可得到不同的产品对象==</span><br><span class="line"><span class="number">3.</span> ==可以更加精细地控制产品的创建过程==。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程</span><br><span class="line"><span class="number">4.</span> ==增加新的具体建造者无需修改原有库类的代码==，指挥者类针对抽象建造者类编程，系统拓展方便，符合开闭原则。</span><br><span class="line"><span class="number">5.</span> 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，==如果产品之间的差异性很大，则不适合使用建造者模式==，因此其使用范围受到一定的限制</span><br><span class="line"><span class="number">6.</span> 如果产品发内部变化复制，可能会导致需要定义很多具体建造类来实现这种变化，导致系统变得很庞大，因此在这种情况下，需要考虑是否选择建造者模式</span><br><span class="line"><span class="number">7.</span> ==抽象工厂模式VS建造者模式==</span><br><span class="line">   抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而生产一个新产品</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 适配器模式</span><br><span class="line"></span><br><span class="line">#### 基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 适配器模式（Adapter Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器（Wrapper）</span><br><span class="line"><span class="number">2.</span> 适配器模式属于结构型模式</span><br><span class="line"><span class="number">3.</span> 主要分为三类：类适配器模式、对象适配器模式、接口适配器模式</span><br><span class="line"></span><br><span class="line">#### 工作原理</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容</span><br><span class="line"><span class="number">2.</span> 从用户的角度看不到被适配者，是解耦的</span><br><span class="line"><span class="number">3.</span> 用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法</span><br><span class="line"><span class="number">4.</span> 用户收到反馈结果，感觉只是和目标接口交互</span><br><span class="line"></span><br><span class="line">### 类适配器模式</span><br><span class="line"></span><br><span class="line">Adapter类，通过继承src类，实现dst类接口，完成src-》dst的适配</span><br><span class="line"></span><br><span class="line">#### 应用</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ol><li>java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点，因为这要求dst必须是接口，有一定的局限性</li><li>src类的方法在Adapter中都会暴露出来，也增加了使用成本</li><li>由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵活性增强了</li></ol><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ol><li>基本思路和类的适配器模式相同，只是将Adapter类作修改，不是继承src类，而是持有src类的实例，以解决兼容性的问题，即：持有src类，实现dst接口，完成src=》dst的适配</li><li>根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系</li><li>对象适配器模式是适配器模式常用的一种</li></ol><h4 id="应用-10"><a href="#应用-10" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#### 细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据合成复用原则，使用组合替代继承，所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口</span><br><span class="line"><span class="number">2.</span> 使用成本更低，更灵活</span><br><span class="line"></span><br><span class="line">### 接口适配器</span><br><span class="line"></span><br><span class="line">#### 介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 一些书籍成为：适配器模式（Default Adapter Pattern）或缺省适配器模式</span><br><span class="line"><span class="number">2.</span> 当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每一个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求</span><br><span class="line"><span class="number">3.</span> 适用于一个接口不想使用其所有的方法的情况</span><br><span class="line"></span><br><span class="line">#### 应用</span><br><span class="line"></span><br><span class="line">应用实例：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Android中的属性动画ValueAnimator类可以 通过addListener(AnimatorListener listener)方 法添加监听器， 那么常规写法如下：</span><br><span class="line"></span><br><span class="line">   ~~~java</span><br><span class="line">   ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">   valueAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   valueAnimator.start();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>有时候我们不想实现 Animator.AnimatorListener接口的全部方法， 我们只想监听onAnimationStart，我们会如 下写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">valueAnimator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"><span class="comment">//xxxx具体实现</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">valueAnimator.start();</span><br></pre></td></tr></table></figure></li><li><p> AnimatorListenerAdapter类，就是一个 接口适配器，代码如下:它空实现了 Animator.AnimatorListener类(src)的所 有方法. </p></li></ol>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimatorListenerAdapter</span> <span class="keyword">implements</span> <span class="title">Animator</span>.<span class="title">AnimatorListener</span></span></span><br><span class="line"><span class="class"><span class="title">Animator</span>.<span class="title">AnimatorPauseListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="comment">//默认实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationPause</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationResume</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>AnimatorListener是一个接口.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnimatorListener</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>程序里的匿名内部类就是Listener 具体实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"><span class="comment">//xxxx具体实现</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>源码应用：</p><ul><li><p>适配器模式在SpringMVC框架中的应用</p><ol><li><p>SpringMvc中的HandlerAdapter, 就使用了适配器模式</p></li><li><p>SpringMVC处理请求的流程</p></li><li><p>使用HandlerAdapter的原因分析：<br>可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的，如果需要直接调用 Controller方法，需要调用的时候就得不断是使用if else来进行判断是哪一种子类然后执行。那么 如果后面要扩展Controller，就得修改原来的代码，这样违背了OCP原则</p></li><li><p>代码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">     ~~~</span><br><span class="line"></span><br><span class="line">  <span class="number">5.</span> SpringMVC通过适配器设计模式获取到对应的Controller的源码</span><br><span class="line"></span><br><span class="line">  <span class="number">6.</span> 说明</span><br><span class="line"></span><br><span class="line">     * Spring定义了一个适配接口，使得每一种Controller有一种对应的适配器实现类</span><br><span class="line">     * 适配器代替controller执行相应的方法</span><br><span class="line">     * 扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 三种命名方式，是根据src是以怎样的形式给到Adapter来命名的</span><br><span class="line"><span class="number">2.</span> 类适配器：以类给到，在Adapter里，就是将src当作类，继承</span><br><span class="line">   对象适配器：以对象给到，在Adapter里，将src作为一个对象，持有</span><br><span class="line">   接口适配器：以接口给到，在Adapter里，将src作为一个接口，实现</span><br><span class="line"><span class="number">3.</span> Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作</span><br><span class="line"><span class="number">4.</span> 实际开发中，实现起来不拘泥这三种经典模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 桥接模式</span><br><span class="line"></span><br><span class="line">### 问题</span><br><span class="line"></span><br><span class="line">传统方案解决手机操作问题分析：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 拓展性问题（类爆炸），如果我们增加手机的样式，则需要增加各个品牌手机的类。同理，如果增加一个手机品牌，也要在各个手机样式类下增加。</span><br><span class="line"><span class="number">2.</span> 违反了单一职责原则，当我们增加手机样式时，需要同时增加所有品牌的手机，这样增加了代码维护成本</span><br><span class="line"><span class="number">3.</span> 解决方案：使用桥接模式</span><br><span class="line"></span><br><span class="line">### 基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 桥接模式（Bridge模式）是指：将实现与抽象放在两个不同的类层中，使两个层次可以独立改变</span><br><span class="line"><span class="number">2.</span> 是一种结构型设计模式</span><br><span class="line"><span class="number">3.</span> Bridge模式基于类的最小设计原则通过使用封装、聚合及继承等行为让不同的类承担不同的职责。它的主要特点是吧抽象（abstraction）与行为实现（implementation）分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展</span><br><span class="line"></span><br><span class="line">原理图：</span><br><span class="line">![image-<span class="number">20210714124346974</span>](<span class="number">2021</span>-<span class="number">07</span>-<span class="number">11</span>-DesignPatterns/image-<span class="number">20210714124346974.</span>png)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Client类：桥接模式的调用者</span><br><span class="line"><span class="number">2.</span> 抽象类（abstraction）：维护了Implementor，即它的实现类ConcreteImplemenetorA……，二者是聚合关系，Abstraction充当桥接类</span><br><span class="line"></span><br><span class="line">### 应用</span><br><span class="line"></span><br><span class="line">解决手机问题：</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>桥接模式在JDBC源码应用</p><ol><li>jdbc的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有MySQL的Driver，Oracle得到Driver，这些就可以当作实现接口类</li></ol><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ol><li>桥接模式实现了抽象和实现部分的分离，从而极大提高了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。</li><li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其他部分有具体业务来完成。</li><li>桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。</li><li>桥接模式的引入增加了系统的理解和设计难度由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性，即需要有这样发应用场景。</li></ol><p>桥接模式的其他应用场景：</p><ol><li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用</li><li>常见的应用场景<ul><li>JDBC驱动程序</li><li>银行转账系统<br>转账分类、转账用户类型</li><li>消息管理<br>消息类型、消息分类</li></ul></li></ol><h2 id="装饰者设计模式"><a href="#装饰者设计模式" class="headerlink" title="装饰者设计模式"></a>装饰者设计模式</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>星巴克咖啡订单项目（咖啡馆）：</p><ol><li>咖啡种类</li><li>调料</li><li>要求在拓展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便</li><li>使用OO来计算不同种类咖啡的费用，可以单点，也可以咖啡+调料</li></ol><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>装饰者模式：动态将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><h3 id="应用-11"><a href="#应用-11" class="headerlink" title="应用"></a>应用</h3><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><h3 id="基本介绍-11"><a href="#基本介绍-11" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>组合模式（Composite Pattern），又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系</li><li>组合模式依据树形结构来组合对象，用来表示部分以及整体层次</li><li>这种类型的设计模式属于结构型模式</li><li>组合模式使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象</li></ol><h3 id="应用-12"><a href="#应用-12" class="headerlink" title="应用"></a>应用</h3><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li>简化客户端操作，客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题</li><li>具有较强的扩展性，当我们需要更改组合对象时，我们只需要调整内部的层次关系，客户端不需要作出任何改动</li><li>方便创建出复杂的层次结构，客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构</li><li>需要遍历组织机构，或者处理的对象具有树形结构时，非常适合使用组合模式</li><li>要求较高的抽象性，如果节点和叶子有很多差异性的话，比如很多方法和属性都不一样，不适合使用组合模式</li></ol><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ol><li>外观模式（Facade)，也叫“过程模式”，外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</li><li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需要跟这个接口发生调用，而无需关心这个子系统的内部细节</li></ol><h3 id="应用-13"><a href="#应用-13" class="headerlink" title="应用"></a>应用</h3><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><ol><li>外观模式对外屏蔽了子系统的细节，因此外观模式降低利率客户端对子系统的复杂性</li><li>外观模式对客户端与子系统的耦合关系，让子系统内部的模块更易维护和扩展</li><li>通过合理的使用外观模式，可以帮我们更好的划分访问的层次</li><li>当系统需要进行分层设计时，可以考虑使用Facade模式</li><li>在维护一个遗留的大型项目时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade类，来提供遗留系统的比较清晰简单的接口，让新系统与Facade类交互，提高复用性</li><li>不能过多的或不合理的使用外观模式，使用外观模式好，还是直接调用模块好，要让系统有层次，利于维护为目的</li></ol><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3><p>小型外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同：</p><ol><li>有客户要求以新闻的形式发布</li><li>有客户要求以博客的形式发布</li><li>有客户希望以微信公众号的形式发布</li></ol><h3 id="传统解决方案"><a href="#传统解决方案" class="headerlink" title="传统解决方案"></a>传统解决方案</h3><ol><li>直接复制粘贴一份，然后根据不同的要求，进行定制修改</li><li>给每一个网站租用一个空间</li><li>方案设计示意图</li></ol><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li>需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同网站的实例对象很多，造成服务器资源的浪费</li><li>解决思路：整合到一个网站中，共享器相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都是可以达成共享，减少服务器资源</li><li>对于代码来说，由于是一份实例，维护和扩展都更加容易</li><li>即：享元模式</li></ol><h3 id="基本介绍-12"><a href="#基本介绍-12" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>享元模式（Flyweight Pattern）也叫蝇量模式：运用共享技术有效地支持大量细粒度的对象</li><li>常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个</li><li>享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似的对象，需要缓冲池时。不需要总是创建新的对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率</li><li>享元模式经典的应用场景就是池技术，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式</li></ol><p>原理图：</p><h4 id="内部状态和外部状态"><a href="#内部状态和外部状态" class="headerlink" title="内部状态和外部状态"></a>内部状态和外部状态</h4><ol><li>享元模式提出了两个需求：细粒度和共享对象。即将对象的信息分为两个部分：内部状态和外部状态</li><li>内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</li><li>外部状态指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态。</li></ol><h3 id="应用-14"><a href="#应用-14" class="headerlink" title="应用"></a>应用</h3><p>解决网站问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">享元模式在JDK-Interger中的应用：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 在享元模式这样理解，“享”就表示共享，“元”表示对象</span><br><span class="line"><span class="number">2.</span> 系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</span><br><span class="line"><span class="number">3.</span> 用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用HashMap/HashTable存储</span><br><span class="line"><span class="number">4.</span> 享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率</span><br><span class="line"><span class="number">5.</span> 享元模式提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是使用享元模式时需要注意的</span><br><span class="line"><span class="number">6.</span> 使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制。</span><br><span class="line"><span class="number">7.</span> 享元模式经典的应用场景是需要缓冲池的场景，比如String常量池、数据库连接池</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 代理模式</span><br><span class="line"></span><br><span class="line">### 介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能</span><br><span class="line"><span class="number">2.</span> 被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象</span><br><span class="line"><span class="number">3.</span> 代理模式有不同发形式，主要有三种：静态代理、动态代理（JDK代理、接口代理）和Cglib代理（可以在内存动态创建对象，而不需要实现接口，它是属于动态代理的范畴）</span><br><span class="line"><span class="number">4.</span> 代理模式示意图</span><br><span class="line"></span><br><span class="line">### 静态代理</span><br><span class="line"></span><br><span class="line">静态代理在使用时，需要定义接口或者父类，被代理对象（即目标对象与代理对象一起实现相同的接口或者是继承相同父类</span><br><span class="line"></span><br><span class="line">#### 应用实例：</span><br><span class="line"></span><br><span class="line">具体要求：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 定义一个接口：ITeacherDao</span><br><span class="line"><span class="number">2.</span> 目标对象TeacherDao实现接口ITeacherDao</span><br><span class="line"><span class="number">3.</span> 使用静态代理方式，就需要在代理对象TeacherDaoProxy中也实现ITeacherDao</span><br><span class="line"><span class="number">4.</span> 调用的时候，通过调用代理对象的方法来调用目标对象</span><br><span class="line"><span class="number">5.</span> 特别提醒：代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><h4 id="分析静态代理"><a href="#分析静态代理" class="headerlink" title="分析静态代理"></a>分析静态代理</h4><ol><li>优点：在不修改目标对象的功能前提下，能通过dialing对象实现对目标功能扩展</li><li>缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类</li><li>一旦接口增加方法，目标对象与代理对象都需要维护</li></ol><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>动态代理模式的基本介绍</p><ol><li>代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</li><li>代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象</li><li>动态代理也叫做：JDK代理、接口代理</li></ol><p>JDK中生成代理对象的API</p><ol><li><p>代理类所在的包：java.lang.reflect.Proxy</p></li><li><p>JDK实现代理只需要使用newProxyInstence方法，但是该方法需要接受三个参数，完整的写法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] </span></span></span><br><span class="line"><span class="params"><span class="function">interfaces,InvocationHandler h )</span></span></span><br></pre></td></tr></table></figure></li></ol><h4 id="应用-15"><a href="#应用-15" class="headerlink" title="应用"></a>应用</h4><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### Cglib代理</span><br><span class="line"></span><br><span class="line">#### 介绍</span><br><span class="line"></span><br><span class="line">Cglib代理模式基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 静态代理和JDK代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理，这就是Cglib代理</span><br><span class="line"><span class="number">2.</span> Cglib代理也叫做子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能的扩展，有些书也将Cglib代理归属到动态代理</span><br><span class="line"><span class="number">3.</span> Cglib是一个强大的高性能代码生成包，它可以运行期扩展java类与实现java接口，它广泛的被许多AOP的框架使用，例如Spring AOP ，实现方法拦截</span><br><span class="line"><span class="number">4.</span> 在AOP编程中如何选择代理模式：</span><br><span class="line">   * 目标对象需要实现接口，用JDK代理</span><br><span class="line">   * 目标对象不需要实现接口，用Cglib代理</span><br><span class="line"><span class="number">5.</span> Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类</span><br><span class="line"></span><br><span class="line">#### 实现</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 需要引入Cglib的jar文件</span><br><span class="line"><span class="number">2.</span> 在内存中动态构建子类，注意代理的类不能为<span class="keyword">final</span>，否则报错。因为<span class="keyword">final</span>类不能被继承，也就没有子类</span><br><span class="line"><span class="number">3.</span> 目标对象的方法如果为<span class="keyword">final</span>、<span class="keyword">static</span>，那么就不会被拦截，即不会执行目标对象额外的业务方法</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><h3 id="代理变体"><a href="#代理变体" class="headerlink" title="代理变体"></a>代理变体</h3><p>几种常见的代理模式变体</p><ol><li>防火墙代理：内网通过代理穿透防火墙，实现对公网的访问</li><li>缓存代理：比如，当请求图片文件等资源时，先到缓存代理取，如果取到资源则OK，如果取不到资源，再到公网或者数据库取，然后缓存</li><li>远程代理：远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息</li><li>同步代理：主要使用在多线程编程中，完成多线程间同步工作</li></ol><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h3><p>编写制作豆浆的程序：</p><ol><li> 制作豆浆的流程 选材—&gt;添加配料—&gt;浸泡—&gt;放到豆浆机打碎</li><li> 通过添加不同的配料，可以制作出不同口味的豆浆</li><li> 选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的</li></ol><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><ol><li>模板方法模式（Template Method Pattern），又叫模板方法模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需求重写方法实现，但调用将以抽象类中定义的方式进行</li><li>简单来说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤</li><li>这种类型的设计模式属于行为型模式</li></ol><p>原理：</p><p><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210714174633658.png" alt="image-20210714174633658"></p><p>说明：</p><ul><li>AbstractClass 抽象类， 类中实现了模板方法(template)，定义了算法的骨 架，具体子类需要去实现 其它的抽象方法operationr2,3,4 </li><li> ConcreteClass 实现抽象方法operationr2,3,4, 以完成算法中特点子类的步 骤</li></ul><h3 id="应用-16"><a href="#应用-16" class="headerlink" title="应用"></a>应用</h3><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">#### 模板方法模式中的钩子方法</span><br><span class="line"></span><br><span class="line">* 在模板方法模式的父类中，我们可定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为“钩子”。</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><p>模板方法模式在Spring框架中的应用：</p><p>Spring IOC容器初始化时运行用到的模板方法模式</p><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><p>模板方法模式的注意事项和细节</p><ol><li>基本思想是：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</li><li>实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用</li><li>既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现</li><li>该模式的不足之处：每一个不同的实现类都需要一个子类实现，导致类的个数增加，使得系统更加庞大</li><li>一般模板方法都加上final关键字，防止子类重写模板方法</li><li>模板方法的使用场景：当要完成在某个过程，该过程要执行一系列步骤，这一系列的步骤方法基本相同，但其个别步骤在实现时，可能不同。通常考虑模板方法模式来处理</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="问题-6"><a href="#问题-6" class="headerlink" title="问题"></a>问题</h3><ol><li>我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，我们只要在手机上安装app就 可以控制对这些家电工作。 2</li><li>这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个App，分别控制，我 们希望只要一个app就可以控制全部智能家电。 </li><li>要实现一个app控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口 给app调用，这时 就可以考虑使用命令模式。</li><li>命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来.</li><li> 在我们的例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品</li></ol><h3 id="基本介绍-13"><a href="#基本介绍-13" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>命令模式基本介绍</p><ol><li>命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪一个<br>我们只知道在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计</li><li>命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦</li><li>在命令模式中会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名），同时命令模式也支持可撤销的操作</li><li>通俗易懂的理解：将军发布命令，士兵去执行，其中将军就是命令发布者，士兵便是具体执行者，其中命令连接了将军和士兵</li></ol><p>原理图：<br><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210714183617841.png" alt="image-20210714183617841"></p><p>说明：</p><ol><li> Invoker 是调用者角色 </li><li> Command: 是命令角色，需要执行的所有命令都在这里，可以是接口或抽象类 </li><li>Receiver: 接受者角色，知道如何实施和执行一个请求相关的操作</li><li>ConcreteCommand: 将一个接受者对象与一个动作绑定，调用接受者相应的操作，实现execute</li></ol><h3 id="应用-17"><a href="#应用-17" class="headerlink" title="应用"></a>应用</h3><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line">* 命令模式在Spring框架JdbcTemplate中使用</span><br><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line">命令模式的注意事项和细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的excute（）方法就可以让接受者工作，而不必知道具体的接受者对象是谁、是如何实现的，命令对象起到了纽带桥梁的作用</span><br><span class="line"><span class="number">2.</span> 容易设计一个命令队列，只要把命令对象放到队列就可以多线程的执行命令</span><br><span class="line"><span class="number">3.</span> 容易实现对请求的销毁和重做</span><br><span class="line"><span class="number">4.</span> 命令模式不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在使用的时候需要注意</span><br><span class="line"><span class="number">5.</span> 空命令也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没有用空命令，我们没按下一个按键都需要判空，这给我们编码带来了一定的麻烦</span><br><span class="line"><span class="number">6.</span> 命令模式经典的应用场景：界面的每一个按钮都是一条命令、模拟CMD（DOS命令）、订单的撤销/恢复、触发-反馈机制</span><br><span class="line"></span><br><span class="line">## 访问者模式</span><br><span class="line"></span><br><span class="line">### 问题</span><br><span class="line"></span><br><span class="line">测评系统：</span><br><span class="line"></span><br><span class="line">* 将观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对 该歌手不同的评价(评价 有不同的种类，比如 成功、失败 等)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 介绍</span><br><span class="line"></span><br><span class="line">访问者模式基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作</span><br><span class="line"><span class="number">2.</span> 主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题</span><br><span class="line"><span class="number">3.</span> 访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口</span><br><span class="line"><span class="number">4.</span> 访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作（这些操作彼此没有关联），同时需要避免让这些操作“污染”这些对象的类，可以选用访问者模式解决</span><br><span class="line"></span><br><span class="line">原理图：</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20210714185223773</span>](<span class="number">2021</span>-<span class="number">07</span>-<span class="number">11</span>-DesignPatterns/image-<span class="number">20210714185223773.</span>png)</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Visitor 是抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个visit操作 </span><br><span class="line"><span class="number">2.</span> ConcreteVisitor ：是一个具体的访问值 实现每个有Visitor 声明的操作，是每个操作实现的部分. </span><br><span class="line"><span class="number">3.</span>  ObjectStructure 能枚举它的元素， 可以提供一个高层的接口，用来允许访问者访问元素 </span><br><span class="line"><span class="number">4.</span>  Element 定义一个accept 方法，接收一个访问者对象</span><br><span class="line"><span class="number">5.</span> ConcreteElement 为具体元素，实现了accept 方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 应用</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>上面提到了双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。 双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型 </li><li> 以上述实例为例，假设我们要添加一个Wait的状态类，考察Man类和Woman类的反 应，由于使用了双分派，只需增加一个Action子类即可在客户端调用即可，不 需要改动任何其他类的代码。</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>访问者模式的注意事项和细节</p><p>优点：</p><ol><li>访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常该</li><li>访问者模式可以对功能进行统一，可以做报表、UI、拦截器和过滤器，适用于数据结构相对稳定的系统</li></ol><p>缺点：</p><ol><li>具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变更比较困难</li><li>违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素</li></ol><p>因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="问题-7"><a href="#问题-7" class="headerlink" title="问题"></a>问题</h3><p>编写程序展示一个学校院系结构：</p><ul><li>要在一个页面中展示出学校的院系组成</li><li>一个学校有一个学院</li><li>一个学院有多个系</li></ul><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>迭代器模式基本介绍</p><ol><li>迭代器模式（Iterator Pattern）是常用的设计模式，属于行为型模式</li><li>如果我们的集合元素是用不同的方法实现的，有数组，还有java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候，就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑用迭代器模式解决</li><li>迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构</li></ol><p>原理图：</p><p><img src="/2021/07/11/tools-2021-07-11-DesignPatterns/image-20210714190551112.png" alt="image-20210714190551112"></p><p>说明：</p><ol><li>Iterator ： 迭代器接口，是系统提供，含义 hasNext, next, remove</li><li>ConcreteIterator : 具体的迭代器类，管理迭代 </li><li>Aggregate :一个统一的聚合接口， 将客户端和具体聚合解耦</li></ol><h3 id="应用-18"><a href="#应用-18" class="headerlink" title="应用"></a>应用</h3><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">具体实例：</span><br><span class="line"></span><br><span class="line">迭代器模式在JDK-ArrayList集合中的应用</span><br><span class="line"></span><br><span class="line">* JDK的ArrayList集合中就使用了迭代器模式</span><br><span class="line"></span><br><span class="line">分析</span><br><span class="line"></span><br><span class="line">* 内部类Itr 充当具体实现迭代器Iterator 的类， 作为ArrayList 内部类 </span><br><span class="line">* List 就是充当了聚合接口，含有一个iterator() 方法，返回一个迭代器对象 </span><br><span class="line">* ArrayList 是实现聚合接口List 的子类，实现了iterator() </span><br><span class="line">* Iterator 接口系统提供 </span><br><span class="line">*  迭代器模式解决了 不同集合(ArrayList ,LinkedList) 统一遍历问题</span><br><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line">迭代器模式的注意事项和细节</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了</span><br><span class="line"><span class="number">2.</span> 隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成</span><br><span class="line"><span class="number">3.</span> 提供了一种设计思想，就是一个类应该只有一个引起变化的原因（叫做==单一责任原则==）。在聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来，集合改变的话，只会影响到聚合对象。如果遍历方式改变的话，只影响到了迭代器</span><br><span class="line"><span class="number">4.</span> 当要展示一组相似的对象，或者遍历一组相同对象时使用，适合使用迭代器模式</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 每个聚合对象都要一个迭代器，会产生多个迭代器，不好管理类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 观察者模式</span><br><span class="line"></span><br><span class="line">### 问题</span><br><span class="line"></span><br><span class="line">天气预报项目需求,：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去(比如 发布到自己的网站或第三方)。 </span><br><span class="line"><span class="number">2.</span> 需要设计开放型API，便于其他第三方也能接入气象站获取数据。 </span><br><span class="line"><span class="number">3.</span>  提供温度、气压和湿度的接口</span><br><span class="line"><span class="number">4.</span> 测量数据更新时，要能实时的通知给第三方</span><br><span class="line"></span><br><span class="line">### 介绍</span><br><span class="line"></span><br><span class="line">观察者模式：对象之间多对一依赖的一种设计方案，被依赖的对象为Subject， 依赖的对象为Observer，Subject通知Observer变化,比如这里的奶站是 Subject，是<span class="number">1</span>的一方。用户时Observer，是多的一方</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 观察者模式设计后，会以集合的方式来管理用户(Observer)，包括注册，移除 和通知。 </span><br><span class="line"><span class="number">2.</span>  这样，我们增加观察者(这里可以理解成一个新的公告板)，就不需要去修改核 心类WeatherData不会修改代码，遵守了ocp原则。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 应用</span><br><span class="line"></span><br><span class="line">代码实现</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><p>实例应用：</p><ul><li>jdk的Observable类就使用了观察者模式</li></ul><p>分析：</p><ol><li>Observable 的作用和地位等价于 我们前面讲过Subject </li><li> Observable 是类，不是接口，类中已经实现了核心的方法 ,即管理Observer 的方法 add.. delete .. notify… </li><li>Observer 的作用和地位等价于我们前面讲过的 Observer, 有update </li><li>Observable 和 Observer 的使用方法和前面讲过的一样，只是Observable 是 类，通过继承来实现观察者模式</li></ol><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><h3 id="问题-8"><a href="#问题-8" class="headerlink" title="问题"></a>问题</h3><p>智能家庭项目： </p><ol><li>智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘 等 </li><li>主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流 程为：闹铃响起-&gt;咖啡机开始做咖啡-&gt;窗帘自动落下-&gt;电视机开始播放</li></ol><p>传统的方式的问题分析 ：</p><ol><li>当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂 </li><li> 各个电器对象彼此联系，你中有我，我中有你，不利于松耦合. </li><li> 各个电器对象之间所传递的消息(参数)，容易混乱 </li><li> 当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性 都不理想  考虑中介者模式</li></ol><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>中介模式基本介绍</p><ol><li>中介模式（Mediator Pattern），用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互性</li><li>中介者模式属于行为模式，使代码易于维护</li><li>比如MVC模式，C(Controller控制器)是M（Model模型）和V（View视图）的中介者，在前后端交互时起到了中间人的作用</li></ol><p>原理图：</p><p>说明：</p><ol><li>Mediator 就是抽象中介者,定义了同事对象到中介者对象的接口 </li><li> Colleague 是抽象同事类</li></ol><h3 id="应用-19"><a href="#应用-19" class="headerlink" title="应用"></a>应用</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line">中介者模式的注意事项和细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 多个类相互耦合，会形成网状结构，使用中介者模式，将网状结构分离为星型结构，进行解耦</span><br><span class="line"><span class="number">2.</span> 减少类间依赖，降低了耦合，符合迪米特原则</span><br><span class="line"><span class="number">3.</span> 中介者承担了较多的责任，一旦中介者出了问题，整个系统都会受到影响</span><br><span class="line"><span class="number">4.</span> 如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意</span><br><span class="line"></span><br><span class="line">## 备忘录模式</span><br><span class="line"></span><br><span class="line">### 问题</span><br><span class="line"></span><br><span class="line">游戏角色状态恢复问题： </span><br><span class="line"></span><br><span class="line">游戏角色有攻击力和防御力，在大战Boss前保存自身的状态(攻击力和防御力)，当大 战Boss后攻击力和防御力下降，从备忘录对象恢复到大战前的状态</span><br><span class="line"></span><br><span class="line">传统的方式的问题分析 ：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 一个对象，就对应一个保存对象状态的对象， 这样当我们游戏的对象很多时，不 利于管理，开销也很大. </span><br><span class="line"><span class="number">2.</span>  传统的方式是简单地做备份，<span class="keyword">new</span>出另外一个对象出来，再把需要备份的数据放到 这个新对象，但这就暴露了对象内部的细节 </span><br><span class="line"><span class="number">3.</span>  解决方案： =&gt; 备忘录模式</span><br><span class="line"></span><br><span class="line">### 介绍</span><br><span class="line"></span><br><span class="line">备忘录模式基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 备忘录模式（Memento Pattern）在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保持这个状态。这样以后就可以将该对象恢复到原先保存的状态</span><br><span class="line"><span class="number">2.</span> 理解：现实生活中备忘录是用来记录某些要去做的事情，或者是记录已经达成的共同意见的事情，以防忘记。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作</span><br><span class="line"><span class="number">3.</span> 备忘录模式属于行为模式</span><br><span class="line"></span><br><span class="line">原理图：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> originator : 对象(需要保存 状态的对象) </span><br><span class="line"><span class="number">2.</span>  Memento ： 备忘录对象,负责 保存好记录，即Originator内部 状态 </span><br><span class="line"><span class="number">3.</span> Caretaker: 守护者对象,负责保存多个备忘录对象， 使用集合管理，提高效 率 </span><br><span class="line"><span class="number">4.</span> 说明：如果希望保存多个originator对象的不同时间的状态，也可以，只需要 要 HashMap  </span><br><span class="line"></span><br><span class="line">### 应用</span><br><span class="line"></span><br><span class="line">代码实现</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>备忘录模式注意事项和细节</p><ol><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</li><li>实现了信息的封装，使得用户不必关系状态的保存细节</li><li>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存，这个需要注意</li><li>适用的场景：<ul><li>后悔药</li><li>打游戏时的存档</li><li>windows里的ctrl+z</li><li>ie中的后退</li><li>数据库的事务管理</li></ul></li><li>为了节约内存，备忘录模式可以和原型模式配合适用</li></ol><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><h3 id="问题-9"><a href="#问题-9" class="headerlink" title="问题"></a>问题</h3><p>通过解释器模式来实现四则运算</p><ol><li>先输入表达式的形式，比如 a+b+c-d+e, 要求表达式的字母不能重复</li><li>在分别输入a ,b, c, d, e 的值 </li><li> 最后求出结果</li></ol><p>传统方案解决四则运算问题分析 ：</p><ol><li>编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果 </li><li>问题分析：如果加入新的运算符，比如 * / ( 等等，不利于扩展，另外让一个方法来 解析会造成程序结构混乱，不够清晰. </li><li> 解决方案：可以考虑使用解释器模式， 即： 表达式 -&gt; 解释器(可以有多种) -&gt; 结 果</li></ol><h3 id="基本介绍-14"><a href="#基本介绍-14" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>在编译原理中，一个算术表达式通过词法分析器形成词法单元，而后这些词法单元再通过语法分析器构建语法分析树，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器</li><li>解释器模式（Interpreter Pattern）：是指给一个语言（表达式），定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子（表达式）</li><li>应用场景：<ul><li>应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来表示</li><li>一个简单语法需要解释的场景</li></ul></li><li>更多：编译器、运算表达式、正则表达式、机器人等</li></ol><p>原理图：</p><p>说明：</p><ol><li>Context: 是环境角色,含有解释器之外的全局信息. </li><li> AbstractExpression: 抽象表达式， 声明一个抽象的解释操作,这个方法为抽象语法树中所有的节点所 共享</li><li>TerminalExpression: 为终结符表达式, 实现与文法中的终结符相关的解释操作</li><li>NonTermialExpression: 为非终结符表达式，为文法中的非终结符实现解释操作. </li><li>说明： 输入Context he TerminalExpression 信息通过Client 输入即可</li></ol><h3 id="应用-20"><a href="#应用-20" class="headerlink" title="应用"></a>应用</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实际应用：</span><br><span class="line"></span><br><span class="line">* Spring框架中SpelExpressionParser就使用到解释器模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line">解释器模式的注意事项和细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 当有一个语言需要解释器执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，这让程序具有良好的扩展性</span><br><span class="line"><span class="number">2.</span> 应用场景：编译器、运算表达式计算、正则表达式、机器人等</span><br><span class="line"><span class="number">3.</span> 使用解释器可能会带来的问题：</span><br><span class="line">   * 解释器模式会引起类膨胀</span><br><span class="line">   * 解释器模式采用递归调用方法，将会导致调试非常复杂</span><br><span class="line">   * 效率可能降低</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 状态模式</span><br><span class="line"></span><br><span class="line">### 问题</span><br><span class="line"></span><br><span class="line">APP抽奖活动问题</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 假如每参加一次这个活动要 扣除用户<span class="number">50</span>积分，中奖概率 是<span class="number">10</span>% </span><br><span class="line"><span class="number">2.</span>  奖品数量固定，抽完就不能 抽奖 </span><br><span class="line"><span class="number">3.</span> 活动有四个状态: 可以抽奖、 不能抽奖、发放奖品和奖品 领完 </span><br><span class="line"><span class="number">4.</span> 活动的四个状态转换关系图</span><br><span class="line"></span><br><span class="line">![image-<span class="number">20210714200011180</span>](<span class="number">2021</span>-<span class="number">07</span>-<span class="number">11</span>-DesignPatterns/image-<span class="number">20210714200011180.</span>png)</span><br><span class="line"></span><br><span class="line">### 介绍</span><br><span class="line"></span><br><span class="line">状态模式基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 状态模式（State Pattern）：它主要用来解决对象在多种状态转换时，需要对外输出不同的行为的问题。状态和行为是一一对应的，状态之间可以互相转换</span><br><span class="line"><span class="number">2.</span> 当一个对象的内在状态发生改变时，允许改变其行为，这个对象看起来好像是改变了其类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">原理图：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Context 类为环境角色, 用于维护State实例,这个实例定义当前状态 </span><br><span class="line"><span class="number">2.</span> State 是抽象状态角色,定义一个接口封装与Context 的一个特点接口相关行为</span><br><span class="line"><span class="number">3.</span> ConcreteState 具体的状态角色，每个子类实现一个与Context 的一个状态相关行为</span><br><span class="line"></span><br><span class="line">### 应用</span><br><span class="line"></span><br><span class="line">代码实现</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><p>应用实例：</p><p>借贷平台的订单，有审核-发布-抢单 等等 步骤，随着操作的不同，会改变订单的 状态, 项目中的这个模块实现就会使用到状态模式</p><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>状态模式的注意事项和细节</p><ol><li>代码有很强的可读性。状态模式将每个状态的行为封装到对应的一个类中</li><li>方便维护。将容易产生问题的if-else的语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产出很多if-else语句，而且容易出错</li><li>符合开闭原则。容易增删状态</li><li>会产生很多类。每个状态都要一个对应的类，当状态过多时会产生很多的类，加大维护难度</li><li>应用场景：当一个事件或者对象有很多种状态，状态之间会互相转换，对不同的状态要求有不同的行为的时候，可以考虑使用状态模式</li></ol><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="问题-10"><a href="#问题-10" class="headerlink" title="问题"></a>问题</h3><p>鸭子项目：</p><ol><li>有各种鸭子(比如 野鸭、北京鸭、水鸭等， 鸭子有各种行为，比如 叫、飞行等) </li><li>显示鸭子的信息</li></ol><p>传统方式：</p><ol><li>其它鸭子，都继承了Duck类，所以fly让所有子类都会飞了，这是不正确的</li><li>上面说的1 的问题，其实是继承带来的问题：对类的局部改动，尤其超类的局部改 动，会影响其他部分。会有溢出效应 </li><li> 为了改进1问题，我们可以通过覆盖fly 方法来解决 =&gt; 覆盖解决 </li><li> 问题又来了，如果我们有一个玩具鸭子ToyDuck, 这样就需要ToyDuck去覆盖Duck 的所有实现的方法 </li><li>解决思路 策略模式 (strategy pattern)</li></ol><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>策略模式基本介绍</p><ol><li>策略模式（Strategy Pattern）中，定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</li><li>这种算法体现了几个设计原则：<ol><li>把变化的代码从不变的代码中分离出来</li><li>针对接口编程而不是具体类（定义了策略接口）</li><li>多用组合/聚合，少用继承（客户通过组合方式使用策略）</li></ol></li></ol><p>原理图：</p><h3 id="应用-21"><a href="#应用-21" class="headerlink" title="应用"></a>应用</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line">* JDK的Arrays的Comparator就使用了策略模式</span><br><span class="line"></span><br><span class="line">### 注意</span><br><span class="line"></span><br><span class="line">策略模式的注意事项和细节</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 策略模式的关键是：分析项目中变化部分与不变部分</span><br><span class="line"><span class="number">2.</span> 策略模式的核心思想是：多用组合/聚合，少用继承；用行为类组合，而不是行为的继承。更有弹性</span><br><span class="line"><span class="number">3.</span> 体现了“对修改关闭，对扩展开放”原则，客户端增加行为不用修改原有代码，只要添加一种策略（或行为）即可，避免了使用多重转移语句（<span class="keyword">if</span>-<span class="keyword">else</span>）</span><br><span class="line"><span class="number">4.</span> 提供了可以替换继承关系的办法：策略模式将算法封装在独立的Strategy类中使得你可以独立于其Context改变它，使他易于切换、易于理解、易于扩展</span><br><span class="line"><span class="number">5.</span> 需要注意的是：每添加一个策略就要增加一个类，当策略过多是会导致类数目庞大</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 职责链模式</span><br><span class="line"></span><br><span class="line">### 问题</span><br><span class="line"></span><br><span class="line">学校OA系统的采购审批项目：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 采购员采购教学器材 </span><br><span class="line"><span class="number">2.</span> 如果金额 小于等于<span class="number">5000</span>, 由教学主任审批 （<span class="number">0</span>&lt;=x&lt;=<span class="number">5000</span>）</span><br><span class="line"><span class="number">3.</span> 如果金额 小于等于<span class="number">10000</span>, 由院长审批 (<span class="number">5000</span>）</span><br><span class="line"><span class="number">4.</span> 如果金额 小于等于<span class="number">30000</span>, 由副校长审批 (<span class="number">10000</span>&lt;x&lt;=<span class="number">30000</span>)</span><br><span class="line"><span class="number">5.</span> 如果金额 超过<span class="number">30000</span>以上，有校长审批 ( <span class="number">30000</span>&lt;x）</span><br><span class="line"></span><br><span class="line">传统方案解决OA系统审批问题分析：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 传统方式是：接收到一个采购请求后，根据采购金额来调用对应的Approver (审批 人)完成审批。</span><br><span class="line"><span class="number">2.</span> 传统方式的问题分析 : 客户端这里会使用到 分支判断(比如 <span class="keyword">switch</span>) 来对不同的采 购请求处理， 这样就存在如下问题 ：</span><br><span class="line">   <span class="number">1.</span> 如果各个级别的人员审批金额发生变化，在 客户端的也需要变化</span><br><span class="line">   <span class="number">2.</span>  客户端必须明确的知道 有多少个审批级别和访问</span><br><span class="line"><span class="number">3.</span> 这样 对一个采购请求进行处理 和 Approver (审批人) 就存在强耦合关系，不利于代 码的扩展和维护</span><br><span class="line"><span class="number">4.</span> 解决方案 =》 职责链模式</span><br><span class="line"></span><br><span class="line">### 介绍</span><br><span class="line"></span><br><span class="line">职责链模式基本介绍</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 责任链模式（Chain Of Responsibility Pattern），又叫责任链模式，为请求创建了一个接受者对象的链。这种模式对请求的发送者和接受者进行解耦</span><br><span class="line"><span class="number">2.</span> 职责链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接受者，依此类推</span><br><span class="line"><span class="number">3.</span> 这种类型的设计模式属于行为型模式</span><br><span class="line"></span><br><span class="line">原理图：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Handler : 抽象的处理者, 定义了一个处理请求的接口, 同时含义另外Handler </span><br><span class="line"><span class="number">2.</span> ConcreteHandlerA , B 是具体的处理者, 处理它自己负责的请求， 可以访问它的后继者(即下一个处 理者), 如果可以处理当前请求，则处理，否则就将该请求交个 后继者去处理，从而形成一个职责链 </span><br><span class="line"><span class="number">3.</span> Request ， 含义很多属性，表示一个请求</span><br><span class="line"></span><br><span class="line">### 应用</span><br><span class="line"></span><br><span class="line">代码实现</span><br><span class="line"></span><br><span class="line">~~~java</span><br></pre></td></tr></table></figure><p>实例：</p><ul><li>SpringMVC-HandlerExecutionChain 类就使用到职责链模式</li></ul><p>说明：</p><ol><li>springmvc 请求的流程图中，执行了 拦截器相关方法 interceptor.preHandler 等等 </li><li>在处理SpringMvc请求时，使用到职责链模式还使用到适配器模式</li><li>HandlerExecutionChain 主要负责的是请求拦截器的执行和请求处理,但是他本身不 处理请求，只是将请求分配给链上注册处理器执行，这是职责链实现方式,减少职责 链本身与处理逻辑之间的耦合,规范了处理流程 </li><li>HandlerExecutionChain 维护了 HandlerInterceptor 的集合， 可以向其中注册相应 的拦截器.</li></ol><h3 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h3><p>职责链模式的注意事项和细节</p><ol><li>将请求和处理分开，实现解耦，提高系统的灵活性</li><li>简化了对象，使对象不需要知道链的结构</li><li>性能会受到影响，特别是在链比较长的时候，因此需控制链中最大节点数量，一般通过在Handler中设置一个最大节点数量，在setNext（）方法中判断是否已经超过阈值，超过则不允许该链的建立，避免出现超长链无意识地破坏系统性能</li><li>调试不方便。采用了类似递归的方式，调试时逻辑可能比较复杂</li><li>最佳应用场景：有多个对象可以处理同一个请求时，比如：多级请求、请假/加薪等审批流程、java Web中tomcat对encoding的处理、拦截器</li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li>有一点需要说明：设计模式是程序员在编程中，有意或者是无意使用到的(也不是 所有的程序员都学习过设计模式)，并且同一种设计模式实现方式也不是100%的一 样，设计模式主要是提高程序的扩展性，可读性，可维护性、规范性。</li><li> 对于框架源码，源码中部分使用了A设计模式，还部分使用了B设计模式，也是有 可能的，也就是说设计模式是可以结合使用的</li><li>因为设计模式主要是一种编程思想，既然是思想，具体实现方式，就不可能100% 的一样(当然，程序的设计结构基本是一样的)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h1&gt;&lt;h2 id=&quot;1-经典面试题&quot;&gt;&lt;a href=&quot;#1-经典面试题&quot; class=&quot;headerlink&quot; title=&quot;1.经</summary>
      
    
    
    
    <category term="工具" scheme="http://stary2020.gitee.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="java" scheme="http://stary2020.gitee.io/tags/java/"/>
    
    <category term="工具" scheme="http://stary2020.gitee.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
