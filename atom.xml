<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>繁星点点</title>
  
  
  <link href="https://stary1999.github.io/atom.xml" rel="self"/>
  
  <link href="https://stary1999.github.io/"/>
  <updated>2021-07-10T12:24:15.552Z</updated>
  <id>https://stary1999.github.io/</id>
  
  <author>
    <name>stary</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java学习路线</title>
    <link href="https://stary1999.github.io/2021/07/06/JavaRoute/"/>
    <id>https://stary1999.github.io/2021/07/06/JavaRoute/</id>
    <published>2021-07-06T00:10:35.000Z</published>
    <updated>2021-07-10T12:24:15.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="英格版java全站培训"><a href="#英格版java全站培训" class="headerlink" title="英格版java全站培训"></a>英格版java全站培训</h1><h2 id="javaSE"><a href="#javaSE" class="headerlink" title="javaSE"></a>javaSE</h2><table><thead><tr><th>课程大纲</th><th>课程内容</th><th>备注</th></tr></thead><tbody><tr><td>java语言概述</td><td>1.java编程语言发展简史<br>2.java编程语言主要特性<br>3.java技术体系及开发平台介绍<br>4.java核心机制与JVM运行原理<br>5.搭建java开发环境<br>6.JDK的安装与配置<br>7.开发第一个Java程序<br>8.java程序的执行原理<br>9.字节码反编译（jd-gui.exe、javap）<br>10.变量的声明与使用<br>11.变量内存空间分配与原理<br>12.进制转换与位运算<br>13.八大基本数据类型<br>14.基本数据类型之间的转换<br>15.Eclipse使用<br>16.Idea使用<br>17.变量的运算与底层运算原理<br>18.常见面试题讲解</td><td></td></tr><tr><td>流程控制</td><td>1.java代码的执行流程介绍<br>2.if选择结构<br>3.Scanner键盘录入<br>4.switch选择结构<br>5.使用Random生成随机数<br>6.while循环结构<br>7.do-while循环结构<br>8.for训话结构及执行顺序<br>9.跳转语法：break、continue、return<br>10.多重循环及指定跳出循环<br>11.方法的声明与使用<br>12.方法调用的内存分析<br>13.方法重载Overload</td><td></td></tr><tr><td>数组</td><td>1.数组的创建与使用<br>2.一维数组与多维数组<br>3.数组的默认初始化与内存分析<br>4.数组作为方法形参传递<br>5.数组的遍历操作<br>6.数组的常见算法分析<br>7.操作数组的工具类array<br>8.理解main方法（args)<br>9.方法的可变参数<br>10.使用jar命令打包应用程序<br>11.数组数据结构的优势和劣势分析<br>12.常见的数组面试题讲解</td><td></td></tr><tr><td>面向对象编程（基础）</td><td>1.面向过程和面向对象的区别<br>2.类和对象的概述<br>3.类的属性和方法<br>4.构造方法（construtor）<br>5.创建对象内存分析<br>6.DataType数据类型传递<br>7.this关键字解析<br>8.static关键字详解<br>9.局部代码块、构造代码块和静态代码块<br>10.package和import详解</td><td></td></tr><tr><td>面向对象编程（进阶）</td><td>1.面向对象的三大特性<br>2.面向对象之-封装<br>3.访问权限修饰符<br>4.set和get方法<br>5.javaDoc生成API文档<br>6.面向对象之-继承<br>7.方法重写Override<br>8.supper关键字详解<br>9.继承中对象创建的内存分析<br>10.final关键字详解<br>11.Object类型详解<br>12.面向对象之多态(polymorphism)<br>13.向上转型和向下转型<br>14.instanceof运算符<br>15.编译时和运行时详解<br>16.抽象类和抽象方法<br>17.接口的定义与实现<br>18.接口与抽象类的区别<br>19.接口应用：内部比较器（comparable）<br>20.接口应用：外部比较器comparator<br>21.内部类详解<br>22.java的内存管理与垃圾回收</td><td></td></tr><tr><td>异常机制</td><td>1.异常的概述<br>2.异常的继承体系<br>3.error错误类<br>4.运行时异常和编译时异常<br>5.异常的原理分析<br>6.try-catch-finally捕捉异常<br>7.throw抛出异常<br>8.throws声明异常<br>9.自定义异常</td><td></td></tr><tr><td>java常用类</td><td>1.Wrapper包装类<br>2.自动装箱和自动拆箱<br>3.包装类的缓存分析<br>4.字符串处理类<br>5.java.long.String类的使用与内存原理<br>6.String类的算法分析<br>7.StringBuff与StringBuilder<br>8.java.long.System类<br>9.java.util.Data类<br>10.java.text.SimpleDateFormat类<br>11.java.util.Calendar类<br>12.java.long.Math类<br>13.BigInteger类和BigDecimal类<br>14.常见的面试题讲解与分析</td><td></td></tr><tr><td>集合（容器）</td><td>1.集合和数组的联系与区别<br>2.Collection框架（Set接口与List接口）<br>3.java.util.ArrayList源码与数据结构分析<br>4.java.util.LinkedList源码分析<br>5.java.util.HashSet内部原理<br>6.java.util.TreeSet数据结构分析<br>7.java7中Map系列集合与数据结构分析<br>8.Iterator与ListIterator讲解<br>9.java.util.Collections工具类<br>10.集合中使用泛型<br>11.自定义泛型<br>12.泛型通配<br>13.ArrayList、LinkedList、Vector的区别和联系<br>14.HashMap和Hashtable的区别于联系<br>15.使用集合实现商品和购物车<br>16.集合选择依据</td><td></td></tr><tr><td>IO流</td><td>1.IO流的概念<br>2.IO流的分类及其原理<br>3.文件流InputStream，OutputStream<br>4.缓冲流BufferedOutputStream、BufferedInputStream<br>5.转换流InputStreamReader、OutputStreamWrite<br>6.打印流PrintWrite<br>7.数组流ByteArrayOutputStream、ByteInputStream<br>8.数据流DataInputStream、DataOutputStream<br>9.对象流ObjectInputStream、ObjectOutputStream</td><td></td></tr><tr><td>多线程</td><td>1.线程原理<br>2.线程的创建与启动<br>3.创建线程的集中方式对比<br>4.线程控制<br>5.线程的调度<br>6.线程的优先级<br>7.线程的声明周期<br>8.多线程的安全问题与解决办法<br>9.线程的同步<br>10.互斥锁<br>11.线程的死锁问题<br>12.线程通信</td><td></td></tr><tr><td>XML&amp;正则表达式</td><td>1.XML定义和概述<br>2.XML特点和优势<br>3.XML验证和DTD验证<br>4.使用DTD解析XML<br>5.了解正则表达式的使用<br>6.熟悉正则表达式的规则<br>7.使用Java处理正则</td><td></td></tr><tr><td>反射技术</td><td>1.java反射机制的研究与应用<br>2.反射的原理分析<br>3.JVM与类<br>4.类的价值、连接、初始化<br>5.类的加载机制<br>6.开启反射的源头Class<br>7.获取Class实例的几种方式比较<br>8.从Class中获取类的结构信息<br>9.获取Constructor、Field和Method<br>10.泛型和Class类<br>11.使用反射模拟Servlet获取XML文件信息</td><td></td></tr><tr><td>设计模式</td><td>1.创建型模式（5）：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式<br>2.结构型模式（7）：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式<br>3.行为型模式（11）：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</td><td></td></tr></tbody></table><h2 id="javaWeb基础（数据库"><a href="#javaWeb基础（数据库" class="headerlink" title="javaWeb基础（数据库)"></a>javaWeb基础（数据库)</h2><p>数据库在企业中使用频率极高，几乎每个项目都离不开，此阶段可以应聘DBA职位。数据库是java程序员必会的技术</p><table><thead><tr><th>课程大纲</th><th>课程内容</th><th>备注</th></tr></thead><tbody><tr><td>MySQL基础</td><td>1.MySQL服务器安装与配置<br>2.MySQL客户端使用<br>3.用户权限管理<br>4.SQL语句的类型<br>5.Select单表查询<br>6.排序，聚合查询</td><td></td></tr><tr><td>MySQL进阶</td><td>1.创建和管理表<br>2.约束管理<br>3.DML操作<br>4.内连接查询<br>5.外连接查询<br>6.自连接查询<br>7.子查询<br>8.常用函数<br>9.分页查询</td><td></td></tr><tr><td>连接查询和子查询</td><td>1.SQL92-笛卡尔积<br>2.SQL92-等值连接<br>3.SQL92-非等值连接<br>4.SQL92-外连接<br>5.SQL92-自连接<br>6.SQL99-交叉连接<br>7.SQL99-自然连接<br>8.SQL99-Using连接<br>9.SQL99-内连接<br>10.SQL99-外连接<br>11.单行子查询<br>12.多行子查询</td><td></td></tr><tr><td>数据库对象</td><td>1.用户和权限管理<br>2.数据库表管理<br>3.约束创建和管理<br>4.序列<br>5.索引<br>6.视图<br>7.事务<br>8.分页查询<br>9.导入导出数据<br>10.锁<br>11.事务隔离级别<br>12.游标</td><td></td></tr><tr><td>JDBC</td><td>1.JDBC概述<br>2.使用JDBC完成添加、更新、删除操作<br>3.使用JDBC完成查询操作<br>4.JDBC常用接口<br>5.使用preparedStatement<br>6.数据库访问DBUtils类<br>7.JDBC Template<br>8.连接池</td><td></td></tr><tr><td>JDBC进阶</td><td>1.使用事务执行批处理<br>2.MVC分层开发<br>3.使用properties文件抽取连接参数<br>4.DAO层开发<br>5.使用反射抽取BaseDao接口及实现类<br>6.基于MVC开发员工管理系统<br>7.jdbc template</td><td></td></tr><tr><td>MySQL优化</td><td>1.MySQL架构<br>2.存储引擎<br>3.SQL优化总体思路<br>4.通用查询日志<br>5.错误日志<br>6.二进制文件<br>7.慢查询日志<br>8.执行计划<br>9.索引及其优化策略</td><td></td></tr></tbody></table><h2 id="web前端"><a href="#web前端" class="headerlink" title="web前端"></a>web前端</h2><table><thead><tr><th>课程大纲</th><th>课程内容</th><th>备注</th></tr></thead><tbody><tr><td>HTML标签</td><td>1.HTML发展史<br>2.HTML基础标签<br>3.img标签和a标签<br>4.HTML表格标签<br>5.HTML表单标签<br>6.框架和字符实体</td><td></td></tr><tr><td>CSS层叠样式</td><td>1.CSS基础语法<br>2.CSS参考知识（长度单位、颜色单位和路径）<br>3.CSS常见选择器<br>4.CSS背景属性、文本属性和列表属性<br>5.CSS元素分类（块级、行级和行内块级）<br>6.CSS浮动和定位属性<br>7.CSS盒子模型</td><td></td></tr><tr><td>JavaScript</td><td>1.JavaScript概述和特点<br>2.JavaScript和ECMAScript联系<br>3.js基础语法，语句、注释、标识符<br>4.js变量和变量提升<br>5.js数据类型和数据类型转换<br>6.js运算符和流程控制语句<br>7.js数组和字符串<br>8.js函数和韩淑华编程思想<br>9.js对象和面向对象简介<br>10.js常见内置类：Math和Data<br>11.js定时器<br>12.正则表达式</td><td></td></tr><tr><td>jQuery</td><td>1.Jquery简介及快速入门<br>2.JQuery的入口函数<br>3.JQuery选择器<br>4.JQuery事件，事件、事件源和事件驱动程序<br>5.JQuery对象与DOM对象互相转换<br>6.JQuery内容节点操作<br>7.jQuery属性节点操作<br>8.jQuery样式<br>9.jQuery元素节点操作<br>10.jQuery遍历节点和each方法<br>11.jQuery链式语法<br>12.jQuery动画效果和自定义动画</td><td></td></tr><tr><td>bootstrap</td><td>1.bootstrap框架概述与引入<br>2.栅格系统<br>3.全局CSS样式<br>4.组件<br>5.bootstrap插件</td><td></td></tr><tr><td>Vue</td><td>1.Vue基本指令<br>2.Vue基本组件<br>3.Vue动画<br>4.Vue网络请求<br>5.Vue路由设置<br>6.VueX<br>7.Vue第三方组件</td><td></td></tr></tbody></table><h2 id="javaEE"><a href="#javaEE" class="headerlink" title="javaEE"></a>javaEE</h2><table><thead><tr><th>阶段</th><th>课程大纲</th><th>课程内容</th></tr></thead><tbody><tr><td>Tomcat、<br>HTTP</td><td>1.web开发概述<br>2.Tomcat服务器概述<br>3.Tomcat下载、安装、启动<br>4.手动创建静态web应用<br>5.Idea配置Tomcat<br>6.创建web应用及发布和访问<br>7.HTTP介绍<br>8.GET和POST请求的区别<br>9.HTTP请求消息，请求头参数说明<br>10.HTTP响应消息&amp;响应头参数说明&amp;响应码</td><td></td></tr><tr><td>JSP基础</td><td>1.JSP技术介绍<br>2.JSP的优势<br>3.JSP的结构，处理过程<br>4.JSP指令<br>5.JSP动作元素<br>6.JSP隐式对象<br>7.JSP表单处理<br>8.欢迎页配置</td><td></td></tr><tr><td>EL+JSTL</td><td>1.EL介绍与使用<br>2.EL取值原理<br>3.EL隐式对象<br>4.EL逻辑运算<br>5.JSTL核心标签库<br>6.JSTL函数标签库<br>7.JSTL-fmt标签库<br>8.自定义标签</td><td></td></tr><tr><td>Servlet基础</td><td>1.Servlet概述<br>2.Servlet快速入门<br>3.Servlet生命周期<br>4.HttpServletRequest<br>5.HttpServletResponse<br>6.请求转发与重定向的区别</td><td></td></tr><tr><td>会话技术与<br>Servlet域对象</td><td>1.cookie机制<br>2.cookie的创建域使用<br>3.Session原理<br>4.Session失效<br>5.Url重写<br>6.token令牌应用<br>7.Session活化、钝化<br>8.session四大作用域对象</td><td></td></tr><tr><td>文件上传/下载</td><td>1.文件上传原理<br>2.文件上传表单设计<br>3.Servlet3.0文件上传处理<br>4.文件下载原理<br>5.文件下载响应头<br>6.使用IO处理文件下载</td><td></td></tr><tr><td>JSON与Ajax</td><td>1.JSON盖帘及基本结构<br>2.JSON解析-Jsonlib库<br>3.JSON解析-FastJson库<br>4.JSON解析-Gson库<br>5.Ajax作用和技术组成及运用范围<br>6.jQuery-ajax方法<br>7.jQuery-post方法<br>8.jquery-get方法<br>9.Ajax实现用户名唯一性验证<br>10.Ajax实现搜索框自动补全</td><td></td></tr></tbody></table><h2 id="高级框架"><a href="#高级框架" class="headerlink" title="高级框架"></a>高级框架</h2><table><thead><tr><th>课程大纲</th><th>课程内容</th><th>备注</th></tr></thead><tbody><tr><td>MyBatis</td><td>1.Mybatis概述<br>2.Mybatis入门配置<br>3.基本的CRUD操作<br>4.核心配置文件详解<br>5.Mapper.xml基础详解<br>6.模糊查询<br>7.分页的实现及插件PageHelper的使用<br>8.动态sql+sql片段的使用<br>9.一对多、多对一的关系处理<br>10.注解的使用<br>11.一级缓存和二级缓存说明及使用<br>12.generator逆向工程使用</td><td></td></tr><tr><td>Spring</td><td>1.Spring框架介绍<br>2.IOC/DI解耦合及实现原理<br>3.Spring的入门配置<br>4.Spring相关配置详解<br>5.XML方式重构三层结构<br>6.注解方式重构三层结构<br>7.AOP的概述<br>8.代理模式深入理解<br>9.AOP开发（XML）<br>10.AOP开发（注解）<br>11.Spring-jdbc Template<br>12.声明式事务配置及嵌套事务处理</td><td></td></tr><tr><td>SpringMVC</td><td>1.SpringMVC框架介绍<br>2.……<br>13.Spring、SpringMVC和MyBatis整合</td><td></td></tr><tr><td>Git/GitLab</td><td>1.Git的下载与安装<br>2.Git与SVN对比<br>3.Git创建版本库<br>4.Git版本控制<br>5.Git远程仓库<br>6.Git、分支管理<br>7.Git标签管理<br>8.GitLba的下载和安装<br>9.使用GitLab管理版本</td><td></td></tr><tr><td>Maven</td><td>1.Maven的概述<br>2.Maven的下载安装<br>3.eclipse集成Maven插件<br>4.Idea集成maven插件<br>5.Maven常用命令介绍<br>6.Maven创建Java项目<br>7.Maven项目聚合的两种方式<br>8.Maven分项目聚合的设计方式<br>9.Maven创建Web项目<br>10.Maven项目的自动部署配置<br>11.Maven本地Jar包的依赖方式</td><td></td></tr><tr><td>Linux/CentOS</td><td>1.虚拟机介绍和应用场景<br>2.VMware的安装和使用<br>3.linux/centos系统简介<br>4.CentOS系统目录结构<br>5.centOS常用命令<br>6.CentOS安装java<br>7.CentOS安装Tomcat<br>8.CentOS安装MySQL，MySQL主从复制<br>9.linuxShell编程<br>10.linux运维指南</td><td></td></tr><tr><td>Nginx</td><td>1.Nginx的简介与安装<br>2.Nginx的原型图<br>3.Nginx架构模型<br>4.Nginx负载均衡<br>5.Nginx+Vsftpd文件服务器<br>6.Nginx日志切分，备份，分析</td><td></td></tr><tr><td>Zookeeper</td><td>1.Zoopeeper简介与安装<br>2.Zoopeeper概念解释<br>3.Zoopeeper数据模型<br>4.Zoopeeper原生API操作<br>5.ZClient操作Zoopeeper<br>6.使用Zoopeeper实现配置文件中心<br>7.Zoopeeper节点类型<br>8.Zoopeeper分布式锁</td><td></td></tr></tbody></table><h2 id="分布式-微服务"><a href="#分布式-微服务" class="headerlink" title="分布式/微服务"></a>分布式/微服务</h2><table><thead><tr><th>课程大纲</th><th>课程内容</th><th>备注</th></tr></thead><tbody><tr><td>RPC</td><td>1.RMI远程调用<br>2.webService+XML<br>3.HttpClient+JSON<br>4.OkHttpClient+JSON<br>5.JDK动态代理+Socket实现RPC<br>6.Cglib+Netty实现RPC<br>7.RestTemplate<br>8.protobuf序列化</td><td></td></tr><tr><td>Dubbo/<br>Dubbox</td><td>1.Dubbo简介<br>2.Dubbo架构分析<br>3.Dubbo的入门案例<br>4.Dubbo-admin的安装和使用<br>5.Dubbo注册中心<br>6.Dubbo提供者以及配置优化<br>7.Dubbo消费者和配置优化<br>8.Dubbo高可用、Dubbo负载均衡&lt;br /<br>9.Dubbox实现Restful<br>10.Dubbox启动Kryo和FST</td><td></td></tr><tr><td>RabbitMQ</td><td>1.MQ简介和应用场景<br>2.ActiveMQ安装<br>3.ActiveMQ模型分析<br>4.java操作ActiveMQ<br>5.Spring集成ActiveMQ<br>6.JMS操作ActiveMQ<br>7.ActiveMQ持久化设置<br>8.ActiveMQ群集的安装</td><td></td></tr><tr><td>Solr</td><td>1.Solr简介与安装（tomcat）<br>2.Solr和lucene对比<br>3.Solr库创建<br>4.Solr中文分词<br>5.SolrJ操作<br>6.Solr数据导入<br>7.SolrCloud方案和集群搭建<br>8.Solr增量导入</td><td></td></tr><tr><td>Redis</td><td>1.Redis简介与安装<br>2.Redis持久化介绍<br>3.Redis的作用以及数据结构<br>4.Redis穿透和雪崩及其解决方案<br>5.Redis哨兵模式</td><td></td></tr><tr><td>JVM</td><td>1.JVM简介<br>2.JVM组成结构<br>3.JVM堆、栈原理<br>4.JVM垃圾收集机制<br>5.JVM堆内存调优<br>6.垃圾回收策略</td><td></td></tr><tr><td>FastDFS</td><td>1.FastDFS简介与安装<br>2.FastDFS模型分析<br>3.java操作FastDFS<br>4.FastDFS实践</td><td></td></tr><tr><td>SpringBoot</td><td>1.Spring和SpringBoot的对比和介绍<br>2.包扫描实现<br>3.SpringBoot的配置类和配置文件<br>4.Restful设计开发<br>5.SpringBoot添加拦截器<br>6.SpringBoot跨域请求<br>7.SpringBoot Stater原理<br>8.SpringBoot核心开发</td><td></td></tr><tr><td>SpringCloud Bus</td><td>1.SpringCloud框架简介<br>2.SpringCloud 和Dubbo的区别<br>3.SpringCloud Netflix：核心组件<br>4.Rest连接</td><td></td></tr></tbody></table><h1 id="尚硅谷版java路线"><a href="#尚硅谷版java路线" class="headerlink" title="尚硅谷版java路线"></a>尚硅谷版java路线</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;英格版java全站培训&quot;&gt;&lt;a href=&quot;#英格版java全站培训&quot; class=&quot;headerlink&quot; title=&quot;英格版java全站培训&quot;&gt;&lt;/a&gt;英格版java全站培训&lt;/h1&gt;&lt;h2 id=&quot;javaSE&quot;&gt;&lt;a href=&quot;#javaSE&quot; cla</summary>
      
    
    
    
    <category term="default" scheme="https://stary1999.github.io/categories/default/"/>
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>springBoot2</title>
    <link href="https://stary1999.github.io/2021/07/04/springBoot2/"/>
    <id>https://stary1999.github.io/2021/07/04/springBoot2/</id>
    <published>2021-07-04T10:29:15.000Z</published>
    <updated>2021-07-10T12:27:11.622Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.yuque.com/atguigu/springboot">https://www.yuque.com/atguigu/springboot</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><p>掌握Spring，Maven</p><p>ps：需要对springMVC、redis有一定了解</p><p>环境要求：</p><p>java8或以上，</p><p>maven3.3+</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>spring能做什么：IOP，AOC，web</p><p>spring：微服务。将大型应用拆分为许多小模块。</p><p>SpringBoot是一个高层框架、一站式框架，Boot：开始。可以帮助整合整个Spring的生态框架。帮助我们快捷地创建出一个生产级别的应用，快速开发的脚手架。</p><p>Spring的生态，涵盖了：web开发、数据访问、安全控制、分布式、消息服务、移动开发、批处理……</p><p>jdk1.8更新接口适配器模式，Spring5更新响应式编程</p><p>SpringBoot优点：</p><ol><li>创建独立的Spring应用。之前使用Spring的应用能够快捷地移植到SpringBoot，且功能不会减少</li><li>内嵌服务器，不需要再额外部署到tomcat之类的服务器上</li><li>自动配置Spring以及第三方的功能</li><li>提供生产级别的监控，健康检查以及外部化配置</li><li>无代码生成，无需编写xml。</li></ol><p>基于自动装配</p><p>缺点：迭代快（人称版本帝）、封装深（不易精通）</p><h2 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h2><p>微服务构建导致分布式</p><p>ps：（php开发小型后台快）</p><p>分布式开发困难，需要统一调度</p><ul><li>远程调用</li><li>服务发现</li></ul><ul><li><p>负载均衡</p></li><li><p>服务容错</p></li><li><p>配置管理</p></li><li><p>服务监控</p></li><li><p>链路追踪</p></li><li><p>日志管理</p></li><li><p>任务调度</p></li><li><p>……</p></li></ul><p>云原生中要处理的问题</p><ul><li>服务自愈</li><li>弹性伸缩</li><li>服务隔离</li><li>自动化部署</li><li>灰度发布</li><li>流量治理</li><li>……</li></ul><p>云原生技术路线（运维方向）：Docker，星际级容器编排Kubernetes，企业CI/CD、构建企业云平台，新一代架构Service Mesh 和serverless，</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>官网地址：</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started</a></p><h1 id="hello-SpringBoot2"><a href="#hello-SpringBoot2" class="headerlink" title="hello SpringBoot2"></a>hello SpringBoot2</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>SpringBoot2中整合了常用的框架，所以，只需要在maven中导入需要的相关依赖，新建运行的主类，然后就可以快速编写controller方法，实现业务。<br>如果需要数据库操作，导入数据库的场景依赖，然后设置数据库相关配置，便可以进行业务开发。</p><p>新建一个maven工程</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入web的场景依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建主类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注解告诉这是一个SpringBoot应用*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建控制类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,springBoot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="/2021/07/04/springBoot2/image-20210704203805336.png" alt="image-20210704203805336"></p><p>配置文件：</p><p>application.properties</p><p>一个配置文件配置所有。参考官网的配置文件说明，有默认值。</p><p>包含运行环境的jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以打一个可以直接运行的jar包，在命令行输入下列命令直接运行（jar包中包含了tomcat，所以移植性极佳）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar [name.jar]</span><br></pre></td></tr></table></figure><h2 id="正式开发"><a href="#正式开发" class="headerlink" title="正式开发"></a>正式开发</h2><p>在idea中新建一个SpringBoot项目：file-new- project，选择Spring Initializr，填写相关信息。</p><p><img src="/2021/07/04/springBoot2/image-20210709153420089.png" alt="image-20210709153420089"></p><p>点击下一步，配置场景。点击finish，完成项目的创建</p><p><img src="/2021/07/04/springBoot2/image-20210709153838551.png" alt="image-20210709153838551"></p><p>目录说明：</p><p><img src="/2021/07/04/springBoot2/image-20210709154206449.png" alt="image-20210709154206449"></p><h2 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h2><ol><li>无法找到run方法</li></ol><p>SpringApplication错写成SpringBootApplication</p><ol start="2"><li>无法运行：</li></ol><p>注意8080端口是否被tomcat服务占用</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="版本仲裁"><a href="#版本仲裁" class="headerlink" title="版本仲裁"></a>版本仲裁</h3><p>父项目做依赖管理：父项目的父项目中定义了很多常用的版本依赖。</p><p>自动仲裁版本管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.15.13<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.82<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.16.1<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">awaitility.version</span>&gt;</span>4.0.3<span class="tag">&lt;/<span class="name">awaitility.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bitronix.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">bitronix.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build-helper-maven-plugin.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">build-helper-maven-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">byte-buddy.version</span>&gt;</span>1.10.14<span class="tag">&lt;/<span class="name">byte-buddy.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caffeine.version</span>&gt;</span>2.8.5<span class="tag">&lt;/<span class="name">caffeine.version</span>&gt;</span>  </span><br><span class="line">    ……</span><br><span class="line">    ……</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>自定义修改版本号：查看spring-dependency中规定的当前依赖的版本用的key。然后重写依赖（maven中的就近原则）。</p><h3 id="start场景管理"><a href="#start场景管理" class="headerlink" title="start场景管理"></a>start场景管理</h3><p>开发导入start场景管理</p><p>当引入了某个场景后，会自动引入场景所需要的所有的依赖</p><p>官方start和第三方start。</p><p>所有场景的启动器是spring-boot-start，最基础的启动器。</p><p>ps：当引入不在版本仲裁的jar包时，需要额外写依赖。</p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><ul><li>自动配好了tomcat<ul><li>引入tomcat依赖</li><li>配置tomcat</li></ul></li><li>自动配好了SpringMVC的常用场景（乱码，视图解析器，文件上传解析器）<ul><li>引入SpringMVC全套组件</li><li>自动配置好SpringMVC常用组件</li></ul></li><li>自动配置好web常见功能，如字符编码问题等（需要导入场景依赖）</li><li>自动配置了默认包结构，主程序及其所在的包结构下的所有包都能被扫描。<ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需配置以前的包扫描配置</li><li>想要改变扫描路径：修改主程序注解，放大扫描的包的层级<code>@SpringBootApplication(scanBasePackages = &quot;com.atguigu&quot;)</code> 或用<code>@ComponentScan</code>标识需要扫描的包，注意<code>@SpringBootApplication</code>是一个合成注解，使用时需要将<code>@SpringBootApplication</code>替换成三个字注解</li></ul></li><li>各种配置拥有默认值<ul><li>默认配置最终都是映射到某个类上，如：MultipartProperties</li><li>配置文件的值最终都会绑定到每个类上，这个类会在容器中创建对象</li></ul></li><li>按需加载所有的自动配置项<ul><li>根据Start加载，引入那些场景，这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在spring-boot-autoconfigure包中</li></ul></li></ul><h2 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h2><h3 id="组件添加："><a href="#组件添加：" class="headerlink" title="组件添加："></a>组件添加：</h3><ol><li><p>@Configuration</p><p>Full模式与Lite模式</p><ul><li>配置类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</li><li>配置类组件之间有依赖关系，方法调用得到之前的单实例组件，使用Full。</li></ul></li><li><p>@Bean、@Component、@Controller、@Service、@Repository</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#############################Configuration使用示例######################################################</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment"> *      组件依赖必须使用Full模式默认。其他默认是否Lite模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################<span class="meta">@Configuration</span>测试代码如下########################################</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、从容器中获取组件</span></span><br><span class="line"></span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>@ComponentScan、@Import</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="number">4</span>、<span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"> *      给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>@Conditional</p><p>条件装配，满足Conditional指定的条件，则进行组件注入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">=====================测试条件装配==========================</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中Tom组件：&quot;</span>+tom);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">&quot;user01&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中user01组件：&quot;</span>+user01);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> tom22 = run.containsBean(<span class="string">&quot;tom22&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器中tom22组件：&quot;</span>+tom22);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>原生配置文件引入</p><ol><li>@ImportResource</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">======================测试=================</span><br><span class="line">        <span class="keyword">boolean</span> haha = run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> hehe = run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h3><p>使用java读取properties文件中的内容，并将之封装至JavaBean中以供随时使用：</p><p>传统方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNoFoundException,IOException</span>&#123;</span><br><span class="line">        Properties pps=<span class="keyword">new</span> properties();</span><br><span class="line">        pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">        Enumeration enum1=pps.propertyNames();</span><br><span class="line">        <span class="keyword">while</span>(enum1.hasMoreElements())&#123;</span><br><span class="line">            String strKey=(String)enum1.nextElement();</span><br><span class="line">            String strValue=pps.getProperty(strKey);</span><br><span class="line">            System.out.println(strKet+<span class="string">&quot;=&quot;</span>+strValue);</span><br><span class="line">            <span class="comment">//封装到javaBean类中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：SpringBoot中可以只有一个配置文件（properties或yaml），可以自动识别配置文件中需要配置的属性。</p><p>注解实现：</p><ol><li>@ConfigurationProperties</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>@EnableConfigurationProperties+@ConfigurationProperties</li><li>@Component+@ConfigurationProperties</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="comment">//1、开启Car配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把这个Car这个组件自动注册到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>引导加载自动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication&#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><p>@SpringBootConfiguration</p><p>@Configuration。代表当前是一个配置类</p></li><li><p>@ComponentScan。指定扫描那些Spring注解</p></li><li><p>@EnableAutoConfiguration</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>AutoConfigurationPackage。自动配置包，指定了默认的包规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></span><br></pre></td></tr></table></figure><ul><li>@Import（AutoConfigurationImportSelector.class）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader)；得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>文件中写死了Spring-boot一启动就要给容器中加载的所有配置类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</span><br><span class="line">spring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories</span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br></pre></td></tr></table></figure><p><strong>按需开启自动配置项</strong></p><h3 id="修改默认配置项"><a href="#修改默认配置项" class="headerlink" title="修改默认配置项"></a>修改默认配置项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  <span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span> <span class="comment">//容器中没有这个名字 multipartResolver 的组件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">            <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line"><span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给容器中加入了文件上传解析器；</span></span><br></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件。以用户自己配置的优先。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>SpringBoot先加载所有的自动配置类。xxxx.AutoConfiguration</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件默认的值。对应的值从xxx.Properties中获取，两者进行了绑定</li><li>生效的配置类会给容器中装配很多的组件</li><li>只要容器中有这些组件，就相当于拥有这些功能</li><li>定制化配置<ul><li>用户自己@Bean替换底层的组件</li><li>用户查找这个组件是获取配置文件的什么值就去修改。</li></ul></li></ul><h1 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h1><h2 id="1-Lombok"><a href="#1-Lombok" class="headerlink" title="1.Lombok"></a>1.Lombok</h2><p>作用：简化JavaBean开发：</p><p>maven中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>idea中搜索安装lombok插件，使用下列三个注解来替代get、set等方法</p><p>@Data<br>@ToString<br>@EqualsAndHashCode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">===============================简化JavaBean开发===================================</span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">================================简化日志开发===================================</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-dev-tools"><a href="#2-dev-tools" class="headerlink" title="2.dev-tools"></a>2.dev-tools</h2><p>maven中导入依赖。项目或者页面修改后，按住Ctrl+F9，快速编译</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-快速创建SpringBoot项目"><a href="#3-快速创建SpringBoot项目" class="headerlink" title="3.快速创建SpringBoot项目"></a>3.快速创建SpringBoot项目</h2><p>参考：正式开发</p><ul><li>引入场景依赖</li><li>查看自动配置的参数（是否需要修改）</li></ul><p>debug=true，查看自动配置报告</p><p>banner图修改</p><p>ctrl+f9 项目重新编译，配合热部署插件使用</p><p>ctrl+h，查看继承树</p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><ul><li>配置文件</li><li>web开发</li><li>数据访问</li><li>单元测试</li><li>指标监控</li><li>原理解析</li></ul><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>文件类型：xxx.properties。xxx.yaml</p><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>“YAML Ain’t Markup Language”(YAML不是一种标记语言)的递归缩写。在开发这种语言时，YAML的意识其实是：”Yet Another Markup Langeage”(仍是一种标记语言)。YAML非常适合用来作为<strong>以数据为中心</strong>的配置文件。</p><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><ul><li>key: value;key和value之间有空格</li><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许使用空格</li><li>缩进空格数不重要，只要相同层级的元素左对齐即可</li><li>#表示注释</li><li>字符串无需加引号，如果要加，单引号表示字符内容会被转义。例如/n就输出/n。双引号则表示字符内容不会被转义，例如，/n的输出效果是换行。</li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li><p>字面量：单个的、不可再分的值。例如：date、boolean、string、number、null</p></li><li><p>对象：键值对的集合。map、hash、set、object</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure></li><li><p>数组：一组按次序排列的值。array、list、queue。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yaml表示</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><h2 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h2><ul><li><p>SpringMVC自动配置概览</p></li><li><p>简单功能分析</p></li><li><p>请求参数处理</p></li><li><p>数据响应与内容协商</p></li><li><p>视图解析与模板引擎</p></li><li><p>拦截器</p></li><li><p>异常处理</p></li><li><p>原生Servlet组件</p></li><li><p>嵌入式Web开发</p></li><li><p>定制化原理</p></li></ul><h3 id="1-SpringMVC自动配置概览"><a href="#1-SpringMVC自动配置概览" class="headerlink" title="1.SpringMVC自动配置概览"></a>1.SpringMVC自动配置概览</h3><h3 id="2-简单功能分析"><a href="#2-简单功能分析" class="headerlink" title="2.简单功能分析"></a>2.简单功能分析</h3><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><ol><li>静态资源目录</li></ol><p>只要静态资源放在类路径下：/static、/public、/resource、/META-INF/resource</p><p>访问：当前项目根路径/+静态资源名</p><p>原理：静态映射/**<br>请求进来，先去找Controller看能不能处理。不能处理的所有请求都交给静态资源处理器。静态资源也找不到则响应404页面。</p><p>改变默认的静态资源路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><p>静态资源访问前缀：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>当前项目+static-path-pattern+静态资源名</p></li><li><p>webjar<br>自动映射/webjars/**。<br>导入相关的web的jar包，网址：<a href="https://www.webjars.org./">https://www.webjars.org。</a><br>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入jQuery后，可以在：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js%E4%B8%AD%E8%AE%BF%E9%97%AEjQuery%E3%80%82">http://localhost:8080/webjars/jquery/3.5.1/jquery.js中访问jQuery。</a></p></li></ol><h4 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h4><ul><li>静态资源路径下，index.html页面会被自动识别为首页<ul><li>可以配置静态资源路径</li><li>但是不可用配置静态资源访问前缀。否则导致index.html不能被默认访问。</li></ul></li><li>或者用controller处理/index页面跳转。自定义/请求的跳转页面。</li></ul><h4 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h4><p>自定义网站的图标，favicon.ico文件放在静态资源目录下即可</p><h4 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h4><ul><li><p>SpringBoot启动默认加载xxx.AutoConfiguration类（自动配置类）</p></li><li><p>SpringMVC功能的自动配置类：WebMVCAutoConfiguration，生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>给容器中配置了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件的相关属性和xxx进行了绑定|<br>WebMVCProperties==spring.mvc、ResourceProperties==spring.resource</p></li></ul><p>源码解析</p><ol><li><p>配置类只有一个有参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造器所有参数的值都会从容器中确定</span></span><br><span class="line"><span class="comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span></span><br><span class="line"><span class="comment">//ListableBeanFactory beanFactory Spring的beanFactory</span></span><br><span class="line"><span class="comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span></span><br><span class="line"><span class="comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class="line"><span class="comment">//DispatcherServletPath  </span></span><br><span class="line"><span class="comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="params"><span class="function">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="params"><span class="function">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="params"><span class="function">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="params"><span class="function">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>资源处理的默认规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line"><span class="comment">//webjars的规则</span></span><br><span class="line">            <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">.addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">add-mappings:</span> <span class="literal">false</span>   <span class="string">禁用所有静态资源规则</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span></span><br><span class="line"><span class="comment"> * /resources/, /static/, /public/].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure></li><li><p>欢迎页的处理规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line"><span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">           <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">           <span class="comment">// 调用Controller  /index</span></span><br><span class="line">logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>favicon</p></li></ol><h3 id="3-请求参数处理"><a href="#3-请求参数处理" class="headerlink" title="3.请求参数处理"></a>3.请求参数处理</h3><h4 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h4><ol><li><p>rest使用与原理。</p><ul><li><p>@xxxMapping</p></li><li><p>Rest风格支持（使用HTTP请求方式动词来表示对资源的操作）</p><ul><li><p>以前：/getUser 获取用户  、/deleteUser 删除用户、/editUser 修改用户、/saveUser 保存用户</p></li><li><p>现在：/user GET-获取用户，DELETE-删除用户、PUT-修改用户、POST-保存用户</p></li><li><p>核心Filter：HiddenHttpMethodFilter</p><ul><li>用法：表单method=post，隐藏域：_method=put</li><li>SpringBoot中手动开启</li></ul></li><li><p>拓展：自定义_method的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HiddenHttpMethodFilter methodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> methodFilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Rest原理（表单提交要使用REST的时候）</p><ul><li>表单提交会带上_method=PUT</li><li>请求过来会被HiddenHttpMethodFilter拦截<ul><li>请求正常，且是POST<ul><li>获取到_method的值</li><li>兼容以下请求：PUT、DELETE、PATCH</li><li>原生request（post），包装模式requestWrapper重写了getMethod方法，返回的是传入的值</li><li>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requestWrapper</li></ul></li></ul></li></ul></li><li><p>Rest如何使用客户端工具</p><ul><li><p>使用PostMan直接发送put、delete等方式请求，无需Filter</p></li><li><p>开启表单的Rest功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>请求映射原理</p><p><img src="/2021/07/04/springBoot2/1603181171918-b8acfb93-4914-4208-9943-b37610e93864.png" alt="img"></p></li></ol><p>   SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p><ul><li><p>RequestMappingHandlerMapping：保存了所有@RequestMapping和handle的映射规则</p></li><li><p>所有的请求映射都在HandleMapping中</p><ul><li><p>SpringBoot自动配置欢迎页的WelcomePageHandleMapping。访问/  能访问到index.html</p></li><li><p>SpringBoot自动配置默认的RequestMappingHandleMapping</p></li><li><p>请求进来，挨个尝试所有的HandleMapping看是否有请求信息</p><ul><li>如果有就找到这个请求对应的handle</li><li>如果没有就是下一个HandleMapping</li></ul></li><li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放HandleMapping，自定义HandleMapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h4><ol><li><p>注解：@PathVariable、@RequestHandle、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="comment">//2、SpringBoot默认是禁用了矩阵变量的功能</span></span><br><span class="line">    <span class="comment">//      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span></span><br><span class="line">    <span class="comment">//              removeSemicolonContent（移除分号内容）支持矩阵变量的</span></span><br><span class="line">    <span class="comment">//3、矩阵变量必须有url路径变量才能被解析</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Servlet API<br>WebRequest、ServletRequest、MultipartSession、HttpSession、javax.servlet.http.PushBuild、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、Zoneld</p></li><li><p>复杂参数<br>Map、Model（map、model里面的数据会被放在request的请求域request.setAttribute）、Error/BindingResult、RedirectAttribute（重定向携带数据）、ServletResponse（response）、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p><p>Map、Model类型的参数，会返回mavContainer.getModel()；—&gt;BindingAwareModelMap是Model也是Map<br>mavContainer.getModel()；获取到值的</p></li><li><p>自定义对象：<br>可以自动类型转换与格式化，可以级联封装</p></li></ol><h4 id="POJO封装过程"><a href="#POJO封装过程" class="headerlink" title="POJO封装过程"></a>POJO封装过程</h4><ul><li>ServletModelAttributeMethodProcessor</li></ul><h4 id="参数处理原理"><a href="#参数处理原理" class="headerlink" title="参数处理原理"></a>参数处理原理</h4><ul><li>HandlerMapping中找到能处理请求的Handle（Controller.method())</li><li>为当前Handle找一个适配器HandleAdapter；RequestMappingHandlerAdapter</li><li>适配器执行目标方法并确定方法参数的每一个值</li></ul><ol><li><p>HandlerAdapter</p></li><li><p>执行目标方法</p></li><li><p>参数解析器-HandlerMethodArgumentResolver<br>确认将要执行的目标方法的每一个参数的值是什么。<br>SpringMVC目标方法能写多少种参数类型，取决于参数解析器</p><ul><li>当前解析器是否支持解析这种参数</li><li>支持就调用resolveArgument</li></ul></li><li><p>返回值处理器</p></li><li><p>如何确定目标方法每一个参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">============InvocableHandlerMethod==========================</span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">MethodParameter parameter = parameters[i];</span><br><span class="line">parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">String exMsg = ex.getMessage();</span><br><span class="line"><span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>挨个判断所有参数解析器那个支持解析这个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="keyword">this</span>.argumentResolvers) &#123;</span><br><span class="line"><span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">result = resolver;</span><br><span class="line"><span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解析这个参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可</span><br></pre></td></tr></table></figure></li><li><p>自定义参数类型、封装POJO<br>ServletModelAttributeMethodProcessor，这个参数处理器支持是否为简单类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimpleValueType</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Void.class != type &amp;&amp; <span class="keyword">void</span>.class != type &amp;&amp;</span><br><span class="line">(ClassUtils.isPrimitiveOrWrapper(type) ||</span><br><span class="line">Enum.class.isAssignableFrom(type) ||</span><br><span class="line">CharSequence.class.isAssignableFrom(type) ||</span><br><span class="line">Number.class.isAssignableFrom(type) ||</span><br><span class="line">Date.class.isAssignableFrom(type) ||</span><br><span class="line">Temporal.class.isAssignableFrom(type) ||</span><br><span class="line">URI.class == type ||</span><br><span class="line">URL.class == type ||</span><br><span class="line">Locale.class == type ||</span><br><span class="line">Class.class == type));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class="line">Assert.state(binderFactory != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line"><span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">mavContainer.setBinding(name, ann.binding());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object attribute = <span class="keyword">null</span>;</span><br><span class="line">BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">attribute = mavContainer.getModel().get(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Create attribute instance</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BindException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (isBindExceptionRequired(parameter)) &#123;</span><br><span class="line"><span class="comment">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class="line"><span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class="line">attribute = Optional.empty();</span><br><span class="line">&#125;</span><br><span class="line">bindingResult = ex.getBindingResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Bean property binding and validation;</span></span><br><span class="line"><span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line">WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line"><span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">bindRequestParameters(binder, webRequest);</span><br><span class="line">&#125;</span><br><span class="line">validateIfApplicable(binder, parameter);</span><br><span class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line"><span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">&#125;</span><br><span class="line">bindingResult = binder.getBindingResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class="line">Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br></pre></td></tr></table></figure><p>WebDataBinder：web数据绑定器，将请求参数的值绑定到指定的JavaBean里面<br>WebDataBinder：利用它里面的Converters将请求数据转成指定的数据类型。再次封装到JavaBean中<br>GenericConversionService：在设置每一个值的时候，找它里面的所有Converter那个可以将这个数据类型（request带来的参数的字符串）转到指定的类型<br>@FunctionalInterface public interface Converter&lt;S,T&gt;</p><p>给WebDataBinder里面放自己的Converter：<br>private static final class StringToNumber<T extends number>implements Converter&lt;String,T&gt;<br>自定义converter:</T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">            UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">            <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">            urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">            configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Pet&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Pet <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 啊猫,3</span></span><br><span class="line">                    <span class="keyword">if</span>(!StringUtils.isEmpty(source))&#123;</span><br><span class="line">                        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">                        String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">                        pet.setAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">                        <span class="keyword">return</span> pet;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>目标方法执行完成<br>将所有数据都放在ModelAndViewContainer；包含要去的页面地址View，还包含Model数据。</p></li><li><p>处理派发结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line"></span><br><span class="line">renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">InternalResourceView：</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expose helpers as request attributes, if any.</span></span><br><span class="line">exposeHelpers(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine the path for the request dispatcher.</span></span><br><span class="line">String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span></span><br><span class="line">RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line"><span class="keyword">if</span> (rd == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;Could not get RequestDispatcher for [&quot;</span> + getUrl() +</span><br><span class="line"><span class="string">&quot;]: Check that the corresponding file exists within your web application archive!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If already included or response already committed, perform include, else forward.</span></span><br><span class="line"><span class="keyword">if</span> (useInclude(request, response)) &#123;</span><br><span class="line">response.setContentType(getContentType());</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Including [&quot;</span> + getUrl() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">rd.include(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Note: The forwarded resource is supposed to determine the content type itself.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Forwarding to [&quot;</span> + getUrl() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">rd.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">暴露模型作为请求域属性</span><br><span class="line"><span class="comment">// Expose the model object as request attributes.</span></span><br><span class="line">exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model,</span></span></span><br><span class="line"><span class="params"><span class="function">HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//model中的所有数据遍历挨个放在请求域中</span></span><br><span class="line">model.forEach((name, value) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(name, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">request.removeAttribute(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-数据响应与内容协商"><a href="#4-数据响应与内容协商" class="headerlink" title="4.数据响应与内容协商"></a>4.数据响应与内容协商</h3><p>数据响应：</p><ul><li>响应页面</li><li>响应数据<ul><li>json</li><li>xml</li><li>xls</li><li>图片、音视频</li><li>自定义协议数据</li></ul></li></ul><h4 id="响应json"><a href="#响应json" class="headerlink" title="响应json"></a>响应json</h4><p>jackson.jar+@ResponseBody</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">web场景自动引入了json场景</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/04/springBoot2/1605151090728-f7c60e6f-d0c0-4541-bfa3-8cc805dfd5d6.png" alt="image.png"></p><p>给前端自动返回json数据</p><ol><li>返回值解析器</li><li>返回值解析器原理<ul><li>返回值处理器判断是否支持这种类型返回值：supportsReturnType</li><li>返回值处理器调用handleReturnValue进行处理</li><li>RequestResponseBodyMethodProcess可以处理返回值标了@ResponseBody注解的<ul><li>利用MessageConverters进行处理，将 数据写为json<ul><li>内容协商：浏览器默认会以请求头的方式告诉服务器他能接收什么样的内容类型</li><li>服务器最终根据自身的能力，决定服务器能生产出什么样内容类型的数据</li><li>SpringMVC会挨个遍历所有的底层的HttpMessageConverter，看谁能处理<ul><li>得到MappingJackson2HttpMessageConverter可以将对象写为json</li><li>利用MappingJackson2HttpMessageConverter将对象转为json再写出去</li></ul></li></ul></li></ul></li></ul></li></ol><p>SpringMVC支持的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line">有 <span class="meta">@ModelAttribute</span> 且为对象类型的</span><br><span class="line"><span class="meta">@ResponseBody</span> 注解 ---&gt; RequestResponseBodyMethodProcessor；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HTTPMessageConverter原理：</p><ol><li><p>MessageConverter规范：<br><img src="/2021/07/04/springBoot2/1605163447900-e2748217-0f31-4abb-9cce-546b4d790d0b.png" alt="image.png"><br>HttpMessageConverter：看是否支持将此class类型的对象，转化为MediaType类型的数据</p></li><li><p>默认的MessageConverter</p><p><img src="/2021/07/04/springBoot2/1605163584708-e19770d6-6b35-4caa-bf21-266b73cb1ef1.png" alt="image.png"></p><ul><li>0：只支持Byte类型的</li><li>1：String</li><li>2：String</li><li>3：Resource</li><li>4：ResourceRegion</li><li>5：DOMSource.class\SAXSource.class\StAXSource.class\StreamSource.class\Source.class</li><li>6：MutiValueMap</li><li>7：true</li><li>8：true</li><li>9：支持注解方式xml处理</li></ul><p>最终MappingJack2HttpMessageConverter把对象转化为JSON（利用底层的jackson的objectMapping转换的）</p><h4 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h4><p>根据客户的接收能力不同，返回不同媒体类型的数据。</p><ol><li><p>引入xml依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>postman分别测试返回json和xml<br>只需要改变请求头中Accept字段。Http协议中规定的，告诉服务器本客户端可以接收的数据类型</p></li><li><p>开启浏览器参数方式内容协商功能<br>开启基于请求参数的内容协商功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span>  <span class="comment">#开启请求参数内容协商模式</span></span><br></pre></td></tr></table></figure><p>测试：</p><p>发请求： <a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=json</a></p><p><a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=</a>xml<br>确定客户端接收什么样的内容类型</p><ol><li>Parameter策略优先确定是要返回json的数据（获取请求头中的format的值）</li><li>最终进行内容协商返回给客户端json即可</li></ol></li><li><p>内容协商原理</p><ul><li>判断当前响应头中是否已经有确定的媒体类型。MediaType</li><li>获取客户端（PostMan、浏览器等）支持接收的内容类型。（客户端Accept请求头字段）<ul><li>contentNegotiationManager内容协商管理器，默认使用基于请求头的策略</li><li>HeaderContentNegotiationStrategy确定客户端可以接收的内容类型</li></ul></li><li>遍历循环所有当前系统的MessageConverter，看谁支持操作这个对象</li><li>找到支持操作此对象的Converter，把converter支持的媒体类型统计出来</li><li>总结客户端需要的媒体类型，与服务端的能力（能提供的媒体类型）</li><li>进行内容协商的最佳匹配媒体类型</li><li>将对象转为最佳匹配媒体类型的converter，调用它进行转化</li></ul></li><li><p>自定义MessageConverter<br>实现多协议数据兼容</p><ul><li>@ResponseBody响应数据处理调用：RequestResponseBodyethodProcessor处理</li><li>Processor处理方法返回值，通过MessageConverter处理</li><li>所有MessageConverter合起来可以支持各种媒体类型数据的操作（读、写）</li><li>内容协商找到最终的MessageConverter</li></ul><p>SpringMVC的什么功能，衣蛾入口给容器中添加衣蛾WebMvcConfigurer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">      </span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>有可能我们添加的自定义功能会覆盖默认的很多功能，导致一些默认的功能失效。</strong></p></li></ol></li></ol><h3 id="5-视图解析与模板引擎"><a href="#5-视图解析与模板引擎" class="headerlink" title="5.视图解析与模板引擎"></a>5.视图解析与模板引擎</h3><p>视图解析：SpringBoot默认不支持jsp，需要引入第三方模板引擎技术实现页面渲染</p><h4 id="视图解析："><a href="#视图解析：" class="headerlink" title="视图解析："></a>视图解析：</h4><ul><li>视图处理方式：<ul><li>转发</li><li>重定向</li><li>自定义视图</li></ul></li></ul><ol><li><p>视图解析原理流程</p><ol><li><p>目标方法处理的过程中，所有数据都会被放在ModelAndViewContainer里面，包括数据和视图地址</p></li><li><p>方法的参数是一个自定义类型对象（从请求参数中确定的），把他重写放在ModelAndViewContainer</p></li><li><p>任何目标方法执行完成以后都会返回ModelAndView（数据和视图地址）</p></li><li><p>processDispatchResult处理派发结果</p><p>根据方法的String返回值得到view对象（定义了页面渲染逻辑）</p><ol><li>所有视图解析器尝试是否能根据当前返回值得到view对象</li><li>得到了redirect:/main.html，—-》Thymeleaf new RedirectView()</li><li>ContentNegotiationViewResolver里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象</li><li>view.render(mv.getModelInternal(),request,response)，视图对象调用自定义的render进行页面渲染工作<ul><li>RedirectView如何渲染：重定向到一个页面</li><li>获取目标url地址</li><li>response.sendRedirect(encodeURL)</li></ul></li></ol><p>视图解析：</p><ul><li>返回值以forward：开始：new InternalResourceView(forwardUrl);—-&gt;转发。<br>request.getRequestDispatcher(path).forward(request,response);</li><li>返回值以redirect：开始：new RedirectView()—-&gt;render就是重定向</li><li>返回值是普通字符串：new ThymeleafView()—–&gt;</li></ul><p>自定义视图+自定义视图解析器。。。。略</p></li></ol></li></ol><h4 id="模板引擎thymeleaf"><a href="#模板引擎thymeleaf" class="headerlink" title="模板引擎thymeleaf"></a>模板引擎thymeleaf</h4><p>thymeleaf：参考官网。<br>不推荐使用，建议使用vue</p><p>基本语法：<br>表达式：</p><table><thead><tr><th>表达式名字</th><th>语法</th></tr></thead><tbody><tr><td>变量取值</td><td>${…}</td></tr><tr><td>选择变量</td><td>*{…}</td></tr><tr><td>消息</td><td>#{…}</td></tr><tr><td>链接</td><td>@{…}</td></tr><tr><td>片段表达式</td><td>~{…}</td></tr></tbody></table><p><strong>使用：</strong></p><ol><li><p>引入start：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自动配置<br>自动配置策略：</p><ul><li>所有的thymeleaf的配置值都在ThymeleafProperties</li><li>配置好了SpringTemplateEngine</li><li>配好了ThymeleafViewResolve</li><li>我们只需要开发页面</li></ul></li><li><p>页面开发：<br>注意，需要引入thymeleaf的命名空间：<code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.atguigu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.atguigu.com&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;link&#125;&quot;</span>&gt;</span>去百度2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>构建后台管理系统：</p><ol><li>项目创建</li><li>静态资源处理</li><li>路径构建</li><li>模板抽取</li><li>页面跳转</li><li>数据渲染</li></ol><p>具体项目：略。参考完整的springBoot+vue项目</p><h3 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6.拦截器"></a>6.拦截器</h3><ol><li><p>HandlerInterceptor接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录检查</span></span><br><span class="line"><span class="comment"> * 1、配置好拦截器要拦截哪些请求</span></span><br><span class="line"><span class="comment"> * 2、把这些配置放在容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line"><span class="comment">//        re.sendRedirect(&quot;/&quot;);</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、编写一个拦截器实现HandlerInterceptor接口</span></span><br><span class="line"><span class="comment"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span></span><br><span class="line"><span class="comment"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,<span class="string">&quot;/js/**&quot;</span>); <span class="comment">//放行的请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>拦截器原理：</p><ol><li>根据当前请求，找到HandlerExecutionChain（可以处理请求的handler以及handler的所有拦截器）</li><li>顺序执行所有拦截器的preHandle方法<ul><li>如果当前拦截器prehandler返回值为true，则执行下一个拦截器的preHandler</li><li>如果当前拦截器返回为false，直接倒序执行所有已经执行了的拦截器的afterCompletion</li></ul></li><li>如果任何一个拦截器返回false，直接跳出不执行目标方法</li><li>如果所有拦截器都返回True，执行目标方法</li><li>倒序执行所有拦截器的postHandle方法</li><li>前面的所有步骤有任何的异常都会直接触发afterCompletion</li><li>页面成功渲染完成以后，也会倒序触发afterCompletion：<br><img src="/2021/07/04/springBoot2/1605765121071-64cfc649-4892-49a3-ac08-88b52fb4286f.png" alt="img"></li></ol></li></ol><h3 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7.文件上传"></a>7.文件上传</h3><ol><li><p>页面表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>文件上传代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MultipartFile 自动封装上传过来的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> email</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headerImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> photos</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">    log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,</span><br><span class="line">            email,username,headerImg.getSize(),photos.length);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(!headerImg.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//保存到文件服务器，OSS服务器</span></span><br><span class="line">        String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">        headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(photos.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!photo.isEmpty())&#123;</span><br><span class="line">                String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                photo.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自动配置原理<br>文件上传自动配置类-MultipartAutoConfiguration-MultipartProperties</p><ul><li><p>自动配置好了StandardServletMultipartResolver（文件上传解析器）</p></li><li><p>原理步骤：</p><ul><li><p>请求进来使用文件上传解析器判断（isMultipart）并封装（resolverMultipart，返回MultipartHttpServletRequest）文件上传请求</p></li><li><p>参数解析器来解析请求中的文件内容封装成MultipartFile</p></li><li><p>将request中文件信息封装为一个Map；MultiValueMap&lt;String,MultipartFile&gt; FileCopyUtils。实现文件流的拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="params"><span class="function">                     <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="8-异常处理"><a href="#8-异常处理" class="headerlink" title="8.异常处理"></a>8.异常处理</h3><ol><li>错误处理<ol><li>默认规则<ul><li>默认情况下，SpringBoot提供/error处理所有错误的映射</li><li>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“whitelabel”错误视图，以HTML的格式呈现相同的数据</li><li>要对其进行自定义，添加View解析为error</li><li>要完全替换默认行为，可以实现ErrorController并注册该类的Bean定义，或添加ErrorAttributes类的组件以使用现有机制但替换其内容</li><li>error/下的4xx，5xx页面会被自动解析</li></ul></li><li>定制错误处理逻辑<ul><li>自定义错误页：<br>error/    下的页面，有精确的错误状态码页面就精确匹配，没有就找4xx.html，如果还没有就触发空白页</li><li>@ControllerAdvice+@ExceptionHandler处理全局异常，底层是ExceptionHandlerExceptionResolve，把responsestatus注解的信息底层调用response.sendError(ststusCode,resolvedReason)；tomcat发送的/error</li><li>Spring底层的异常，如参数类型转换异常；<br>DefaultHandlerExceptionResolver处理框架底层的异常<br>response.sendError(HttpServletResponse.SC_BAD_REQUEST,ex.getMessage());</li><li>自定义实现HandlerExceptionResolve处理异常，可以作为默认的全局异常处理规则</li><li>ErrorViewResolver实现自定义处理异常：<ul><li>response.sendError。error请求就会转给controller</li><li>你的异常没有任何人能够处理。tomcat底层response.sendError。error请求就会转给controller</li><li>basicErrorController要去的页面地址是：ErrorViewResolver</li></ul></li></ul></li><li>异常处理自动配置原理<ul><li>ErrorMvcAutoConfiguration自动配置异常处理规则：<ul><li>容器中的组件：类型：DefaultErrorAttributes—-》id：errorAttributes<ul><li>public class DefaultErrorAttributes implements ErrorAttributes，HandlerExceptionResolver</li><li>DefaultErrorAttributes：定义错误页面中可以包含哪些数据</li></ul></li><li>容器中的组件：类型：BasicErrorController—》id：basicErrorController（json+白页 适配响应）<ul><li>处理默认/error路径的请求：页面响应new ModelAndView(“error”,model);</li><li>容器中有组件View–》id是error；响应默认错误页</li><li>容器中放组件BeanNameViewResolver（视图解析器）；按照返回的视图名字作为组件的id去容器中找View对象</li></ul></li><li>容器中的组件：类型：DefaultErrorViewResolver—》id：conventionErrorViewResolver<ul><li>如果发生错误，会以HTTP的状态码作为视图页地址（viewName），找到真正的页面</li></ul></li></ul></li><li>如果想要返回页面，就会找error视图（StaticView）。默认是一个空白页</li></ul></li><li>异常处理步骤流程<ol><li>执行目标方法，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束，并且用dispatchException</li><li>进入视图解析流程（页面渲染？）<br>processDispatchResolver（processedRequest，response，mappedHandler，mv，dispatchException）；</li><li>mv=processHandlerException，处理handler发生的异常，处理完返回ModelAndView<ul><li>遍历所有的handlerExceptionResolvers，看谁能处理当前异常（HandlerExceptionResolvers处理器异常解析器）</li><li>系统默认的 异常解析器：<ul><li>DefaultErrorAttributes先来处理异常，把异常信息保存到request域，并返回null</li><li>默认没有任何人能处理异常，所以异常会被抛出<ol><li>如果没有任何人能处理，最终底层就会发送/error请求，会被底层的BasicErrorController处理</li><li>解析错误视图，遍历所有的ErrorViewResolver，看谁能解析</li><li>默认的DefaultErrorViewResolver，作用是吧响应状态码作为错误页的地址。例如：/error/500.html</li><li>模板引擎最终响应这个页面：/error/500.html</li></ol></li></ul></li></ul></li></ol></li></ol></li></ol><h3 id="9-web原生组件注入"><a href="#9-web原生组件注入" class="headerlink" title="9.web原生组件注入"></a>9.web原生组件注入</h3><ol><li><p>使用Servlet API<br>@ServletComponentScan（basePackages=”com.example.servlet”）:指定原生servlet组件都放在那里<br>@WebServlet（urlPatterns=”/my”）:效果：直接响应，没有经过Spring的拦截器<br>@Webfilter（urlPatterns={“/css”,”/images/*”}）<br>@WebListener<br>拓展：DispatchServlet如何注册进来：</p><ul><li>容器中自动配置了DispatchServlet属性绑定到WebMvcProperties；对应的配置文件配置项是：Spring.mvc。</li><li>通过ServletRegistrationBean&lt;DispatcherServlet&gt;把DispatchServlet配置进来</li><li>默认映射的是/路径</li></ul><p>Tomcat-Servlet:多个Servlet都能处理到同一层路径，精确优先原则</p></li><li><p>使用RegistrationBean<br><code>ServletRegistrationBean</code>, <code>FilterRegistrationBean</code>, and <code>ServletListenerRegistrationBean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRegistConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyServlet myServlet = <span class="keyword">new</span> MyServlet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(myServlet,<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/my02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        MyFilter myFilter = <span class="keyword">new</span> MyFilter();</span><br><span class="line"><span class="comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span></span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/my&quot;</span>,<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = <span class="keyword">new</span> MySwervletContextListener();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="10-嵌入式Web开发"><a href="#10-嵌入式Web开发" class="headerlink" title="10.嵌入式Web开发"></a>10.嵌入式Web开发</h3><ol><li><p>切换嵌入式Servlet容器</p><ul><li><p>默认支持的webServlet</p><ul><li>Tomcat、Jetty、Undertow</li><li>ServletWebServerApplicationContext容器启动寻找ServletWebServerFactory并引导创建服务器</li></ul></li><li><p>切换服务器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>原理</p><ul><li>SpringBoot应用启动发现当前是web应用。Web场景包，导入tomcat</li><li>web应用会创建一个web版的ico容器ServletWebServerApplicationContext</li><li>ServletWebServerApplicationContext启动的时候寻找ServletWebServerFactory（Servlet的web服务器工厂——》Servlet的web服务器）</li><li>SpringBoot底层默认有很多的WebServer工厂：<br>TomcatServletWebServerFactory<br>JettyServletWebServerFactory<br>UndertowServletWebServerFactory</li><li>底层直接会有一个自动配置类：<br>ServletWebServerFactoryAutoConfiguration</li><li>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration配置类</li><li>ServletWebServerFactoryConfiguration配置类根据动态判断系统中到底导入了那个web服务器的包。（默认是web-starter导入tomcat包，容器中就有TomcatServletWebServerFactory）</li><li>TomcatServletWebServerFactory创建出Tomcat服务器并启动；TomcatServletWebServer的构造器拥有初始化方法：initialize—-this.tomcat.start()；</li><li>内嵌服务器，就是手动吧启动服务器的代码调用（tomcat核心jar包存在）</li></ul></li></ul></li><li><p>定制Servlet容器</p><ul><li><p>实现：WenServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt;<br>把配置文件的值和ServletWebServerFactory进行绑定</p></li><li><p>修改配置文件：server.xxx</p></li><li><p>直接自定义ConfigurableServletWebFactory<br>xxxCustomizer:定制化器，可以改变xxx的默认规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizationBean</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">ConfigurableServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> </span>&#123;</span><br><span class="line">        server.setPort(<span class="number">9000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="11-定制化原理"><a href="#11-定制化原理" class="headerlink" title="11.定制化原理"></a>11.定制化原理</h3><ol><li><p>定制化的常见方式</p><ul><li><p>修改配置文件</p></li><li><p>xxxxCustomizer</p></li><li><p>编写自定义配置类xxxConfiguration；+@Bean替换、增加容器中默认组件；视图解析器</p></li><li><p>Web应用，编写一个配置类实现WebMvcConfigurer即可定制化web功能；+@Bean给容器中在拓展一些组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span></span><br></pre></td></tr></table></figure></li><li><p>@EnableWebMvc+WebMvcConfigurer+@Bean，可以全面接管SpringMVC，所有的规则全部自己重新配置，实现定制和拓展功能</p><ul><li>原理：<ol><li>WebMvcAutoConfiguration默认的SpringMVC的自动配置功能类，静态资源、欢迎页……</li><li>一旦使用@EnableWebMvc，会@Import(DelegationWebMvcConfiguration.class)</li><li>DelegationWebMvcConfiguration的作用，只保证SpringMVC最基本的使用<ul><li>把所有系统中的WebMvcConfigurer拿过来。所有功能的地址都是这些WebMvcConfigurer合起来一起生效</li><li>自动配置了一些非常底层的组件。RequestMappingHandlerMapping这些组件依赖的组件都是从容器中获取</li><li>public class DelegationWebMvcConfiguration extends WebMvcAutoConfigurationSupport</li></ul></li><li>WebMvcAutoConfiguration里面的配置要能生效，必须@ConditionalOnMissingBean（WebMvcAutoConfigurationSupport.class）</li><li>@EnableWebMvc导致了WebMvcAutoConfiguration没有生效</li></ol></li></ul></li></ul></li><li><p>原理分析套路：<br>场景starter—xxxAutoConfiguration—导入xxx组件—绑定xxxProperties—绑定配置文件项</p></li></ol><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><h3 id="1-SQL"><a href="#1-SQL" class="headerlink" title="1.SQL"></a>1.SQL</h3><p>1.数据源的自动配置-HikariDataSource</p><ol><li><p>导入JDBC场景</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库驱动：<br>为什么导入JDBC场景：官方不知道我们要操作什么数据库，所以官方没有导入</p><p><strong>数据库版本和驱动版本要对应</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">默认版本：<span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">想要修改版本</span><br><span class="line">1、直接依赖引入具体版本（maven的就近依赖原则）</span><br><span class="line">2、重新声明版本（maven的属性的就近优先原则）</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>分析自动配置</p><ol><li>自动配置的类<ul><li>DataSourceAutoConfiguration：数据源的自动配置<ul><li>修改数据源的相关配置：spring.datasource</li><li>数据库连接池的配置，是自己容器中没有DataSource才自动配置</li><li>底层配置好的连接池是：HikariDataSource</li></ul></li><li>DataSourceTransactionManagerAutoConfiguration：事务管理器的自动配置</li><li>JdbcTemplateAutoConfiguration：JdbcTemplate的自动配置，可以来对数据库进行crud<ul><li>可以修改这个配置项@ConfigurationProperties(prefix=”spring.jdbc”)来修改JdbcTemplate</li><li>@Bean@Primary JdbcTemplate；容器中有这个组件</li></ul></li><li>JndiDataSourceAutoConfiguration：Jndi的自动配置</li><li>XAdataSourceAutoConfiguration：分布式事务相关的</li></ul></li></ol></li><li><p>修改配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForObject(&quot;select * from account_tbl&quot;)</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForList(&quot;select * from account_tbl&quot;,)</span></span><br><span class="line">        Long aLong = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account_tbl&quot;</span>, Long.class);</span><br><span class="line">        log.info(<span class="string">&quot;记录总数：&#123;&#125;&quot;</span>,aLong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-使用Druid数据源"><a href="#2-使用Druid数据源" class="headerlink" title="2. 使用Druid数据源"></a>2. 使用Druid数据源</h3><ol><li><p>Druid官方地址：<a href="https://github.com/alibaba/druid">https://github.com/alibaba/druid</a><br>整合第三方技术的两种方式：</p><ul><li>自定义</li><li>找starter</li></ul></li><li><p>自定义方式</p><ol><li><p>创建数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWait&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;300000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnReturn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;poolPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxOpenPreparedStatements&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>StatViewServlet<br>用途：</p><ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.alibaba.druid.support.http.StatViewServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DruidStatView<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/druid/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>StatFilter<br>用于统计监控信息，如SQL监控、URL监控</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要给数据源中配置如下属性；可以允许多个filter，多个用，分割；如：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;stat,slf4j&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>系统中所有的filter：</p><table><thead><tr><th>别名</th><th>Filter类名</th></tr></thead><tbody><tr><td>default</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>stat</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>mergeStat</td><td>com.alibaba.druid.filter.stat.MergeStatFilter</td></tr><tr><td>encoding</td><td>com.alibaba.druid.filter.encoding.EncodingConvertFilter</td></tr><tr><td>log4j</td><td>com.alibaba.druid.filter.logging.Log4jFilter</td></tr><tr><td>log4j2</td><td>com.alibaba.druid.filter.logging.Log4j2Filter</td></tr><tr><td>slf4j</td><td>com.alibaba.druid.filter.logging.Slf4jLogFilter</td></tr><tr><td>commonlogging</td><td>com.alibaba.druid.filter.logging.CommonsLogFilter</td></tr></tbody></table></li></ol></li></ol><p>​              慢SQL记录配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stat-filter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.filter.stat.StatFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;slowSqlMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logSlowSql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用 slowSqlMillis 定义慢SQL的时长</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用官方starter的方式：</p><ol><li><p>引入druid-starter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>分析自动配置</p><ul><li>扩展配置项：spring.datasource.druid</li><li>DruidSpringAopConfiguration.class，监控SpringBean的，配置项：spring.datasource.druid.aop-patterns</li><li>DruidStatViewServletConfiguration.class，监控页的配置：spring.datasource.druid.stat-view-servlet-filter；默认开启</li><li>DruidFilterConfiguration.class，所有Druid自己filter 的配置</li></ul></li><li><p>配置示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_account</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.atguigu.admin.*</span>  <span class="comment">#监控SpringBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>     <span class="comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">stat-view-servlet:</span>   <span class="comment"># 配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">resetEnable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span>  <span class="comment"># 监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span>    <span class="comment"># 对上面filters里面的stat的详细配置</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">logSlowSql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>SpringBoot配置示例<br><a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p><p>配置项列表<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</a></p></li></ol></li></ol><h3 id="3-整合MyBatis"><a href="#3-整合MyBatis" class="headerlink" title="3. 整合MyBatis"></a>3. 整合MyBatis</h3><p><a href="https://github.com/mybatis">https://github.com/mybatis</a></p><ol start="0"><li>starter<br>SpringBoot官方的Starter：spring-boot-starter-*<br>第三方的： *-spring-boot-starter</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>配置模式：</p><ul><li><p>全局配置文件</p></li><li><p>SQLSessionFactory：自动配置好了</p></li><li><p>SqlSession：自动配置了SqlSessiontemplate组合了SqlSession</p></li><li><p>@Import（AutoConfiguredMapperScannerRegistrar.class）</p></li><li><p>Mapper：只要我们写的操作MyBatis的接口标准了 @Mapper就会被自动扫描进来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(MybatisProperties.class)</span> ： MyBatis配置项绑定类。</span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisAutoConfiguration</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mybatis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisProperties</span></span></span><br></pre></td></tr></table></figure></li></ul><p>可以修改配置文件中MyBatis开始的所有：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置mybatis规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span>  <span class="comment">#全局配置文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>  <span class="comment">#sql映射文件位置</span></span><br><span class="line">  </span><br><span class="line"><span class="string">Mapper接口---&gt;绑定Xml</span></span><br><span class="line"><span class="string">&lt;?xml</span> <span class="string">version=&quot;1.0&quot;</span> <span class="string">encoding=&quot;UTF-8&quot;</span> <span class="string">?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE</span> <span class="string">mapper</span></span><br><span class="line">        <span class="string">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="string">&gt;</span></span><br><span class="line"><span class="string">&lt;mapper</span> <span class="string">namespace=&quot;com.atguigu.admin.mapper.AccountMapper&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span>    <span class="string">public</span> <span class="string">Account</span> <span class="string">getAcct(Long</span> <span class="string">id);</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="string">&lt;select</span> <span class="string">id=&quot;getAcct&quot;</span> <span class="string">resultType=&quot;com.atguigu.admin.bean.Account&quot;&gt;</span></span><br><span class="line">        <span class="string">select</span> <span class="string">*</span> <span class="string">from</span>  <span class="string">account_tbl</span> <span class="string">where</span>  <span class="string">id=#&#123;id&#125;</span></span><br><span class="line">    <span class="string">&lt;/select&gt;</span></span><br><span class="line"><span class="string">&lt;/mapper&gt;</span></span><br></pre></td></tr></table></figure><p>配置private Configuration Configuration；mybatis.configuration下面的所有，就是相当于改MyBatis全局配置文件中的值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置mybatis规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#  config-location: classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line"> <span class="string">可以不写全局；配置文件，所有全局配置文件的配置都放在configuration配置项中即可</span></span><br></pre></td></tr></table></figure><p>步骤：</p><ul><li><p>导入MyBatis官方的starter</p></li><li><p>编写mapper接口。标准@Mapper注解</p></li><li><p>编写Sql映射文件并绑定Mapper接口</p></li><li><p>在application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息。建议<strong>配置在mybatis.configuration</strong></p></li></ul></li><li><p>注解模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from city where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">getById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(City city)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>混合模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from city where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">getById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(City city)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>最佳实战：</strong></p><ul><li><p>引入mybatis-starter</p></li><li><p><strong>配置application.yaml中，指定mapper-location位置即可</strong></p></li><li><p>编写Mapper接口并标注@Mapper注解</p></li><li><p>简单方法直接注解方式</p></li><li><p>复杂方法编写mapper.xml进行绑定映射</p></li><li><p><em>@MapperScan(“com.atguigu.admin.mapper”) 简化，其他的接口就可以不用标注@Mapper注解</em></p></li></ul></li></ol><h3 id="4-整合MyBatis-Plus完成CRUD"><a href="#4-整合MyBatis-Plus完成CRUD" class="headerlink" title="4. 整合MyBatis-Plus完成CRUD"></a>4. 整合MyBatis-Plus完成CRUD</h3><ol><li><p>MyBatis-plus：<br>MyBatis-plus是一个MyBatis的增强工具，在MyBatis的基础上只做增强不做改变，为简化开发、提升效率而生<br>详情参考官网<br>建议在IDEA中配合插件：MyBatisX使用</p></li><li><p>整合MyBatis-plus：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置：</p><ul><li>MyBatisPlusAutoConfiguration配置类，MyBatisPlusProperties配置项绑定。</li><li>SqlSessionFactory自动配置好，底层是容器中默认的数据源</li><li>mapperLocations自动配置好的，有默认值<br>classpath*:/mapper/**/*.xml；任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。<strong>建议</strong>：以后sql映射文件，放在mapper下</li><li>容器中也自动配置好了SQLSessiontemplate</li><li>@Mapper标注的接口也会被自动扫描；建议直接@MapperScan(“com.example.admin.mapper”)批量扫描</li></ul><p><strong>优点：只需要我们的Mapper继承BaseMapper就可以拥有crud能力</strong></p></li><li><p>CRUD功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="meta">@RequestParam(value = &quot;pn&quot;,defaultValue = &quot;1&quot;)</span>Integer pn,</span></span></span><br><span class="line"><span class="params"><span class="function">                             RedirectAttributes ra)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.removeById(id);</span><br><span class="line"></span><br><span class="line">        ra.addAttribute(<span class="string">&quot;pn&quot;</span>,pn);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/dynamic_table&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dynamic_table&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dynamic_table</span><span class="params">(<span class="meta">@RequestParam(value=&quot;pn&quot;,defaultValue = &quot;1&quot;)</span> Integer pn,Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//表格内容的遍历</span></span><br><span class="line"><span class="comment">//        response.sendError</span></span><br><span class="line"><span class="comment">//     List&lt;User&gt; users = Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),</span></span><br><span class="line"><span class="comment">//                new User(&quot;lisi&quot;, &quot;123444&quot;),</span></span><br><span class="line"><span class="comment">//                new User(&quot;haha&quot;, &quot;aaaaa&quot;),</span></span><br><span class="line"><span class="comment">//                new User(&quot;hehe &quot;, &quot;aaddd&quot;));</span></span><br><span class="line"><span class="comment">//        model.addAttribute(&quot;users&quot;,users);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        if(users.size()&gt;3)&#123;</span></span><br><span class="line"><span class="comment">//            throw new UserTooManyException();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//从数据库中查出user表中的用户进行展示</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造分页参数</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pn, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//调用page进行分页</span></span><br><span class="line">        Page&lt;User&gt; userPage = userService.page(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        userPage.getRecords()</span></span><br><span class="line"><span class="comment">//        userPage.getCurrent()</span></span><br><span class="line"><span class="comment">//        userPage.getPages()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>,userPage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;table/dynamic_table&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>,<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-NoSQL"><a href="#5-NoSQL" class="headerlink" title="5.NoSQL"></a>5.NoSQL</h3><p>Redis是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如字符串（String）、散列（Hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）与范围查询、bitmaps、hyperloglogs和地理空间（geospatial）索引半径查询。<br>Redis内置了复制、LUA脚本、LRU驱动事件、事务和不同级别的磁盘持久化，并通过Redis哨兵和自动分区提高可用性。</p><ol><li><p>Redis自动配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置：</p><ul><li>RedisAutoConfiguration自动配置类。Redisproperties属性类—》spring.redis.xxx是对redis的配置</li><li>连接工厂是准备好的。LettuceConnectionConfiguration、JedisConnectionConfiguration</li><li>自动注入了Redistemplate&lt;Object,Object&gt;</li><li>自动注入了StringRedisTemplate：k: v都是String</li><li>key: value</li><li>底层只要我们使用StringRedisTemplate、RedisTemplate就可以操作redis</li></ul><p>Redis环境搭建（阿里）</p><ol><li>阿里云付费</li><li>申请redis的公网连接地址</li><li>修改白名单，允许0.0.0.0/0（任意网段）访问</li></ol></li><li><p>RedisTemplate与Lettuce</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ValueOperations&lt;String, String&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">   </span><br><span class="line">    operations.set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    String hello = operations.get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>切换至jedis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        导入jedis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">lfy:Lfy123456</span></span><br><span class="line">      <span class="attr">client-type:</span> <span class="string">jedis</span></span><br><span class="line">      <span class="attr">jedis:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="1-JUnit5的变化"><a href="#1-JUnit5的变化" class="headerlink" title="1. JUnit5的变化"></a>1. JUnit5的变化</h3><p>SpringBoot2.2.0版本开始引入JUnit5作为测试单元默认库</p><p>JUnit5=JUnit Platform+JUnit Jupiter+JUnit Vintage</p><p>JUnit Platform: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。<br>JUnit Jupiter: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个测试引擎，用于在Junit Platform上运行。<br>JUnit Vintage: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p><p>注意：</p><p><strong>SpringBoot 2.4 以上版本移除了默认对</strong> <strong>Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test****）</strong></p><p><strong>JUnit 5’s Vintage Engine Removed from</strong> <code>spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boot05WebAdminApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以前：</p><p>@SpringBootTest + @RunWith(SpringTest.class)</p><p>SpringBoot整合Junit以后。</p><ul><li>编写测试方法：@Test标注（注意需要使用junit5版本的注解）</li><li>Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</li></ul><h3 id="2-JUnit5常用注解"><a href="#2-JUnit5常用注解" class="headerlink" title="2. JUnit5常用注解"></a>2. JUnit5常用注解</h3><p>JUnit5的注解与JUnit4的注解有所变化</p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p><ul><li><p>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</p></li><li><p>**@ParameterizedTest :**表示方法是参数化测试，下方会有详细介绍</p></li><li><p>**@RepeatedTest :**表示方法可重复执行，下方会有详细介绍</p></li><li><p>**@DisplayName :**为测试类或者测试方法设置展示名称</p></li><li><p>**@BeforeEach :**表示在每个单元测试之前执行</p></li><li><p>**@AfterEach :**表示在每个单元测试之后执行</p></li><li><p>**@BeforeAll :**表示在所有单元测试之前执行</p></li><li><p>**@AfterAll :**表示在所有单元测试之后执行</p></li><li><p>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</p></li><li><p>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</p></li><li><p>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</p></li><li><p>**@ExtendWith :**为测试类或测试方法提供扩展类引用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test; <span class="comment">//注意这里使用的是jupiter的Test注解！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@DisplayName(&quot;第一次测试&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3、断言（assertions）"><a href="#3、断言（assertions）" class="headerlink" title="3、断言（assertions）"></a>3、断言（assertions）</h3><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。JUnit 5 内置的断言可以分成如下几个类别：</p><p><strong>检查业务逻辑返回的数据是否合理。</strong></p><p><strong>所有的测试运行结束以后，会有一个详细的测试报告；</strong></p><ol><li>简单断言<br>用来对单个值进行简单的验证。如：</li></ol><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@DisplayName(&quot;simple assertion&quot;)</span><br><span class="line">public void simple() &#123;</span><br><span class="line">     assertEquals(3, 1 + 2, &quot;simple math&quot;);</span><br><span class="line">     assertNotEquals(3, 1 + 1);</span><br><span class="line"></span><br><span class="line">     assertNotSame(new Object(), new Object());</span><br><span class="line">     Object obj = new Object();</span><br><span class="line">     assertSame(obj, obj);</span><br><span class="line"></span><br><span class="line">     assertFalse(1 &gt; 2);</span><br><span class="line">     assertTrue(1 &lt; 2);</span><br><span class="line"></span><br><span class="line">     assertNull(null);</span><br><span class="line">     assertNotNull(new Object());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>数组断言<br>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@DisplayName(&quot;array assertion&quot;)</span><br><span class="line">public void array() &#123;</span><br><span class="line"> assertArrayEquals(new int[]&#123;1, 2&#125;, new int[] &#123;1, 2&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>组合断言<br>IassertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@DisplayName(&quot;assert all&quot;)</span><br><span class="line">public void all() &#123;</span><br><span class="line"> assertAll(&quot;Math&quot;,</span><br><span class="line">    () -&gt; assertEquals(2, 1 + 1),</span><br><span class="line">    () -&gt; assertTrue(1 &gt; 0)</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>异常断言<br>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@DisplayName(&quot;异常测试&quot;)</span><br><span class="line">public void exceptionTest() &#123;</span><br><span class="line">    ArithmeticException exception = Assertions.assertThrows(</span><br><span class="line">           //扔出断言异常</span><br><span class="line">            ArithmeticException.class, () -&gt; System.out.println(1 % 0));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>超时断言<br>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@DisplayName(&quot;超时测试&quot;)</span><br><span class="line">public void timeoutTest() &#123;</span><br><span class="line">    //如果测试方法时间超过1s将会异常</span><br><span class="line">    Assertions.assertTimeout(Duration.ofMillis(1000), () -&gt; Thread.sleep(500));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>快速失败<br>通过 fail 方法直接使得测试失败</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">@DisplayName(&quot;fail&quot;)</span><br><span class="line">public void shouldFail() &#123;</span><br><span class="line"> fail(&quot;This should fail&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、前置条件"><a href="#4、前置条件" class="headerlink" title="4、前置条件"></a>4、前置条件</h3><p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@DisplayName(&quot;前置条件&quot;)</span><br><span class="line">public class AssumptionsTest &#123;</span><br><span class="line"> private final String environment = &quot;DEV&quot;;</span><br><span class="line"> </span><br><span class="line"> @Test</span><br><span class="line"> @DisplayName(&quot;simple&quot;)</span><br><span class="line"> public void simpleAssume() &#123;</span><br><span class="line">    assumeTrue(Objects.equals(this.environment, &quot;DEV&quot;));</span><br><span class="line">    assumeFalse(() -&gt; Objects.equals(this.environment, &quot;PROD&quot;));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> @Test</span><br><span class="line"> @DisplayName(&quot;assume then do&quot;)</span><br><span class="line"> public void assumeThenDo() &#123;</span><br><span class="line">    assumingThat(</span><br><span class="line">       Objects.equals(this.environment, &quot;DEV&quot;),</span><br><span class="line">       () -&gt; System.out.println(&quot;In DEV&quot;)</span><br><span class="line">    );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h3 id="5、嵌套测试"><a href="#5、嵌套测试" class="headerlink" title="5、嵌套测试"></a>5、嵌套测试</h3><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">@DisplayName(&quot;A stack&quot;)</span><br><span class="line">class TestingAStackDemo &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    @DisplayName(&quot;is instantiated with new Stack()&quot;)</span><br><span class="line">    void isInstantiatedWithNew() &#123;</span><br><span class="line">        new Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nested</span><br><span class="line">    @DisplayName(&quot;when new&quot;)</span><br><span class="line">    class WhenNew &#123;</span><br><span class="line"></span><br><span class="line">        @BeforeEach</span><br><span class="line">        void createNewStack() &#123;</span><br><span class="line">            stack = new Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Test</span><br><span class="line">        @DisplayName(&quot;is empty&quot;)</span><br><span class="line">        void isEmpty() &#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Test</span><br><span class="line">        @DisplayName(&quot;throws EmptyStackException when popped&quot;)</span><br><span class="line">        void throwsExceptionWhenPopped() &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Test</span><br><span class="line">        @DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span><br><span class="line">        void throwsExceptionWhenPeeked() &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Nested</span><br><span class="line">        @DisplayName(&quot;after pushing an element&quot;)</span><br><span class="line">        class AfterPushing &#123;</span><br><span class="line"></span><br><span class="line">            String anElement = &quot;an element&quot;;</span><br><span class="line"></span><br><span class="line">            @BeforeEach</span><br><span class="line">            void pushAnElement() &#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Test</span><br><span class="line">            @DisplayName(&quot;it is no longer empty&quot;)</span><br><span class="line">            void isNotEmpty() &#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Test</span><br><span class="line">            @DisplayName(&quot;returns the element when popped and is empty&quot;)</span><br><span class="line">            void returnElementWhenPopped() &#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Test</span><br><span class="line">            @DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span><br><span class="line">            void returnElementWhenPeeked() &#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、参数化测试"><a href="#6、参数化测试" class="headerlink" title="6、参数化测试"></a>6、参数化测试</h3><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li>@ValueSource**: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型**</li><li>@NullSource**: 表示为参数化测试提供一个null的入参**</li><li>@EnumSource**: 表示为参数化测试提供一个枚举入参**</li><li>@CsvFileSource<strong>：表示读取指定CSV文件内容作为参数化测试入参</strong></li><li>@MethodSource<strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</strong></li></ul><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@ParameterizedTest</span><br><span class="line">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span><br><span class="line">@DisplayName(&quot;参数化测试1&quot;)</span><br><span class="line">public void parameterizedTest1(String string) &#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ParameterizedTest</span><br><span class="line">@MethodSource(&quot;method&quot;)    //指定方法名</span><br><span class="line">@DisplayName(&quot;方法来源参数&quot;)</span><br><span class="line">public void testWithExplicitLocalMethodSource(String name) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    Assertions.assertNotNull(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static Stream&lt;String&gt; method() &#123;</span><br><span class="line">    return Stream.of(&quot;apple&quot;, &quot;banana&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、迁移指南"><a href="#7、迁移指南" class="headerlink" title="7、迁移指南"></a>7、迁移指南</h3><p>在进行迁移的时候需要注意如下的变化：</p><ul><li><p>注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。</p></li><li><p>把@Before 和@After 替换成@BeforeEach 和@AfterEach。</p></li><li><p>把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。</p></li><li><p>把@Ignore 替换成@Disabled。</p></li><li><p>把@Category 替换成@Tag。</p></li><li><p>把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</p></li></ul><h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><h3 id="1-SpringBootActuator"><a href="#1-SpringBootActuator" class="headerlink" title="1. SpringBootActuator"></a>1. SpringBootActuator</h3><ol><li><p>简介：未来微服务在云上部署以后，需要对其进行监控、追踪、审计、控制等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>1.x与2.x的区别：<br><img src="/2021/07/04/springBoot2/1606884394162-ac7f2d8e-7abb-44df-9998-fb0f2705f238.png" alt="image.png"></p></li><li><p>如何使用：</p><ul><li><p>引入场景</p></li><li><p>访问：<a href="http://localhost:8080/actuator/">http://localhost:8080/actuator/</a>**</p></li><li><p>暴露所有监控信息为HTTP：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span>  <span class="comment">#以web方式暴露</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>可视化：<br><a href="https://github.com/codecentric/spring-boot-admin">https://github.com/codecentric/spring-boot-admin</a></p></li></ol><h3 id="2-Actuator-Endpoint"><a href="#2-Actuator-Endpoint" class="headerlink" title="2. Actuator Endpoint"></a>2. Actuator Endpoint</h3><ol><li>常用端点：</li></ol><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td></tr><tr><td><code>conditions</code></td><td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td></tr><tr><td><code>configprops</code></td><td>显示所有<code>@ConfigurationProperties</code>。</td></tr><tr><td><code>env</code></td><td>暴露Spring的属性<code>ConfigurableEnvironment</code></td></tr><tr><td><code>flyway</code></td><td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td></tr><tr><td><code>health</code></td><td>显示应用程序运行状况信息。</td></tr><tr><td><code>httptrace</code></td><td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td></tr><tr><td><code>integrationgraph</code></td><td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志的配置。</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的“指标”信息。</td></tr><tr><td><code>mappings</code></td><td>显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的计划任务。</td></tr><tr><td><code>sessions</code></td><td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td></tr><tr><td><code>shutdown</code></td><td>使应用程序正常关闭。默认禁用。</td></tr><tr><td><code>startup</code></td><td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td></tr><tr><td><code>threaddump</code></td><td>执行线程转储。</td></tr></tbody></table><p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回<code>hprof</code>堆转储文件。</td></tr><tr><td><code>jolokia</code></td><td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td></tr><tr><td><code>prometheus</code></td><td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td></tr></tbody></table><p>最常用的Endpoint</p><ul><li><p><strong>Health：监控状况</strong></p></li><li><p><strong>Metrics：运行时指标</strong></p></li><li><p><strong>Loggers：日志记录</strong></p></li></ul><ol start="2"><li>Health Endpoint</li></ol><p>健康检查端点，我们一般用于在云平台，平台会定时的检查应用的健康状况，我们就需要Health Endpoint可以为平台返回当前应用的一系列组件健康状况的集合。</p><p>重要的几点：</p><ul><li><p>health endpoint返回的结果，应该是一系列健康检查后的一个汇总报告</p></li><li><p>很多的健康检查默认已经自动配置好了，比如：数据库、redis等</p></li><li><p>可以很容易的添加自定义的健康检查机制</p></li></ul><ol start="3"><li>Metrics Endpoint</li></ol><p>提供详细的、层级的、空间指标信息，这些信息可以被pull（主动推送）或者push（被动获取）方式得到；</p><ul><li><p>通过Metrics对接多种监控系统</p></li><li><p>简化核心Metrics开发</p></li><li><p>添加自定义Metrics或者扩展已有Metrics</p></li></ul><ol start="4"><li><p>管理Endpoints</p><ol><li><p>开启与禁用Endpoints</p><ul><li><p>默认所有的Endpoint除过shutdown都是开启的。</p></li><li><p>需要开启或者禁用某个Endpoint。配置模式为  **management.endpoint.**&lt;endpointName&gt;.enabled = true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">beans:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>或者禁用所有的Endpoint然后手动开启指定的Endpoint</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">beans:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><pre><code>   2.    暴露Endpoints         支持的暴露方式         * HTTP：默认只暴露**health**和**info** Endpoint         * **JMX**：默认暴露所有Endpoint         * 除过health和info，剩下的Endpoint都应该进行保护访问。如果引入SpringSecurity，则会默认配置安全访问规则</code></pre></li></ul></li></ol></li></ol><table><thead><tr><th>ID</th><th>JMX</th><th>Web</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>Yes</td><td>No</td></tr><tr><td><code>beans</code></td><td>Yes</td><td>No</td></tr><tr><td><code>caches</code></td><td>Yes</td><td>No</td></tr><tr><td><code>conditions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>configprops</code></td><td>Yes</td><td>No</td></tr><tr><td><code>env</code></td><td>Yes</td><td>No</td></tr><tr><td><code>flyway</code></td><td>Yes</td><td>No</td></tr><tr><td><code>health</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>heapdump</code></td><td>N/A</td><td>No</td></tr><tr><td><code>httptrace</code></td><td>Yes</td><td>No</td></tr><tr><td><code>info</code></td><td>Yes</td><td>Yes</td></tr><tr><td><code>integrationgraph</code></td><td>Yes</td><td>No</td></tr><tr><td><code>jolokia</code></td><td>N/A</td><td>No</td></tr><tr><td><code>logfile</code></td><td>N/A</td><td>No</td></tr><tr><td><code>loggers</code></td><td>Yes</td><td>No</td></tr><tr><td><code>liquibase</code></td><td>Yes</td><td>No</td></tr><tr><td><code>metrics</code></td><td>Yes</td><td>No</td></tr><tr><td><code>mappings</code></td><td>Yes</td><td>No</td></tr><tr><td><code>prometheus</code></td><td>N/A</td><td>No</td></tr><tr><td><code>scheduledtasks</code></td><td>Yes</td><td>No</td></tr><tr><td><code>sessions</code></td><td>Yes</td><td>No</td></tr><tr><td><code>shutdown</code></td><td>Yes</td><td>No</td></tr><tr><td><code>startup</code></td><td>Yes</td><td>No</td></tr><tr><td><code>threaddump</code></td><td>Yes</td><td>No</td></tr></tbody></table><h3 id="3、定制-Endpoint"><a href="#3、定制-Endpoint" class="headerlink" title="3、定制 Endpoint"></a>3、定制 Endpoint</h3><ol><li>定制 Health 信息</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.actuate.health.Health;</span><br><span class="line">import org.springframework.boot.actuate.health.HealthIndicator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class MyHealthIndicator implements HealthIndicator &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Health health() &#123;</span><br><span class="line">        int errorCode = check(); // perform some specific health check</span><br><span class="line">        if (errorCode != 0) &#123;</span><br><span class="line">            return Health.down().withDetail(&quot;Error Code&quot;, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line">        return Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">构建Health</span><br><span class="line">Health build = Health.down()</span><br><span class="line">                .withDetail(&quot;msg&quot;, &quot;error service&quot;)</span><br><span class="line">                .withDetail(&quot;code&quot;, &quot;500&quot;)</span><br><span class="line">                .withException(new RuntimeException())</span><br><span class="line">                .build();</span><br><span class="line">management:</span><br><span class="line">    health:</span><br><span class="line">      enabled: true</span><br><span class="line">      show-details: always #总是显示详细信息。可显示每个模块的状态信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MyComHealthIndicator extends AbstractHealthIndicator &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 真实的检查方法</span><br><span class="line">     * @param builder</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void doHealthCheck(Health.Builder builder) throws Exception &#123;</span><br><span class="line">        //mongodb。  获取连接进行测试</span><br><span class="line">        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        // 检查完成</span><br><span class="line">        if(1 == 2)&#123;</span><br><span class="line">//            builder.up(); //健康</span><br><span class="line">            builder.status(Status.UP);</span><br><span class="line">            map.put(&quot;count&quot;,1);</span><br><span class="line">            map.put(&quot;ms&quot;,100);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">//            builder.down();</span><br><span class="line">            builder.status(Status.OUT_OF_SERVICE);</span><br><span class="line">            map.put(&quot;err&quot;,&quot;连接超时&quot;);</span><br><span class="line">            map.put(&quot;ms&quot;,3000);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        builder.withDetail(&quot;code&quot;,100)</span><br><span class="line">                .withDetails(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>定制info信息<br>常用两种方式</p><ul><li><p>编写配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">boot-admin</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">mavenProjectName:</span> <span class="string">@project.artifactId@</span>  <span class="comment">#使用@@可以获取maven的pom文件值</span></span><br><span class="line">  <span class="attr">mavenProjectVersion:</span> <span class="string">@project.version@</span></span><br></pre></td></tr></table></figure></li><li><p>编写InfoContributor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.Info;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleInfoContributor</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Info.Builder builder)</span> </span>&#123;</span><br><span class="line">        builder.withDetail(<span class="string">&quot;example&quot;</span>,</span><br><span class="line">                Collections.singletonMap(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a> 会输出以上方式返回的所有info信息</p></li></ul></li><li><p>定制Metrics信息</p><ol><li><p>SpringBoot支持自动适配的Metrics</p><ul><li>JVM metrics, report utilization of:</li><li>Various memory and buffer pools</li><li>Statistics related to garbage collection</li><li>Threads utilization</li><li>Number of classes loaded/unloaded</li><li>CPU metrics</li><li>File descriptor metrics</li><li>Kafka consumer and producer metrics</li><li>Log4j2 metrics: record the number of events logged to Log4j2 at each level</li><li>Logback metrics: record the number of events logged to Logback at each level</li><li>Uptime metrics: report a gauge for uptime and a fixed gauge representing the application’s absolute start time</li><li>Tomcat metrics (<code>server.tomcat.mbeanregistry.enabled</code> must be set to <code>true</code> for all Tomcat metrics to be registered)</li><li><a href="https://docs.spring.io/spring-integration/docs/5.4.1/reference/html/system-management.html#micrometer-integration">Spring Integration</a> metrics</li></ul></li><li><p>增加定制Metrics</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyService</span></span>&#123;</span><br><span class="line">    Counter counter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">(MeterRegistry meterRegistry)</span></span>&#123;</span><br><span class="line">         counter = meterRegistry.counter(<span class="string">&quot;myservice.method.running.counter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counter.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以使用下面的方式</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">MeterBinder <span class="title">queueSize</span><span class="params">(Queue queue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (registry) -&gt; Gauge.builder(<span class="string">&quot;queueSize&quot;</span>, queue::size).register(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>定制Endpoint</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;container&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DockerEndpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getDockerInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonMap(<span class="string">&quot;info&quot;</span>,<span class="string">&quot;docker started...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@WriteOperation</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restartDocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;docker restarted....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>场景：开发<strong>ReadinessEndpoint</strong>来管理程序是否就绪，或者<strong>Liveness****Endpoint</strong>来管理程序是否存活；</p><p>当然，这个也可以直接使用 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes</a></p><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><h3 id="1、Profile功能"><a href="#1、Profile功能" class="headerlink" title="1、Profile功能"></a>1、Profile功能</h3><p>为了方便多环境适配，springboot简化了profile功能。</p><ol><li><p>application-profile功能</p><ul><li>默认配置文件  application.yaml；任何时候都会加载</li><li>指定环境配置文件  application-{env}.yaml</li><li>激活指定环境</li><li>配置文件激活</li><li>命令行激活：java -jar xxx.jar –<strong>spring.profiles.active=prod  –person.name=haha</strong></li><li><strong>修改配置文件的任意值，命令行优先</strong></li><li>默认配置与环境配置同时生效</li><li>同名配置项，profile配置优先</li></ul></li><li><p>ofile条件装配功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Profile(&quot;production&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>profile分组</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.profiles.group.production[0]=proddb</span></span><br><span class="line"><span class="string">spring.profiles.group.production[1]=prodmq</span></span><br><span class="line"></span><br><span class="line"><span class="string">使用：--spring.profiles.active=production</span>  <span class="string">激活</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2、外部化配置"><a href="#2、外部化配置" class="headerlink" title="2、外部化配置"></a>2、外部化配置</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p><ol><li><p>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</p></li><li><p><code>@PropertySource</code> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</p></li><li><p><strong>Config data (such as</strong> <code>**application.properties**</code> <strong>files)</strong></p></li><li><p>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</p></li><li><p>OS environment variables.</p></li><li><p>Java System properties (<code>System.getProperties()</code>).</p></li><li><p>JNDI attributes from <code>java:comp/env</code>.</p></li><li><p><code>ServletContext</code> init parameters.</p></li><li><p><code>ServletConfig</code> init parameters.</p></li><li><p>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</p></li><li><p>Command line arguments.</p></li><li><p><code>properties</code> attribute on your tests. Available on <code>@SpringBootTest</code> and the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests">test annotations for testing a particular slice of your application</a>.</p></li><li><p><code>@TestPropertySource</code> annotations on your tests.</p></li><li><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools-globalsettings">Devtools global settings properties</a> in the <code>$HOME/.config/spring-boot</code> directory when devtools is active.</p></li></ol><ol><li><p>外部配置源<br>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p></li><li><p>配置文件查找位置</p><ul><li>(1) classpath 根路径</li><li>(2) classpath 根路径下config目录</li><li>(3) jar包当前目录</li><li>(4) jar包当前目录的config目录</li><li>(5) /config子目录的直接子目录</li></ul></li><li><p>配置文件加载顺序：</p><ol><li>当前jar包内部的application.properties和application.yml</li><li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml</li><li>引用的外部jar包的application.properties和application.yml</li><li>引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml</li></ol></li><li><p>指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</p></li></ol><h3 id="3、自定义starter"><a href="#3、自定义starter" class="headerlink" title="3、自定义starter"></a>3、自定义starter</h3><ol><li><p>starter启动原理</p><ul><li>starter-pom引入 autoconfigurer 包<br><img src="/2021/07/04/springBoot2/1606995919308-b2c7ccaa-e720-4cc5-9801-2e170b3102e1.png" alt="img"></li><li>autoconfigure包中配置使用 <strong>META-INF/spring.factories</strong> 中 <strong>EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</strong></li><li><strong>编写自动配置类 xxxAutoConfiguration -&gt; xxxxProperties</strong></li><li><strong>@Configuration</strong></li><li><strong>@Conditional</strong></li><li><strong>@EnableConfigurationProperties</strong></li><li><strong>@Bean</strong></li><li>……<br><strong>引入starter</strong> <strong>— xxxAutoConfiguration — 容器中放入组件 —- 绑定xxxProperties —-</strong> <strong>配置项</strong></li></ul></li><li><p>自定义starter<br><strong>atguigu-hello-spring-boot-starter（启动器）</strong><br><strong>atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）</strong></p></li></ol><h3 id="4、SpringBoot原理"><a href="#4、SpringBoot原理" class="headerlink" title="4、SpringBoot原理"></a>4、SpringBoot原理</h3><p>Spring原理【<a href="https://www.bilibili.com/video/BV1gW411W7wy?p=1">Spring注解</a>】、<strong>SpringMVC</strong>原理、<strong>自动配置原理</strong>、SpringBoot原理</p><ol><li><p>SpringBoot启动过程</p><ul><li>创建 <strong>SpringApplication</strong></li><li>保存一些信息。</li><li>判定当前应用的类型。ClassUtils。Servlet</li><li><strong>bootstrappers****：初始启动引导器（</strong>List<Bootstrapper><strong>）：去spring.factories文件中找</strong> org.springframework.boot.<strong>Bootstrapper</strong></Bootstrapper></li><li>找 <strong>ApplicationContextInitializer</strong>；去<strong>spring.factories找 ApplicationContextInitializer</strong></li><li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializers</strong></li><li><strong>找</strong> <strong>ApplicationListener  ；应用监听器。</strong>去<strong>spring.factories找ApplicationListener</strong></li><li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li><li>运行 <strong>SpringApplication</strong>、<strong>StopWatch</strong></li><li><strong>记录应用的启动时间</strong></li><li><strong>创建引导上下文（Context环境）createBootstrapContext()</strong></li><li>获取到所有之前的 <strong>bootstrappers 挨个执行</strong> intitialize() 来完成对引导启动器上下文环境设置</li><li>让当前应用进入<strong>headless</strong>模式。<strong>java.awt.headless</strong></li><li><strong>获取所有</strong> *<em>RunListener</em>***（运行监听器）【为了方便所有Listener进行事件感知】</li><li><strong>getSpringFactoriesInstances 去</strong>spring.factories找** <strong>SpringApplicationRunListener</strong>. </li><li>遍历 <strong>SpringApplicationRunListener 调用 starting 方法；</strong></li><li><strong>相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</strong></li><li>保存命令行参数；ApplicationArguments</li><li>准备环境 prepareEnvironment（）;</li><li>返回或者创建基础环境信息对象。<strong>StandardServletEnvironment</strong></li><li><strong>配置环境信息对象。</strong></li><li><strong>读取所有的配置源的配置属性值。</strong></li><li>绑定环境信息</li><li>监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成</li><li>创建IOC容器（createApplicationContext（））</li><li>根据项目类型（Servlet）创建容器，</li><li>当前会创建 <strong>AnnotationConfigServletWebServerApplicationContext</strong></li><li><strong>准备ApplicationContext IOC容器的基本信息</strong>  <strong>prepareContext()</strong></li><li>保存环境信息</li><li>IOC容器的后置处理流程。</li><li>应用初始化器；applyInitializers；</li><li>遍历所有的 <strong>ApplicationContextInitializer 。调用</strong> <strong>initialize.。来对ioc容器进行初始化扩展功能</strong></li><li>遍历所有的 listener 调用 *<em>contextPrepared。EventPublishRunListenr；通知所有的监听器</em>***contextPrepared</li><li>所有的监听器 调用** <strong>contextLoaded。通知所有的监听器</strong> <strong>contextLoaded；</strong></li><li><strong>刷新IOC容器。</strong>refreshContext</li><li>创建容器中的所有组件（Spring注解）</li><li>容器刷新完成后工作？afterRefresh</li><li>所有监听 器 调用 listeners.<strong>started</strong>(context); <strong>通知所有的监听器</strong> <strong>started</strong></li><li><strong>调用所有runners；</strong>callRunners()</li><li><strong>获取容器中的</strong> <strong>ApplicationRunner</strong> </li><li><strong>获取容器中的</strong>  <strong>CommandLineRunner</strong></li><li>**合并所有runner并且按照@Order进行排序</li><li>遍历所有的runner。调用 run** <strong>方法</strong></li><li><strong>如果以上有异常，</strong></li><li><strong>调用Listener 的 failed</strong></li><li><strong>调用所有监听器的 running 方法</strong>  listeners.running(context); <strong>通知所有的监听器</strong> <strong>running</strong> </li><li><strong>running如果有问题。继续通知 failed 。调用所有 Listener 的</strong> <strong>failed；****通知所有的监听器</strong> <strong>failed</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bootstrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the given &#123;<span class="doctag">@link</span> BootstrapRegistry&#125; with any required registrations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry the registry to initialize</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intitialize</span><span class="params">(BootstrapRegistry registry)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback used to run the bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args incoming application arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback used to run the bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args incoming main method arguments</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Application Events and Listeners</p></li></ol><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners</a></p><ul><li><strong>ApplicationContextInitializer</strong></li><li><strong>ApplicationListener</strong></li><li><strong>SpringApplicationRunListener</strong></li></ul><ol start="3"><li>ApplicationRunner 与 CommandLineRunner</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://www.yuque.com/atguigu/springboot&quot;&gt;https://www.yuque.com/atguigu/springboot&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;h</summary>
      
    
    
    
    <category term="java" scheme="https://stary1999.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://stary1999.github.io/tags/java/"/>
    
    <category term="框架" scheme="https://stary1999.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="SpringBoot2" scheme="https://stary1999.github.io/tags/SpringBoot2/"/>
    
  </entry>
  
  <entry>
    <title>git和GitHub的使用</title>
    <link href="https://stary1999.github.io/2021/07/04/gitAndGitHub/"/>
    <id>https://stary1999.github.io/2021/07/04/gitAndGitHub/</id>
    <published>2021-07-04T02:18:56.000Z</published>
    <updated>2021-07-04T09:12:30.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>git：分布式版本控制，区别于集中式版本控制。</p><p>版本控制在本地进行。需要远程库协同，进行代码的克隆与推送。不再需要担心单点服务器故障（集中式）。</p><p>常见代码仓库：github、gitee（码云）。。。</p><p>工作区（git add）-暂存区（git commit）-本地库（生成历史版本）（git push）-远程库</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>注意非中文无空格目录下。</p><p>windows和linux中换行符不一样。</p><p>无脑安装。</p><p>打开git bush ，ctrl+滚轮调整字体大小。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>设置用户签名</td><td></td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志消息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><p><strong>首次安装git必须设置用户签名</strong></p><p>用于区分不同的代码提交者（与远程仓库账号没有关系）</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>选择一个文件夹，运行<code>git init</code>，生成<code>.git</code>的隐藏文件，查看本地库状态<code>git status</code>,</p><p>vim中，<code>yy</code>复制，<code>p</code>粘贴</p><p><code>ll</code>查看文件。</p><p><code>git add [名字]</code> 添加到暂存区，追踪文件。此时可以删除文件。<code>git rm --cached [文件名]</code>删除暂存区文件，此时工作区不受影响。</p><p><code>git commit -m &quot;提交信息&quot; [文件名]</code> 提交到本地库</p><p><code>git log</code>查看详细日志消息</p><p>git中按行记录文件信息</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>命令：</p><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch [branch name]</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout [branch name]</td><td>切换分支</td></tr><tr><td>git merge [branch name]</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><p>**合并分支时注意代码冲突 **</p><h2 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h2><p><code>git push</code> 推送到远程库</p><p><code>git clone</code> 拉取远程库</p><p><code>git pull</code> 对本地库进行更新</p><p><code>fork</code>从别的远程库获取所有的历史和记录到自己的远程库。<code>pull request</code> 拉取请求</p><p><img src="/2021/07/04/gitAndGitHub/image-20210704144737803.png" alt="image-20210704144737803"></p><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h4 id="上传到远地库"><a href="#上传到远地库" class="headerlink" title="上传到远地库"></a>上传到远地库</h4><p><strong>远程库的名字最好和当前的本地库的名字相同</strong></p><p><code>git remote -v</code> 查看当前的别名</p><p><code>git remote add [name][链接]</code>创建别名，替换链接</p><p><code>git push [name]/[链接] [branch name]</code> 推送是以分支为单位的 推送整个分支到仓库</p><h4 id="拉取远程库到本地库"><a href="#拉取远程库到本地库" class="headerlink" title="拉取远程库到本地库"></a>拉取远程库到本地库</h4><p><code>git pull [name]/[链接] [branch name]</code></p><p><code>git clone [链接] [branch name]</code> 克隆代码不需要登录，且会自动创建别名</p><h4 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h4><p>fork 和pull request</p><h4 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h4><p>添加ssh</p><p>参见hexo篇</p><h1 id="idea集成git"><a href="#idea集成git" class="headerlink" title="idea集成git"></a>idea集成git</h1><h2 id="配置忽略文件"><a href="#配置忽略文件" class="headerlink" title="配置忽略文件"></a>配置忽略文件</h2><p><strong>why</strong>：与实际项目功能无关，不参与服务器上部署运行，例如idea的配置文件等。一般项目只需要源码（src+pom.xml）,屏蔽ide工具之间的差异</p><p><strong>注意项目的导入方式</strong>，例如maven的导入方式。</p><p><strong>how</strong>：创建忽略规则文件：XXX.ignore(建议：git.ignore)，建议放置在用户家目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ file</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools for Java(J2EE)</span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># Virtual machine crash logs,see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure><p>在.gitconfig文件中引用忽略配置文件。.gitconfig文件在用户根目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line">[core]</span><br><span class="line">excludesfile=C:/Users/[name]/git.ignore</span><br></pre></td></tr></table></figure><p><em><strong>注意需要使用斜线，不能使用反斜线</strong></em></p><h2 id="idea中使用"><a href="#idea中使用" class="headerlink" title="idea中使用"></a>idea中使用</h2><h3 id="定位git"><a href="#定位git" class="headerlink" title="定位git"></a>定位git</h3><p>新建项目-&gt;settings-&gt;version control-&gt;git-&gt;path to git executable。设置git的安装目录，”Test”进行测试，直到idea识别到git。至此，准备环境完毕</p><h3 id="让Git管理程序"><a href="#让Git管理程序" class="headerlink" title="让Git管理程序"></a>让Git管理程序</h3><p>VCS（Version control settings）-&gt;Import into Version Control -&gt;Create git repository。创建git的本地库。</p><p>当idea中的文件变<strong>红</strong>时，代表git托管成功，此时表示此文件未添加到暂存区。<strong>绿色</strong>文件代表已添加到暂存区，但为提交到本地库。<strong>此时的状态不影响代码的执行</strong>。文件名变为<strong>黑色</strong>，表示此时不需要操作。<strong>蓝色</strong>的文件表示提交过，但发生了修改。</p><p>存到暂存区：</p><ol><li>右键文件，git，add</li></ol><p>提交到本地库：</p><ol><li>右键文件，git，commit directory，添加提交信息，commit。</li></ol><h3 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h3><p>查看版本：idea左下角，version control</p><p>切换版本：选择需要切换的版本，右键，checkout Reversion [版本号]</p><h3 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h3><p>创建分支：</p><ol><li> 右键项目名，git，Repository，branches 。new branch。</li><li>右下角，git [branch name]</li></ol><p>切换分支同理</p><p>分支合并：</p><ol><li>正常合并：Merge into Current，</li><li>代码冲突：两个都修改的分支进行合并。Merge手动合并。x表示不要这部分代码，箭头表示需要这部分代码。变黑表示合并成功并主动提交。</li></ol><h2 id="idea集成"><a href="#idea集成" class="headerlink" title="idea集成"></a>idea集成</h2><p>settings，Version control，github（若没有github，点击plugs，下载github插件），</p><p>在github中设置github账号，右侧加号，登录账号。建议使用口令的方式登录（use token）</p><h3 id="项目上传到github"><a href="#项目上传到github" class="headerlink" title="项目上传到github"></a>项目上传到github</h3><p>VCS，import into Version control,share project on github。将自己的工程分项到远程库。===自动创建远程库+上传</p><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><p>pull、push、clone：</p><ol><li>右键，git，repository</li><li>VCS，git</li></ol><p>默认使用http协议，建议使用ssh协议（网络原因）</p><p>push，项目名，Define Remote，加入ssh连接为url。</p><p>push操作：本地库版本一定得比远程库版本高，否则会失败。若本地库代码已经落后，需要先pull拉取远程代码，将本地代码更新到最新之后，在修改，提交，推送。即：<strong>push之前，先pull</strong>。</p><p>拉取前需要注意本地代码是否修改，否则拉取过程中容易出现<strong>冲突</strong></p><p><strong>clone</strong>代码到本地库：</p><p>​    打开idea，首页：get from Version Control，填入连接</p><h2 id="git（码云）"><a href="#git（码云）" class="headerlink" title="git（码云）"></a>git（码云）</h2><p>开源中国推出的，基于git的代码托管项目。中文友好</p><p>和github类似。</p><p>码云国内http使用方便。</p><h3 id="github项目迁移到gitee"><a href="#github项目迁移到gitee" class="headerlink" title="github项目迁移到gitee"></a>github项目迁移到gitee</h3><p>gitee，新建仓库，导入已有仓库，放入github链接，注意选择https协议。</p><p>github中项目更新后，在gitee中选择强制更新（项目名称后面的更新按钮）。</p><h1 id="gitlab搭建"><a href="#gitlab搭建" class="headerlink" title="gitlab搭建"></a>gitlab搭建</h1><p>使用基于MIT许可证的基于网络的Git仓库管理工具。使用Git作为代码管理工具的web项目。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>官网，install Gitlab，</p><p>需要有服务器（高版本的服务器）</p><p>“ee”表示旗舰版，“ce”表示免费社区版。</p><p>修改linux ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifconfig-ens33</span><br></pre></td></tr></table></figure><p>修改主机名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/hostsname</span><br></pre></td></tr></table></figure><p>此外，还需要修改windows中的hosts，将linux的ip地址和主机名加入。</p><p>前期准备完成后，安装步骤参考官网</p><p>初始化gitlab服务，成功标志，gitlab reconfigure</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>启动gitlab服务，停止命令（<code>gitlab-ctl stop</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start</span><br></pre></td></tr></table></figure><p>启动成功后，浏览器访问</p><ol><li>ip访问，默认为80端口</li><li>主机名访问，需要配置windows的hosts</li></ol><p>登录成功后，首先需要修改root密码</p><p>使用root登录后，正常使用</p><h2 id="idea集成gitlab"><a href="#idea集成gitlab" class="headerlink" title="idea集成gitlab"></a>idea集成gitlab</h2><p>安装插件gitlab</p><p>version control，gitlab</p><p>使用详情参考github</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;git：分布式版本控制，区别于集中式版本控制。&lt;/p&gt;
&lt;p&gt;版本控制在本地进行。需要远程库协同，进行代码的克隆与推送。不再需要担心单点服务</summary>
      
    
    
    
    <category term="工具" scheme="https://stary1999.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://stary1999.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="https://stary1999.github.io/tags/git/"/>
    
    <category term="github" scheme="https://stary1999.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>未来网络技术课程设计小结</title>
    <link href="https://stary1999.github.io/2021/07/04/SDNnetANDDDos/"/>
    <id>https://stary1999.github.io/2021/07/04/SDNnetANDDDos/</id>
    <published>2021-07-04T02:18:24.000Z</published>
    <updated>2021-07-04T04:58:14.404Z</updated>
    
    <content type="html"><![CDATA[<p>博客内容为课设个人小结，具体课设参考课设报告</p><h1 id="资料查找"><a href="#资料查找" class="headerlink" title="资料查找"></a>资料查找</h1><p>这次课设的题目是在老师给的题目中四选一，在初步选定做DDos的检测与防御之后，就需要在网络上查询相关的资料、以及前人的设计方案，最初使用搜索引擎直接搜索关键字和题目，经过筛选后，有用的结果主要就一篇博文，其他的大多是类似的内容，博文写得比较详细，但是设计方案比较简略，无法有效地达到实现目的要求（自主检测与防御）。</p><p>从这，可以看出，从事相关方面的研究的人并不是太多，至少没有广泛的编写博客并被搜索引擎检测到。不过，值得注意的是，同等的筛选条件下，google比百度的结果要好很多，当然，不能否认百度的搜索结果更加贴近日常生活中，比较符合国人习惯，但是如果需要查询专业一些的资料、文献的话，还是优先考虑google、bing等搜索引擎。至于国内其他的搜索引擎，例如搜狗、360、神马等，在资料收集方面，甚至还不如百度。</p><p>其次是很多资料并不一定会被搜索引擎所检索到，需要到专门的论坛、网站去搜索，这方面也是google比百度强的一个因素。对于一个比较热门的技术或实现架构，可以尝试在B站或者知乎、CSDN上寻找相关的教学视频、博文。但如果这几个地方都找不到的话，就需要去相关工具的官网，或者github上寻找相关的项目，现在许多开源的项目都把代码托管到了github上，可以在上面查看使用说明、官方文档，遇到问题的时候，在github的issue上面找找，或许能够解决问题。</p><p>最重要也是难度比较高的资料收集方式，便是查找论文，不过论文主要对于不需要太大代码量的设计比较友好，对于需要大量编程来实现的项目，通过论文的方式只能获取实现的思路与基本算法，具体代码实现仍旧是一个十分困难的事儿，所以，对于项目而言，最佳的方式仍旧是官网和使用手册。其次是YouTube，YouTube类似B站，可以在上面找到许多相关的教学视频。</p><p>对于it行业来说，前言的技术、架构，多是国外开发的，代码也是英文编写的，所以英语在编程的学习过程中至关重要，因为使用手册大概率是英文的、官网也很有可能是英文的，代码肯定是英文的，而代码中的注释也大概率是英文的。所以，在遇到不懂的东西的时候，需要查找东西的时候，你所查询得到的结果，大概率也是英文。对于非英语母语的我而言，看下去，是最困难的一件事，但是却必须坚持看下去，值得一提的是，google翻译很好用，但是很多时候，自动翻译的情况下，它会将一些很重要的信息也给翻译成中文，所以，如果时间允许的情况下，最好还是直接看英文原文。</p><h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><p>工具的使用一般网上都有教程，大多时候跟着教程一步一步走即可，但是这里面最容易出现却又最容易忽略的问题，便是版本问题。</p><p>在进行仿真实验等的过程中，往往需要同时使用多个工具进行协同，如果版本没有控制好，极大可能造成，每一步都是正确的，但是合起来就不正确了。</p><p>Example：本次实验需要用到的工具主要有，VMware、Ubuntu、mininet、floodligh、sFlow。大体流程是在VMware中创建Ubuntu虚拟机，在虚拟机中安装mininet用来搭建SDN仿真网络，使用floodlight下发流表控制，使用sFlow进行流量监控。但是需要注意的一点是，floodlight的使用需要预先安装jdk环境，在Ubuntu中使用命令安装时jdk时，14的Ubuntu默认安装的是1.7的jdk，16的Ubuntu默认安装的是1.8的jdk。但是对于floodlight而言，1.0以下的版本是基于jdk1.7的，而1.0以后的则是需要jdk1.8的环境才能运行，所以，如果在14版本的Ubuntu中安装了1.7的jdk，然后安装1.0以后版本的floodlight，那floodlight便无法顺利运行。</p><p>其次是编译，在本次实验中，floodlight的编译需要使用ant，或者maven。相较于传统的项目而言，maven确实要好用很多，很适合项目的移植，而且在IDE中导入maven项目也比较方便。不过在这次的floodlight工程中，每次打包都需要编译、测试等，每次都执行测试步骤，有些浪费时间。</p><p>最后是关于日志。一个工具的使用过程，必然伴随着日志的产生，通过分析日志，可以比较清晰明了地知道工具的状态。例如，在使用ant编译过程中报错，不能一看到“100个错”就被吓退，去仔细看日志文件，检查是什么地方出错，事实上，最后发现，所谓的100个错，是中文编码字符集不统一导致的，这也进一步说明了，在平时编码的过程中，字符集的统一的重要性，值得一提的一点是，编码不同往往会导致中文乱码，但是英文不会，所以，如果条件允许，注释什么的，也尽量使用英文编写。此外，在确实发生乱码的情况下，使用编码转换工具，最好不要生硬地改变编码，这样容易导致乱码（中文）。<br>除了工具本身提供的日志之外，我们在编写一个项目的过程中，也应该注意日志的使用，一个项目在运行过程中，其内部的运行过程与结果对我们而言是封闭的（debug）除外，我们不知道编写的代码是否出错，在那里错。所以日志输出就显得很重要，在合适的位置插入日志输入，可以便于我们在控制台上检测、判断我们的程序的问题是出在那里。输出某些关键的参数，一方面能够让我们直观地知道程序的运行状态，另一方面也能方面我们后面调试修改程序。</p><h1 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h1><p>在floodlight中添加模块：</p><p>编写类继承特定的接口并实现接口的抽象类，然后在两个配置文件中将模块注册，这样floodlight在启动的时候便可以开启相应的模块，然后再模块的startUp方法中定义自己需要添加的功能。可以通过调用接口的实现类来获取对象，（例如switch信息），根据获取的对象，便可以获取整个floodlight中的开放的参数。</p><p>获取参数后，将参数信息传到处理的函数中，从所有信息中解析出我们实验所需要的信息，然后对信息进行二次封装，方便其他类对信息进行使用。</p><p>自主检测与防御。将获取到的信息与阈值进行比较（这里提供一个想法，阈值可不可以通过某种自主学习的算法实现），根据判断结果来执行后续的操作。</p><p>下发流表进行控制。在命令行中下发流表可以通过直接敲命令的方式实现，但在编程中，下发流表需要经过开启连接-传递参数-关闭连接的过程，而且着重要注意对参数的封装。现在主流的参数传递方法为json，能够比较友好地在前端和后端进行数据传输。</p><h1 id="标准的格式"><a href="#标准的格式" class="headerlink" title="标准的格式"></a>标准的格式</h1><p>在制作PPT和Word报告是，平时做的比较随意，在一些格式、细节上不是太重视，这也进一步导致了文档本身的不够规范问题。</p><p>对于一份标准的word格式的论文。封面，样式，字体，是否有横线，页边距。目录的缩进、字体、行距。正文中的各级标题，行距，字体，西文字体，代码格式，页眉页脚，题注表注等内容，以及对参考文献的引用等。这些细节或许很小，可以忽略，但是对于一份正式的报告而言，这些细节却是必须的。</p><p>PPT。PPT主要是用来作演示的，所以PPT的排版需要着重考虑观者的感受，PPT中不一定非得有很多内容，但是一定得把自己要体现的核心东西表现出来。PPT不一定非得很多页，但是每页需要体现出每页的价值。对于一些比较正式的汇报，PPT中则不应该出现太多花里胡哨的东西，对于正式的汇报而言，需要着重突出“学术性”和“庄重性”，其他的元素过多容易喧宾夺主，也容易影响观众观感。奥卡姆剃刀原则：如无必要，勿增实体。此外，对于某个特定主题的PPT而言，尽量不要出现过多其他的元素，PPT中的任何一个图片，应该有它存在的价值，不能为了有图片而存在图片，每一个元素都应该对他的存在负责。</p><p>流程图。流程图是一个很有必要的东西，很多时候，我们可以把冗长的文字描述转换为流程图，或者其他的图标，这样做最大的好处便是直观，方便观众去理解我们所要表达的东西，其次是简化页面，报告中与其全是文字，何不如将部分文字转化为图表，这样的排版，更能让人有看下去的想法。类似的还有结构图，拓扑图等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客内容为课设个人小结，具体课设参考课设报告&lt;/p&gt;
&lt;h1 id=&quot;资料查找&quot;&gt;&lt;a href=&quot;#资料查找&quot; class=&quot;headerlink&quot; title=&quot;资料查找&quot;&gt;&lt;/a&gt;资料查找&lt;/h1&gt;&lt;p&gt;这次课设的题目是在老师给的题目中四选一，在初步选定做DDos的检</summary>
      
    
    
    
    <category term="2021课设" scheme="https://stary1999.github.io/categories/2021%E8%AF%BE%E8%AE%BE/"/>
    
    
    <category term="实验" scheme="https://stary1999.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="课程设计" scheme="https://stary1999.github.io/tags/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="ubuntu" scheme="https://stary1999.github.io/tags/ubuntu/"/>
    
    <category term="SDN" scheme="https://stary1999.github.io/tags/SDN/"/>
    
    <category term="日志" scheme="https://stary1999.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
    <category term="心得" scheme="https://stary1999.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>maven的使用</title>
    <link href="https://stary1999.github.io/2021/06/30/mavenUse/"/>
    <id>https://stary1999.github.io/2021/06/30/mavenUse/</id>
    <published>2021-06-30T01:41:37.000Z</published>
    <updated>2021-06-30T07:28:09.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装maven核心程序"><a href="#安装maven核心程序" class="headerlink" title="安装maven核心程序"></a>安装maven核心程序</h2><ol><li><strong>检查java的JAVA_HOME环境变量的配置</strong></li><li>解压maven的核心程序，放在非中文无空格的路径下</li><li>配置maven的环境变量<ol><li>MAVEN_HOME或M2_HOME</li><li>配置path变量</li></ol></li><li>验证：mvn -v</li><li>maven的核心概念<ol><li>约定的目录结构</li><li>POM</li><li>坐标</li><li><strong>依赖</strong></li><li>仓库</li><li>生命周期</li><li>继承</li><li>聚合</li></ol></li></ol><h2 id="maven工程的创建"><a href="#maven工程的创建" class="headerlink" title="maven工程的创建"></a>maven工程的创建</h2><ol><li>创建约定的目录结构</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">|---src</span><br><span class="line">|---|---main</span><br><span class="line">|---|---|---java</span><br><span class="line">|---|---|---resources</span><br><span class="line">|---|---test</span><br><span class="line">|---|---|---java</span><br><span class="line">|---|---|---resources</span><br><span class="line">|---pom.xml</span><br></pre></td></tr></table></figure><p><strong>约定&gt;配置&gt;编码</strong></p><ol start="2"><li>pom.xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--工程名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--依赖的文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>手动运行maven</p><p>在main和test目录下创建对应的主程序和测试程序，利用dos命令运行maven。</p></li></ol><p>常用maven命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mvn clean清理</span><br><span class="line">mvn compile编译主程序</span><br><span class="line">mvn test-compile编译测试程序</span><br><span class="line">mvn test执行测试</span><br><span class="line">mvn package打包</span><br><span class="line">mvn install 安装</span><br><span class="line">mvn site 生成站点</span><br><span class="line">※注意：运行Maven命令时一定要进入pom.xml文件所在的目录！</span><br></pre></td></tr></table></figure><p> 修改默认本地仓库的位置：maven解压目录下的config/settings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> localRepository</span></span><br><span class="line"><span class="comment">  | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">  |</span></span><br><span class="line"><span class="comment">  | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>pom:Project Object Model,核心配置文件，必须</li><li>坐标：groupId：公司或组织名。artificiatId:模块名。version：版本</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>例如：</p><p><img src="/2021/06/30/mavenUse/image-20210630105324108.png" alt="image-20210630105324108"></p></blockquote><ul><li><p>依赖：对于自己创建的工程，执行mvn install，将自己创建的工程添加到本地仓库中。</p><ul><li><p>依赖的范围：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">compile：主程序的可见，对测试程序也可见，参与打包</span><br><span class="line">test：主程序不可见，测试程序可见， 不参与打包</span><br><span class="line">provided：主程序可见， 测试程序可见，  不参与打包</span><br><span class="line"> 开发时用，部署时忽略，由服务器提供，例如：servlet接口，</span><br></pre></td></tr></table></figure></li></ul></li><li><p>生命周期</p><p>Clean</p><p>Site</p><p>Default</p><p>生命周期开始一样，从最初的位置开始执行，执行到指定的位置，<strong>自动化构建</strong></p><p>生命周期阶段，插件目标，插件。在生命周期阶段，插件调用指定目标生成对应程序。</p></li></ul><h2 id="eclipse中maven的使用"><a href="#eclipse中maven的使用" class="headerlink" title="eclipse中maven的使用"></a>eclipse中maven的使用</h2><p>不建议使用插件自带的（不稳定）</p><p><img src="/2021/06/30/mavenUse/image-20210630130743248.png" alt="image-20210630130743248"></p><p>指定仓库的位置</p><p><img src="/2021/06/30/mavenUse/image-20210630130906449.png" alt="image-20210630130906449"></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol><li>创建maven版的java工程</li><li>创建maven版的web工程</li><li>执行maven命令</li></ol><p>eclipse中，添加开始菜单项：windows-customize Respective-Menu Visibility-File-New。</p><p><img src="/2021/06/30/mavenUse/image-20210630131339995.png" alt="image-20210630131339995"></p><p>设置通过maven创建的工程的JDK版本。</p><ol><li><p>config/settings.xml文件</p></li><li><p>在profiles标签中加入如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;jdk-1.7&lt;/id&gt;</span><br><span class="line">&lt;activation&gt;</span><br><span class="line">&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">&lt;jdk&gt;1.7&lt;/jdk&gt;</span><br><span class="line">&lt;/activation&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;1.7&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>新建一个maven工程，勾选simple，填写坐标信息</p><p>不必选择quarkstart，创建的目录不完全。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--坐标--&gt;</span><br><span class="line">&lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;Hello&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br></pre></td></tr></table></figure><p>在对应位置填写相关代码</p><h4 id="执行maven命令"><a href="#执行maven命令" class="headerlink" title="执行maven命令"></a>执行maven命令</h4><p><img src="/2021/06/30/mavenUse/image-20210630133048581.png" alt="image-20210630133048581"></p><p>在Maven build 。。。中添加compile</p><h3 id="建立web工程"><a href="#建立web工程" class="headerlink" title="建立web工程"></a>建立web工程</h3><p>修改新建项目时的打包方式：默认为jar包，修改为war包</p><p><img src="/2021/06/30/mavenUse/image-20210630134011484.png" alt="image-20210630134011484"></p><p>修改工程设置</p><p><img src="/2021/06/30/mavenUse/image-20210630134234682.png" alt="image-20210630134234682"></p><p><img src="/2021/06/30/mavenUse/image-20210630134352355.png" alt="image-20210630134352355"></p><h3 id="工程导入"><a href="#工程导入" class="headerlink" title="工程导入"></a>工程导入</h3><p>file-import-选择existing maven project</p><p><img src="/2021/06/30/mavenUse/image-20210630141126537.png" alt="image-20210630141126537"></p><p><strong>注意无法复制</strong></p><p>识别依据是pom.xml</p><p><strong>依赖具有传递性</strong></p><p>直接依赖与间接依赖<br>可以传递的依赖不必再每个工程模块中都重复声明。但是，注意非compile范围的依赖无法传递</p><p><strong>依赖的排除</strong></p><p>不稳定的jar包对项目造成影响  版本冲突<br>依赖排除的设置，从中间掐断的方式解除依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>依赖的原则</strong></p><p>解决jar包的冲突问题</p><p>​    就近优先原则，路径最短<br>​    路径相同时，先声明者优先，根据dependency中的顺序</p><p><strong>统一版本管理</strong></p><p>建议配置：使用properties标签内使用自定义标签统一声明版本号<br>                    在需要统一的版本位置，使用${自定义标签名}引用声明的版本号<br>凡是需要统一引用的场合都可以采用properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">atguigu.spring.version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">atguigu.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;atguigu.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>继承</p><p>例如：test范围内的Junit不能传递，必然分散在各个模块中，造成版本不一致。<br>解决思路，将Junit版本统一提取到父工程中，在子工程中不在设置，则以父工程为基准，便于修改。</p><p>操作：创建一个maven工程作为父工程，选择打包方式为pom。</p><p>在子工程中声明对父工程的引用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    父工程坐标</span><br><span class="line">    <span class="comment">&lt;!--以当前文件未基准的父工程pom.xml文件的相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relationPath</span>&gt;</span>../Parent/pom.xml<span class="tag">&lt;/<span class="name">relationPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将子工程的坐标中与父工程冲突的部分删除。</p><p>在父工程中统一管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencymanagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        //配置依赖</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencymanagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>继承后，执行install安装时需要先安装父工程</strong></p></li><li><p>聚合<br>作用：一键安装各种需要使用的模块<br>配置聚合：指定各个子工程的相对路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span>../hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../hellofriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../makefriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在聚合工程的pom.xml选择安装。（mvn insatll）</p></li></ul><h3 id="web工程"><a href="#web工程" class="headerlink" title="web工程"></a>web工程</h3><p>配置当前工程构建过程中的特殊配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---Web工程自动部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>AtguiguWeb<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.cargo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cargo-maven2-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">containerId</span>&gt;</span>tomcat6x<span class="tag">&lt;/<span class="name">containerId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">home</span>&gt;</span>D:\DevInstall\apache-tomcat-6.0.39<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>existing<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">home</span>&gt;</span>D:\DevInstall\apache-tomcat-6.0.39<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果Tomcat端口为默认值8080则不必设置该属性 --&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;properties&gt;</span></span><br><span class="line"><span class="comment">&lt;cargo.servlet.port&gt;8989&lt;/cargo.servlet.port&gt;</span></span><br><span class="line"><span class="comment">&lt;/properties&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>cargo-run<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>install<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动部署不适合在eclipse中使用</p><p>适合在命令行中用：cmd：mvn deploy</p><h2 id="maven依赖获取"><a href="#maven依赖获取" class="headerlink" title="maven依赖获取"></a>maven依赖获取</h2><p> 到<a href="http://mvnrepository.com/%E6%90%9C%E7%B4%A2%E9%9C%80%E8%A6%81%E7%9A%84">http://mvnrepository.com/搜索需要的</a> jar 包的依赖信息。</p><p>常用依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装maven核心程序&quot;&gt;&lt;a href=&quot;#安装maven核心程序&quot; class=&quot;headerlink&quot; title=&quot;安装maven核心程序&quot;&gt;&lt;/a&gt;安装maven核心程序&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检查java的JAVA_HOME环境变量</summary>
      
    
    
    
    <category term="工具" scheme="https://stary1999.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://stary1999.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="java" scheme="https://stary1999.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo安装与使用</title>
    <link href="https://stary1999.github.io/2021/06/29/hexoInstallAndUse/"/>
    <id>https://stary1999.github.io/2021/06/29/hexoInstallAndUse/</id>
    <published>2021-06-29T02:00:32.000Z</published>
    <updated>2021-07-01T10:06:57.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h1><h2 id="hexo简介："><a href="#hexo简介：" class="headerlink" title="hexo简介："></a>hexo简介：</h2><p>hexo是一个静态博客框架，基于node.js，可以方便托管到github或者gitee。</p><p>hexo在本地编写、保存文件，通过Git发布到github的仓库中，github中有提供相关静态页面访问的服务，借此完成一个静态博客的搭建。相较于其他方式搭建博客，Hexo资源占用更小，结合github使用，不需要额外的域名，也不需要租用服务器（服务器到期是一个比较麻烦的问题）。且由于是静态网页，基本不用担心后台入侵的问题，整个过程中，数据从本地到github，不需要其他环节参与。</p><p>其次是Hexo的可定制化高，主题、插件丰富，可定制化程度也比较高，markdown （我主要使用）的写作方式也比较符合未来的发展与规划，对程序员比较友好，较大的缺点是md文档在使用图片时不是太理想，如果能够将图片文件直接保存在md文件中就好了，但估计实现（<del>不可能</del>）难度较大。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>Github创建个人仓库</li><li>生成ssh并添加到GitHub</li><li>将Hexo部署到Github</li><li>其他</li></ol><span id="more"></span><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h3><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。</p><p>windows：git官网上下载，<a href="https://gitforwindows.org/">Download git</a>：<a href="https://gitforwindows.org/">https://gitforwindows.org/</a>。下载后打开Git Bash工具，用这个工具来使用git。</p><p>linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h3><p>由于Hexo是基于node.js编写的，使用需要安装node.js和npm工具</p><p>windows：官网下载：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p>linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>在Git Bash中，进入要建立博客的文件夹，或者在该文件夹下，右键使用Git Bash打开。此目录是博客目录的父目录。</p><p>Git Bash进入这个目录后，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>使用<code>hexo -v</code>检查hexo版本，测试是否暗转成功。</p><p>初始化Hexo：其中blogName是博客的名字，可以随便取，这个文件夹，即是博客文件夹。<br>进入文件夹，并在这个文件夹中安装博客系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blogName</span><br><span class="line">cd blogName</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装完成后，指定文件夹目录下有：</p><ul><li>node_moduls： #依赖包</li><li>public：#存放生成的页面</li><li>scaffold：#生成文章的模板</li><li>source：#存放文章、页面的目录</li><li>themes：#主题</li><li>_config.yml：#配置文件</li></ul><p>在Git Bash中输入（博客文件夹下）下列命令，开启本地服务。正常情况下，在浏览器中输入localhost:4000便可以打开博客。使用ctrl+c停止服务运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><strong>常用的命令还有：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean简写：hexo cl清除旧的静态资源</span><br><span class="line">hexo gender简写：hexo g生成静态文件</span><br><span class="line">hexo deploy简写：hexo d部署文件到网站</span><br><span class="line">hexo server简写：hexo s启动服务</span><br></pre></td></tr></table></figure><p>生成文章：建议title为英文。可在配置文件中开启默认标题，加上创建时期，便于区分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">或简写：hexo &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="4-Github创建个人仓库"><a href="#4-Github创建个人仓库" class="headerlink" title="4 Github创建个人仓库"></a>4 Github创建个人仓库</h3><ol><li><p>注册/登录github账号</p></li><li><p>创建一个新的仓库（new repository），仓库名称为自己的用户名，后面加上.github.io</p><p>完整名称应为：用户名/用户名.github.io</p></li></ol><h3 id="生成ssh并添加到Github中"><a href="#生成ssh并添加到Github中" class="headerlink" title="生成ssh并添加到Github中"></a>生成ssh并添加到Github中</h3><p>在git bash中输入，其中youname和youemail为github的用户名和邮箱。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>输入下列命令检查，正确无误后，输入第三条创建ssh，将youemail替换为github邮箱，一路回车默认，正常情况下可以在C:\Users\用户名\.ssh文件夹中找到ssh的公私秘钥。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>选择id_rsa.pub，打开并复制里面的文本内容。</p><p>在github中，点击设置，找到ssh keys，选择new ssh key，将复制的公钥消息粘贴进去。</p><p>在git bash中验证是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access</span><br></pre></td></tr></table></figure><p>则表示ssh部署成功</p><h3 id="6将hexo部署到Github"><a href="#6将hexo部署到Github" class="headerlink" title="6将hexo部署到Github"></a>6将hexo部署到Github</h3><p>打开博客文件夹下的_config.yml配置文件，在最末尾，修改配置文件：其中repo也可以选择  <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#109;</a>:用户名/用户名.github.io.git的方式，之前做的时候，使用https的方式提交失败，后面采用git的方式提交。具体地址也可以在github仓库中复制。brash则是提交到github仓库的哪一个分支中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装插件并部署到github：插件必须安装，否则无法用命令将博客部署到Github。这个阶段如果报错，主要检查仓库名称是否正确，repo地址是否正确。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署成功后，可以在<a href="https://yourname.github.io/">https://yourname.github.io</a>查看博客</p><h3 id="7其他设置"><a href="#7其他设置" class="headerlink" title="7其他设置"></a>7其他设置</h3><ol><li><p>设置个性域名</p><p>购买域名后，在域名服务商将购买的域名解析至Github的即可，Github地址可以在域名查询网站查询。</p><p>登录Github，进入博客的仓库，点击仓库的setting，设置Custom domain，输入购买的域名。</p><p>最后在博客的source中创建一个名为CNAME的文件，无后缀，在文件中写入域名。</p><p>最后在git bash中重新部署一遍博客（clean，g，d），便可以通过个性域名访问博客。</p></li></ol><h1 id="2-Hexo配置（简单版）"><a href="#2-Hexo配置（简单版）" class="headerlink" title="2.Hexo配置（简单版）"></a>2.Hexo配置（简单版）</h1><h2 id="1-config-yml配置文件修改"><a href="#1-config-yml配置文件修改" class="headerlink" title="1._config.yml配置文件修改"></a>1._config.yml配置文件修改</h2><p>这里主要修改几项常用的，其他可以根据需求查看官方文档进行修改</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字</td></tr><tr><td align="left"><code>url</code></td><td align="left">网址, 即为本博客的网址</td></tr><tr><td align="left"><code>new_post_name</code></td><td align="left">新文章的文件名称，建议修改为:year-:month-:day-:title.md</td></tr><tr><td align="left"><code>theme</code></td><td align="left">当前主题名称。值为<code>false</code>时禁用主题</td></tr></tbody></table><p>详细配置参数可以参考官网：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><h2 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2.更换主题"></a>2.更换主题</h2><p>主题商店链接：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>可以在主题商店选择喜欢的主题，可以预览样式，点击主题名称，可以查看主题github项目地址。一般主题中都有README.md文档，里面有相对详细的功能说明。</p><p><strong>注意</strong></p><ul><li>主题的安装过程中，主题必须放在themes文件夹下，更换主题只需要更换博客根目录中的主题名称即可。注意通过clone下载的主题中可能会有一个”.git”的隐藏文件夹，需要手动删除，不然会影响项目的上传（不能嵌套.git）。</li><li>各种主题中有各种功能，很多都需要安装插件，所以，在clone主题，修改配置文件中的主题后，还需要安装相应的插件。还有就是，很多功能时依赖于配置文件来设置的，当运行报错的时候，仔细检查配置文件中是否有某样功能处于开启状态，但是却没有配置相关参数。</li><li>更换主题后报错，首先检查插件是否装对，其次检查各种操作是否符合README.md文档的说明，检查相关参数是否设置完毕。可以根据报错的信息，大概判断错误是在哪个部位。最后，可以去主题的仓库，里面有个issue的部分，说不定别人也遇到了相同的问题，最后，也可以虚心向作者请教。</li></ul><h1 id="3-使用hexo"><a href="#3-使用hexo" class="headerlink" title="3.使用hexo"></a>3.使用hexo</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>在git bash中，进入博客的目录。输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new postname</span><br></pre></td></tr></table></figure><p>在source/_post/文件夹中创建一个名字为postname的markdown文件。<br>（如果修改默认标题的话，以修改的为准），使用markdown编辑器，对md文件进行编辑，编写自己的文章，文章编写完成后，使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>便可以将文章推送到github。</p><p>在scaffolds文件下，有个post.md文件，里面是创建一个新的post时默认使用的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">author: &#123;&#123; author &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">- default</span><br><span class="line">categories: </span><br><span class="line">- default</span><br></pre></td></tr></table></figure><p>这一段消息会被默认添加到每一篇文章中，包括了文章标题、创建的日期、作者、标签、分类。其中标签可以由多个，分类只能有一个。</p><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><p>略</p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>略</p><h3 id="文章统计"><a href="#文章统计" class="headerlink" title="文章统计"></a>文章统计</h3><p>略</p><h3 id="更换主页"><a href="#更换主页" class="headerlink" title="更换主页"></a>更换主页</h3><p>hexo默认的主页是显示文章列表，当我们不想首页显示文章列表时，可以自定义主页。</p><p>在source目录下，新建一个index文件夹，index文件夹中，新建一个index.md文件，填入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: index</span><br><span class="line">type: &quot;index&quot;</span><br><span class="line">permalink: index.html</span><br></pre></td></tr></table></figure><p>接下来填入需要在主页显示的内容，例如我的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* [主页](../home/)</span><br><span class="line">* [标签](../tages/)</span><br><span class="line">* [分类](../categories/)</span><br><span class="line">* [归档](../assort/)</span><br><span class="line">* [关于](../about/)</span><br></pre></td></tr></table></figure><p>打开根目录配置文件：_config.yml，修改path为’/index/‘，保存文件，重启服务器即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Home page setting</span><br><span class="line"># path: Root path for your blogs index page. (default = &#x27;&#x27;)  &#x27;/intro/&#x27;</span><br><span class="line"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="line"># order_by: Posts order. (Order by date descending by default)</span><br><span class="line">index_generator:</span><br><span class="line">  path: &#x27;/index/&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br></pre></td></tr></table></figure><h1 id="final-踩坑"><a href="#final-踩坑" class="headerlink" title="final 踩坑"></a>final 踩坑</h1><h2 id="主题异常"><a href="#主题异常" class="headerlink" title="主题异常"></a>主题异常</h2><p>在使用主题时，开启服务后不断报错，<br>报错显示，有未定义的变量</p><p>无法运行，最后发现，是因为博客默认开启了评论功能，但是我没有再配置文件中添加相关的配置，于是就出现了”未定义的变量”的错误。</p><h2 id="hexo图片显示异常"><a href="#hexo图片显示异常" class="headerlink" title="hexo图片显示异常"></a>hexo图片显示异常</h2><ul><li><strong>设置路径</strong></li></ul><p>使用typora编辑md文件后，插入的图片如果是采用截图的方式，图片资源将会保存在临时文件中，图片的引用路径也是临时文件的路径。</p><p>首先，需要修改typora的图片设置：文件-偏好设置-图像，设置插入图片时的相关参数，选择复制图片到指定路径，指定路径为md文件的同名文件夹，并设置本地应用规则，如果对应服务器有账号，也可以选择上传到对应的服务器中（未尝试）。</p><p><img src="/2021/06/29/hexoInstallAndUse/image-20210629132211843.png" alt="image-20210629132211843"></p><ul><li><strong>hexo安装插件</strong></li></ul><p>修改配置文件_config.yml：设置post_asset_folder  为 true</p><p>安装插件 asset-image:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:<span class="comment">//github.com/CodeFalling/hexo-asset-image</span></span><br></pre></td></tr></table></figure><p>运行测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo s </span><br></pre></td></tr></table></figure><p><strong>注意修改图片路径</strong></p><p>注意修改图片路径中的\为/。</p><p>且文件名尽量不要为中文。</p><ul><li>其他方案</li></ul><ol><li>将图片放入<code>source/images</code>目录下,每次<code>generate</code>都会生成图片,在使用相对或绝对路径进行引用</li><li> 配置<code>hexo</code>的<code>_config.yml</code>文件, 将 <code>post_asset_folder</code> 设置为<code>true</code>, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径. </li><li> 使用<code>hexo</code>官方的解决方案,使用模版变量, <code>&#123;% asset_img slug [title] %&#125; </code></li></ol><p>前两中首页跟内容页会有一个加载失败的问题,而第三种则失去了<code>markdown</code>的意义。顾采用上述方案，保证本地文件显示正常，且网页正常显示。</p><p>参考：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1702112">https://cloud.tencent.com/developer/article/1702112</a></li><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-安装hexo&quot;&gt;&lt;a href=&quot;#1-安装hexo&quot; class=&quot;headerlink&quot; title=&quot;1.安装hexo&quot;&gt;&lt;/a&gt;1.安装hexo&lt;/h1&gt;&lt;h2 id=&quot;hexo简介：&quot;&gt;&lt;a href=&quot;#hexo简介：&quot; class=&quot;headerlink&quot; title=&quot;hexo简介：&quot;&gt;&lt;/a&gt;hexo简介：&lt;/h2&gt;&lt;p&gt;hexo是一个静态博客框架，基于node.js，可以方便托管到github或者gitee。&lt;/p&gt;
&lt;p&gt;hexo在本地编写、保存文件，通过Git发布到github的仓库中，github中有提供相关静态页面访问的服务，借此完成一个静态博客的搭建。相较于其他方式搭建博客，Hexo资源占用更小，结合github使用，不需要额外的域名，也不需要租用服务器（服务器到期是一个比较麻烦的问题）。且由于是静态网页，基本不用担心后台入侵的问题，整个过程中，数据从本地到github，不需要其他环节参与。&lt;/p&gt;
&lt;p&gt;其次是Hexo的可定制化高，主题、插件丰富，可定制化程度也比较高，markdown （我主要使用）的写作方式也比较符合未来的发展与规划，对程序员比较友好，较大的缺点是md文档在使用图片时不是太理想，如果能够将图片文件直接保存在md文件中就好了，但估计实现（&lt;del&gt;不可能&lt;/del&gt;）难度较大。&lt;/p&gt;
&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装Git&lt;/li&gt;
&lt;li&gt;安装Node.js&lt;/li&gt;
&lt;li&gt;安装Hexo&lt;/li&gt;
&lt;li&gt;Github创建个人仓库&lt;/li&gt;
&lt;li&gt;生成ssh并添加到GitHub&lt;/li&gt;
&lt;li&gt;将Hexo部署到Github&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="工具" scheme="https://stary1999.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
    <category term="hexo" scheme="https://stary1999.github.io/tags/hexo/"/>
    
    <category term="踩坑" scheme="https://stary1999.github.io/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://stary1999.github.io/2021/06/29/markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://stary1999.github.io/2021/06/29/markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2021-06-29T02:00:08.000Z</published>
    <updated>2021-07-01T10:06:57.613Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h1><h2 id="1-1-字体设置（斜体、粗体、删除线）"><a href="#1-1-字体设置（斜体、粗体、删除线）" class="headerlink" title="1.1 字体设置（斜体、粗体、删除线）"></a>1.1 字体设置（斜体、粗体、删除线）</h2><p>正常文字<br><em>斜体文字</em><br><em>斜体文字</em><br><strong>加粗文字</strong><br><em><strong>斜体加粗</strong></em><br><del>删除线</del></p><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629101027698.png" alt="image-20210629101027698"></p><h2 id="1-2分级标题"><a href="#1-2分级标题" class="headerlink" title="1.2分级标题"></a>1.2分级标题</h2><p>标题用#+空格+标题内容表示，一个#号表示一级标题，最多为六级标题。</p><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629101313316.png" alt="image-20210629101313316"></p><p>写法二：</p><p>略，待更新</p><span id="more"></span><h2 id="1-3-链接"><a href="#1-3-链接" class="headerlink" title="1.3 链接"></a>1.3 链接</h2><p>插入图片为了便于迁移文档，建议在文档同名目录下，新建一个文件夹用作保存图片资源。</p><p>在typora中，可以开启自动保存图片的设置，方便编写文档，否则，截屏的图片资源默认是存在临时文件夹中的，当清理系统时，临时文件会被删除，文档中的图片资源链接也会随之失效。</p><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629102030713.png" alt="image-20210629102030713"></p><p>插入网页链接，可以用&lt;链接&gt;引起来，也可以直接输入链接地址，会自动转换。</p><p><strong>超链接</strong></p><p>格式为[内容]+(链接)</p><p>例如：<a href="baidu.com">百度</a></p><h2 id="1-4分割线"><a href="#1-4分割线" class="headerlink" title="1.4分割线"></a>1.4分割线</h2><p>在一行中用三个以上的星号（*），减号（-），底线（_)来建立分割线。注意行内不能有其他东西（可以插入空格）</p><hr><hr><hr><h2 id="1-5代码块"><a href="#1-5代码块" class="headerlink" title="1.5代码块"></a>1.5代码块</h2><h3 id="1批量代码"><a href="#1批量代码" class="headerlink" title="1批量代码"></a>1批量代码</h3><p>a:两种方式创建代码块，a：利用缩进tab（或四个空格）</p><p>未成功？？待更新</p><p>b:利用英文反引号，”`”,一般在键盘左上角。在代码的始末位置连续使用三个反引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class hello&#123;</span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">Syetem.out.println(&quot;hello markdown!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2行内式代码"><a href="#2行内式代码" class="headerlink" title="2行内式代码"></a>2行内式代码</h3><p>在行内引用代码，使用一对反引号包裹代码内容，例如：这是一个<code>code</code>。</p><h3 id="3代码高亮"><a href="#3代码高亮" class="headerlink" title="3代码高亮"></a>3代码高亮</h3><p>在反引号后面加上对应的代码语言</p><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629111930189.png" alt="image-20210629111930189"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">Syetem.out.println(<span class="string">&quot;hello markdown!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        </p><h3 id="4代码块中包含html"><a href="#4代码块中包含html" class="headerlink" title="4代码块中包含html"></a>4代码块中包含html</h3><p><del>在代码块区域，&amp;、&lt;、&gt;会自动转换为html实体，顾代码块中的html会显示为html样式。</del></p><p>例如：</p><p>???</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>course<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>day 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>day 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>day 3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Kangkang<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>Jan<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6引用"><a href="#1-6引用" class="headerlink" title="1.6引用"></a>1.6引用</h2><p>在被引用的文本前添加&gt;符号和一个空格。</p><blockquote><p>引用</p></blockquote><p>引用嵌套：</p><p>?</p><p>引用其他要素</p><p>？</p><h2 id="1-7列表"><a href="#1-7列表" class="headerlink" title="1.7列表"></a>1.7列表</h2><ol><li>无序列表<br>使用*，+，-跟随空格表示无序列表</li></ol><ul><li>列表一</li><li>列表二</li></ul><ol start="2"><li>有序列表</li></ol><p>使用数字和英文句点表示有序列表，后跟空格。</p><ol start="3"><li><p>无序和有序可嵌套使用</p><ol><li>上一级和下一级之间敲三个空格（或者在缩进后直接敲）</li></ol></li><li><p>列表与其他混用</p><ul><li><ol><li><del>文字</del></li></ol></li></ul></li><li><p>注意事项</p><ul><li><p>加粗效果不能直接用于列表标题，但可以嵌套在列表中使用</p></li><li><p>列表中包含代码块，前面需要两个tab且空一行</p></li><li><p>使用列表时，数字后面+英文点号+空格，可能会被误判为列表，需使用转义字符\。</p></li></ul></li></ol><h2 id="1-8表格"><a href="#1-8表格" class="headerlink" title="1.8表格"></a>1.8表格</h2><p>表格的使用:</p><p><strong>注意行与行之间不能有空格，按回车时建议使用shift</strong></p><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名<span class="params">|技能|</span>排行</span><br><span class="line">--<span class="params">|:--:|</span>--:</span><br><span class="line">刘备<span class="params">|哭|</span>大哥</span><br><span class="line">关羽<span class="params">|打|</span>二哥</span><br><span class="line">张飞<span class="params">|骂|</span>三弟</span><br></pre></td></tr></table></figure><h1 id="2快捷键"><a href="#2快捷键" class="headerlink" title="2快捷键"></a>2快捷键</h1><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td><strong>加粗</strong></td><td>ctrl+b</td></tr><tr><td><em>斜体</em></td><td>ctrl+i</td></tr><tr><td>引用</td><td>ctrl+q</td></tr><tr><td>插入链接</td><td>ctrl+l</td></tr><tr><td>插入代码</td><td>ctrl+k</td></tr><tr><td>插入图片</td><td>ctrl+g</td></tr><tr><td>提升标题</td><td>ctrl+h</td></tr><tr><td>有序列表</td><td>ctrl+o</td></tr><tr><td><u>无序列表</u></td><td>ctrl+u</td></tr><tr><td>横线</td><td>ctrl+r</td></tr><tr><td>撤销</td><td>ctrl+z</td></tr><tr><td>重做</td><td>ctrl+y</td></tr></tbody></table><h1 id="3-常用技巧"><a href="#3-常用技巧" class="headerlink" title="3.常用技巧"></a>3.常用技巧</h1><h2 id="3-1换行"><a href="#3-1换行" class="headerlink" title="3.1换行"></a>3.1换行</h2><ul><li><p>方法1：连续两个以上空格+回车</p></li><li><p>方法2：使用html中的<br></p></li></ul><h2 id="3-2缩进字符"><a href="#3-2缩进字符" class="headerlink" title="3.2缩进字符"></a>3.2缩进字符</h2><h2 id="3-3-特殊字符"><a href="#3-3-特殊字符" class="headerlink" title="3.3 特殊字符"></a>3.3 特殊字符</h2><ol><li><p>对于markdown中的语法符号，前方添加反斜线\即可显示符号本身</p></li><li><p>其他字符查看对于的Unicode码，参考网站：<a href="https://unicode-table.com/cn/">https://unicode-table.com/cn/</a></p></li></ol><h2 id="3-4-字体，字号，颜色"><a href="#3-4-字体，字号，颜色" class="headerlink" title="3.4 字体，字号，颜色"></a>3.4 字体，字号，颜色</h2><p>利用html内嵌代码实现</p><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629115237467.png"></p><h2 id="3-5-高级链接"><a href="#3-5-高级链接" class="headerlink" title="3.5 高级链接"></a>3.5 高级链接</h2><ul><li><p>行内式</p></li><li><p>参考式连接</p></li><li><p>内容目录<br>在段落中填写[TOC]以显示全文内容的目录</p></li></ul><p>[TOC]</p><ul><li><p>锚点：</p><p>即页内超链接</p><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629115733687.png" alt="image-20210629115733687"></p></li><li><p>注脚[^注脚名字]，实现，例如[^1]</p></li><li><p>背景色<br>采用内置html实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;背景色是：orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure><table><tr><td bgcolor="orange">背景色是：orange</td></tr></table></li><li><p>emoji表情符号</p><p>emoji表情使用:EMOJICODE:的格式，详细列表可见<br><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">https://www.webpagefx.com/tools/emoji-cheat-sheet/</a></p></li></ul><h1 id="4高级用法"><a href="#4高级用法" class="headerlink" title="4高级用法"></a>4高级用法</h1><h2 id="4-1latex数学公式"><a href="#4-1latex数学公式" class="headerlink" title="4.1latex数学公式"></a>4.1latex数学公式</h2><p>1.行内公式：使用两个”$”符号引用公式:</p><p>$公式$</p><p>2.行间公式：使用两对”$$”符号引用公式：</p><p>$$公式$$</p><p>输入$\sqrt{x^{2}}$<br>$<br>\sqrt{x^{2}}<br>$<br>具体可以参考 markdown编辑器使用LaTex数学公式（<a href="https://link.jianshu.com/?t=http://blog.csdn.net/testcs_dn/article/details/44229085%EF%BC%89">https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Ftestcs_dn%2Farticle%2Fdetails%2F44229085）</a></p><p>latex数学符号详见：<a href="https://www.mohu.org/info/symbols/symbols.htm">常用数学符号的 LaTeX 表示方法</a></p><h2 id="4-2流程图"><a href="#4-2流程图" class="headerlink" title="4.2流程图"></a>4.2流程图</h2><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/20180802165820199" alt="img"></p><h2 id="4-3-待办事项：Todo列表："><a href="#4-3-待办事项：Todo列表：" class="headerlink" title="4.3 待办事项：Todo列表："></a>4.3 待办事项：Todo列表：</h2><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/20180802165859799" alt="img"></p><h2 id="4-4-绘制序列图"><a href="#4-4-绘制序列图" class="headerlink" title="4.4 绘制序列图"></a>4.4 绘制序列图</h2><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/2018080216592352" alt="img"></p><h2 id="4-5绘制甘特图"><a href="#4-5绘制甘特图" class="headerlink" title="4.5绘制甘特图"></a>4.5绘制甘特图</h2><p><img src="/2021/06/29/markdown%E8%AF%AD%E6%B3%95/20180802165941601" alt="img"></p><p>参考文章：</p><p><a href="https://blog.csdn.net/u014061630/article/details/81359144">https://blog.csdn.net/u014061630/article/details/81359144</a></p><p><a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p><p><a href="http://markdown.p2hp.com/basic-syntax/">http://markdown.p2hp.com/basic-syntax/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;1-基本语法&quot;&gt;&lt;a href=&quot;#1-基本语法&quot; class=&quot;headerlink&quot; title=&quot;1.基本语法&quot;&gt;&lt;/a&gt;1.基本语法&lt;/h1&gt;&lt;h2 id=&quot;1-1-字体设置（斜体、粗体、删除线）&quot;&gt;&lt;a href=&quot;#1-1-字体设置（斜体、粗体、删除线）&quot; class=&quot;headerlink&quot; title=&quot;1.1 字体设置（斜体、粗体、删除线）&quot;&gt;&lt;/a&gt;1.1 字体设置（斜体、粗体、删除线）&lt;/h2&gt;&lt;p&gt;正常文字&lt;br&gt;&lt;em&gt;斜体文字&lt;/em&gt;&lt;br&gt;&lt;em&gt;斜体文字&lt;/em&gt;&lt;br&gt;&lt;strong&gt;加粗文字&lt;/strong&gt;&lt;br&gt;&lt;em&gt;&lt;strong&gt;斜体加粗&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629101027698.png&quot; alt=&quot;image-20210629101027698&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-2分级标题&quot;&gt;&lt;a href=&quot;#1-2分级标题&quot; class=&quot;headerlink&quot; title=&quot;1.2分级标题&quot;&gt;&lt;/a&gt;1.2分级标题&lt;/h2&gt;&lt;p&gt;标题用#+空格+标题内容表示，一个#号表示一级标题，最多为六级标题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/06/29/markdown%E8%AF%AD%E6%B3%95/image-20210629101313316.png&quot; alt=&quot;image-20210629101313316&quot;&gt;&lt;/p&gt;
&lt;p&gt;写法二：&lt;/p&gt;
&lt;p&gt;略，待更新&lt;/p&gt;</summary>
    
    
    
    <category term="语言" scheme="https://stary1999.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="语法" scheme="https://stary1999.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="入门" scheme="https://stary1999.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
    <category term="markdown" scheme="https://stary1999.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>post test 2</title>
    <link href="https://stary1999.github.io/2021/06/28/post-test-2/"/>
    <id>https://stary1999.github.io/2021/06/28/post-test-2/</id>
    <published>2021-06-28T10:12:38.000Z</published>
    <updated>2021-06-28T10:12:38.733Z</updated>
    
    
    
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>4_29_tomcat and severlet</title>
    <link href="https://stary1999.github.io/2021/06/28/old-4-29-tomcat-and-severlet/"/>
    <id>https://stary1999.github.io/2021/06/28/old-4-29-tomcat-and-severlet/</id>
    <published>2021-06-28T10:12:38.000Z</published>
    <updated>2021-06-28T10:18:41.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-idea激活，使用30天试用期插件"><a href="#1-idea激活，使用30天试用期插件" class="headerlink" title="1.idea激活，使用30天试用期插件"></a>1.idea激活，使用30天试用期插件</h3><h3 id="2-tomcat日志乱码，"><a href="#2-tomcat日志乱码，" class="headerlink" title="2.tomcat日志乱码，"></a>2.tomcat日志乱码，</h3><p><img src="file:///C:/Users/张雄/AppData/Local/Temp/msohtmlclip1/01/clip_image001.png" alt="img"></p><p>找到tomcat安装目录conf下logging.properties文件，打开后搜索：java.util.logging.ConsoleHandler.encoding</p><p>修改为GBK</p><p><img src="file:///C:/Users/张雄/AppData/Local/Temp/msohtmlclip1/01/clip_image003.jpg" alt="img"></p><h3 id="3-tomcat服务器使用："><a href="#3-tomcat服务器使用：" class="headerlink" title="3.tomcat服务器使用："></a>3.tomcat服务器使用：</h3><p>   a，正常流程安装，安装好后，浏览器输入localhost:8080测试，注意JDK路径与环境变量配置</p><p>   b，与idea关联使用：</p><p>​       注意事项：每次修改服务的相关代码后，都需要重启tomcat服务，（例如servlet），tomcat启动较慢，修改其他文件可以不用重启服务，只需重新编译class和资源。</p><p>   <img src="file:///C:/Users/张雄/AppData/Local/Temp/msohtmlclip1/01/clip_image005.jpg" alt="img"></p><p><img src="file:///C:/Users/张雄/AppData/Local/Temp/msohtmlclip1/01/clip_image007.jpg" alt="img"></p><p><img src="file:///C:/Users/张雄/AppData/Local/Temp/msohtmlclip1/01/clip_image009.jpg" alt="img"></p><p><img src="file:///C:/Users/张雄/AppData/Local/Temp/msohtmlclip1/01/clip_image011.jpg" alt="img"></p><h3 id="4-书城阶段总结："><a href="#4-书城阶段总结：" class="headerlink" title="4.书城阶段总结："></a>4.书城阶段总结：</h3><p>   前端html+css实现静态样式</p><p>   jquary用来做事件响应，（表单验证）</p><p>   tomcat作服务器，servlet用来响应请求。实现页面跳转以及从客户端获取、处理数据。</p><h3 id="5-servlet："><a href="#5-servlet：" class="headerlink" title="5.servlet："></a>5.servlet：</h3><p>​    重定向、请求分发，响应流</p><p>注意：     设置服务器、浏览器的编码。</p><p>​                   在web.xml中需要声明servlet。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-idea激活，使用30天试用期插件&quot;&gt;&lt;a href=&quot;#1-idea激活，使用30天试用期插件&quot; class=&quot;headerlink&quot; title=&quot;1.idea激活，使用30天试用期插件&quot;&gt;&lt;/a&gt;1.idea激活，使用30天试用期插件&lt;/h3&gt;&lt;h3 i</summary>
      
    
    
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://stary1999.github.io/2021/06/28/old-4-30-MySQL/"/>
    <id>https://stary1999.github.io/2021/06/28/old-4-30-MySQL/</id>
    <published>2021-06-28T10:12:38.000Z</published>
    <updated>2021-06-29T08:38:51.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Idea连接MySQL常见报错"><a href="#1-Idea连接MySQL常见报错" class="headerlink" title="1.Idea连接MySQL常见报错"></a>1.Idea连接MySQL常见报错</h2><h4 id="a-驱动版本与MySQL版本不同"><a href="#a-驱动版本与MySQL版本不同" class="headerlink" title="a.驱动版本与MySQL版本不同"></a>a.驱动版本与MySQL版本不同</h4><p><img src="/2021/06/28/old-4-30-MySQL/Users\张雄\AppData\Roaming\Typora\typora-user-images\image-20210430123446936.png" alt="image-20210430123446936"></p><h4 id="b-时区错误："><a href="#b-时区错误：" class="headerlink" title="b.时区错误："></a>b.时区错误：</h4><p>连接MySQL后，输入下列命令。</p><p><img src="/2021/06/28/old-4-30-MySQL/Users\张雄\AppData\Roaming\Typora\typora-user-images\image-20210430123607848.png" alt="image-20210430123607848"></p><h4 id="c-驱动弃用"><a href="#c-驱动弃用" class="headerlink" title="c.驱动弃用"></a>c.驱动弃用</h4><p>修改配置文件驱动</p><p><img src="/2021/06/28/old-4-30-MySQL/Users\张雄\AppData\Roaming\Typora\typora-user-images\image-20210430123855060.png" alt="image-20210430123855060"></p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p><img src="/2021/06/28/old-4-30-MySQL/Users\张雄\AppData\Roaming\Typora\typora-user-images\image-20210430125823512.png" alt="image-20210430125823512"></p><h4 id="d-加密方式变化"><a href="#d-加密方式变化" class="headerlink" title="d.加密方式变化"></a>d.加密方式变化</h4><p>MySQL8.0后加密方式变化，可能出现连接不上的问题</p><p>报错：Client does not support authentication protocol requested by server; consider upgrading MySQL client</p><p>mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password</p><p><img src="/2021/06/28/old-4-30-MySQL/Users\张雄\AppData\Roaming\Typora\typora-user-images\image-20210430124334509.png" alt="image-20210430124334509"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Idea连接MySQL常见报错&quot;&gt;&lt;a href=&quot;#1-Idea连接MySQL常见报错&quot; class=&quot;headerlink&quot; title=&quot;1.Idea连接MySQL常见报错&quot;&gt;&lt;/a&gt;1.Idea连接MySQL常见报错&lt;/h2&gt;&lt;h4 id=&quot;a-驱动版</summary>
      
    
    
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>idea 使用指南</title>
    <link href="https://stary1999.github.io/2021/06/28/old-idea%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://stary1999.github.io/2021/06/28/old-idea%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2021-06-28T10:12:38.000Z</published>
    <updated>2021-06-28T10:50:45.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h4 id="1-try-catch-、生成测试"><a href="#1-try-catch-、生成测试" class="headerlink" title="1.try-catch 、生成测试"></a>1.try-catch 、生成测试</h4><p>ctrl+alt+t</p><h4 id="2-快速生成get、set等函数"><a href="#2-快速生成get、set等函数" class="headerlink" title="2.快速生成get、set等函数"></a>2.快速生成get、set等函数</h4><p>alt+insert</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>断点+debug</p><p>run模式和debug模式</p><h2 id="修改配置文件需要重新部署"><a href="#修改配置文件需要重新部署" class="headerlink" title="修改配置文件需要重新部署"></a>修改配置文件需要重新部署</h2><p>例如：web.xml</p><p>修改代码热部署即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h2&gt;&lt;h4 id=&quot;1-try-catch-、生成测试&quot;&gt;&lt;a href=&quot;#1-try-catch-、生成测试&quot; class=&quot;header</summary>
      
    
    
    
    <category term="工具" scheme="https://stary1999.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
    <category term="idea" scheme="https://stary1999.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>firefox主页被劫持</title>
    <link href="https://stary1999.github.io/2021/06/28/old-firefox%E4%B8%BB%E9%A1%B5%E8%A2%AB%E5%8A%AB%E6%8C%81/"/>
    <id>https://stary1999.github.io/2021/06/28/old-firefox%E4%B8%BB%E9%A1%B5%E8%A2%AB%E5%8A%AB%E6%8C%81/</id>
    <published>2021-06-28T10:12:38.000Z</published>
    <updated>2021-06-29T08:38:58.962Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>打开浏览器，自动弹出360的界面</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>解决方案一：</p><p>进行主页修复，重设火狐主页，详情请访问： <a href="http://doc.firefoxchina.cn/document/repair/">http://doc.firefoxchina.cn/document/repair/</a></p><p>解决方案二：<br>如果无法修改选项中火狐主页的地址，可能中了恶意扩展或者火狐配置被篡改。</p><p>1.检查 附加组件 – 扩展 中是否有可疑扩展，禁用掉。<br>2.在地址栏里输入”about:support”<br>3.单击配置文件夹后的”显示文件夹”按钮。<br>4.在弹出来的文件夹中找到那个叫做”user.js”的文件，右键选择”编辑”。<br>5.在弹出来的窗口中找到user_pref(“browser.startup.homepage”, “被锁定的网址”)<br>6.直接删除”user.js”或者删除这行代码。</p><p>解决方案三：</p><p>如果还不行，就在你安装的路径打开火狐，如果打开没没被劫持就是快捷方式被篡改了，将快捷方式去掉，重新生成。</p><p><img src="/2021/06/28/old-firefox%E4%B8%BB%E9%A1%B5%E8%A2%AB%E5%8A%AB%E6%8C%81/Users\张雄\AppData\Roaming\Typora\typora-user-images\image-20210503114125619.png" alt="image-20210503114125619"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h4&gt;&lt;p&gt;打开浏览器，自动弹出360的界面&lt;/p&gt;
&lt;h4 id=&quot;解决：&quot;&gt;&lt;a href=&quot;#解决：&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="default" scheme="https://stary1999.github.io/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stary1999.github.io/2021/06/28/hello-world/"/>
    <id>https://stary1999.github.io/2021/06/28/hello-world/</id>
    <published>2021-06-28T02:22:28.784Z</published>
    <updated>2021-06-28T02:22:28.784Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
